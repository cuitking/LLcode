// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
// source proto file: packetSystem.proto
#include "packetSystem.lua.h"
#include <lua/lua.hpp>
#include <string>
#include <sstream>
#include <set>
#include <boost/cast.hpp>
extern int udataNum;
extern std::set<::google::protobuf::Message*> u_datas;


namespace { bool success = AddOpenFunction(lua_protobuf_pb_open); }
int lua_protobuf_pb_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "proto-buf.pb", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "pb");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "proto-buf.pb", funcs);
    lua_protobuf_pb_EmptyPacket_open(L);
    lua_protobuf_pb_Update_open(L);
    lua_protobuf_pb_ListenConfig_open(L);
    lua_protobuf_pb_InitServer_open(L);
    lua_protobuf_pb_SetServerInfo_open(L);
    lua_protobuf_pb_InitServerResponse_open(L);
    lua_protobuf_pb_ServerActive_open(L);
    lua_protobuf_pb_InitGate_open(L);
    lua_protobuf_pb_ClientConnectGate_open(L);
    lua_protobuf_pb_ChangeServerGuid_open(L);
    lua_protobuf_pb_GatePlayerCount_open(L);
    lua_protobuf_pb_NewIncomingConnection_open(L);
    lua_protobuf_pb_ConnectionRequestAccepted_open(L);
    lua_protobuf_pb_ConnectionAttemptFailed_open(L);
    lua_protobuf_pb_DisconnectionNotification_open(L);
    lua_protobuf_pb_LoginError_open(L);
    lua_protobuf_pb_FlushConfig_open(L);
    lua_protobuf_pb_ShutServerDown_open(L);
    lua_protobuf_pb_ClockDifferential_open(L);
    lua_protobuf_pb_Bulletin_open(L);
    lua_protobuf_pb_VersionCheck_open(L);
    lua_protobuf_pb_VersionCheckFaild_open(L);
    lua_protobuf_pb_ProxyMessage_open(L);
    lua_protobuf_pb_ReInitProxy_open(L);
    lua_protobuf_pb_PakCheckCodeQuery_open(L);
    lua_protobuf_pb_PakCheckCode_open(L);
    lua_protobuf_pb_PakCheckCodeRes_open(L);
    lua_protobuf_pb_PakCheckFailed_open(L);
    lua_protobuf_pb_InitPveGameServer_open(L);
    lua_protobuf_pb_IncPlayer_open(L);
    lua_protobuf_pb_DeIncPlayer_open(L);
    lua_protobuf_pb_ClientLog_open(L);
    lua_protobuf_pb_ClientDump_open(L);
    lua_protobuf_pb_SystemKeepalive_open(L);
    lua_protobuf_pb_ProxyBalanceAdd_open(L);
    lua_protobuf_pb_ProxyBalanceDel_open(L);
    lua_protobuf_pb_InitUdpProxy_open(L);
    lua_protobuf_pb_PlayerGuidNotify_open(L);
    lua_protobuf_pb_SetPacketStat_open(L);
    lua_protobuf_pb_UploadFileReq_open(L);
    lua_protobuf_pb_UploadFileReply_open(L);
    lua_protobuf_pb_CollectModuleInfo_open(L);
    lua_protobuf_pb_SyncItemLock_open(L);
    lua_protobuf_pb_OneString_open(L);
    return 1;
}


static const struct luaL_Reg EmptyPacket_functions [] = {
    {"new", lua_protobuf_pb_EmptyPacket_new},
    {NULL, NULL}
};

static const struct luaL_Reg EmptyPacket_methods [] = {
    {"serialized", lua_protobuf_pb_EmptyPacket_serialized},
    {"parsefromstring", lua_protobuf_pb_EmptyPacket_parsefromstring},
    {"data", lua_protobuf_pb_EmptyPacket_data},
    {"assign", lua_protobuf_pb_EmptyPacket_assign},
    {"clear", lua_protobuf_pb_EmptyPacket_clear},
    {"__gc", lua_protobuf_pb_EmptyPacket_gc},
    {"size", lua_protobuf_pb_EmptyPacket_size},
    {NULL, NULL},
};

int lua_protobuf_pb_EmptyPacket_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.EmptyPacket");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, EmptyPacket_methods);
    luaL_register(L, "proto-buf.pb.EmptyPacket", EmptyPacket_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_EmptyPacket_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::EmptyPacket*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.EmptyPacket");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_EmptyPacket_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::EmptyPacket();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.EmptyPacket");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_EmptyPacket_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* m = boost::polymorphic_downcast<::pb::EmptyPacket*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_EmptyPacket_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* m = boost::polymorphic_downcast<::pb::EmptyPacket*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* src = boost::polymorphic_downcast<::pb::EmptyPacket*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_EmptyPacket_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* m = boost::polymorphic_downcast<::pb::EmptyPacket*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_EmptyPacket_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_EmptyPacket_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* m = boost::polymorphic_downcast<::pb::EmptyPacket*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_EmptyPacket_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* m = boost::polymorphic_downcast<::pb::EmptyPacket*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_EmptyPacket_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.EmptyPacket");
    ::pb::EmptyPacket* m = boost::polymorphic_downcast<::pb::EmptyPacket*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
static const struct luaL_Reg Update_functions [] = {
    {"new", lua_protobuf_pb_Update_new},
    {NULL, NULL}
};

static const struct luaL_Reg Update_methods [] = {
    {"serialized", lua_protobuf_pb_Update_serialized},
    {"parsefromstring", lua_protobuf_pb_Update_parsefromstring},
    {"data", lua_protobuf_pb_Update_data},
    {"assign", lua_protobuf_pb_Update_assign},
    {"clear", lua_protobuf_pb_Update_clear},
    {"__gc", lua_protobuf_pb_Update_gc},
    {"size", lua_protobuf_pb_Update_size},
    {"clear_now", lua_protobuf_pb_Update_clear_now},
    {"get_now", lua_protobuf_pb_Update_get_now},
    {"set_now", lua_protobuf_pb_Update_set_now},
    {"has_now", lua_protobuf_pb_Update_has_now},
    {"clear_delta", lua_protobuf_pb_Update_clear_delta},
    {"get_delta", lua_protobuf_pb_Update_get_delta},
    {"set_delta", lua_protobuf_pb_Update_set_delta},
    {"has_delta", lua_protobuf_pb_Update_has_delta},
    {NULL, NULL},
};

int lua_protobuf_pb_Update_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.Update");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Update_methods);
    luaL_register(L, "proto-buf.pb.Update", Update_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_Update_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::Update*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.Update");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_Update_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::Update();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.Update");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_Update_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_Update_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.Update");
    ::pb::Update* src = boost::polymorphic_downcast<::pb::Update*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_Update_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_Update_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_Update_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_Update_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_Update_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_Update_clear_now(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    m->clear_now();
    return 0;
}

int lua_protobuf_pb_Update_get_now(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    lua_pushnumber(L, m->now());
    return 1;
}

int lua_protobuf_pb_Update_set_now(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_now(i);
    return 0;
}

int lua_protobuf_pb_Update_has_now(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    lua_pushboolean(L, m->has_now());
    return 1;
}

int lua_protobuf_pb_Update_clear_delta(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    m->clear_delta();
    return 0;
}

int lua_protobuf_pb_Update_get_delta(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    lua_pushnumber(L, m->delta());
    return 1;
}

int lua_protobuf_pb_Update_set_delta(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_delta(i);
    return 0;
}

int lua_protobuf_pb_Update_has_delta(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Update");
    ::pb::Update* m = boost::polymorphic_downcast<::pb::Update*>(mud->msg);
    lua_pushboolean(L, m->has_delta());
    return 1;
}

static const struct luaL_Reg ListenConfig_functions [] = {
    {"new", lua_protobuf_pb_ListenConfig_new},
    {NULL, NULL}
};

static const struct luaL_Reg ListenConfig_methods [] = {
    {"serialized", lua_protobuf_pb_ListenConfig_serialized},
    {"parsefromstring", lua_protobuf_pb_ListenConfig_parsefromstring},
    {"data", lua_protobuf_pb_ListenConfig_data},
    {"assign", lua_protobuf_pb_ListenConfig_assign},
    {"clear", lua_protobuf_pb_ListenConfig_clear},
    {"__gc", lua_protobuf_pb_ListenConfig_gc},
    {"size", lua_protobuf_pb_ListenConfig_size},
    {"clear_connectionType", lua_protobuf_pb_ListenConfig_clear_connectionType},
    {"get_connectionType", lua_protobuf_pb_ListenConfig_get_connectionType},
    {"set_connectionType", lua_protobuf_pb_ListenConfig_set_connectionType},
    {"has_connectionType", lua_protobuf_pb_ListenConfig_has_connectionType},
    {"clear_listenIP", lua_protobuf_pb_ListenConfig_clear_listenIP},
    {"get_listenIP", lua_protobuf_pb_ListenConfig_get_listenIP},
    {"set_listenIP", lua_protobuf_pb_ListenConfig_set_listenIP},
    {"has_listenIP", lua_protobuf_pb_ListenConfig_has_listenIP},
    {"clear_listenPort", lua_protobuf_pb_ListenConfig_clear_listenPort},
    {"get_listenPort", lua_protobuf_pb_ListenConfig_get_listenPort},
    {"set_listenPort", lua_protobuf_pb_ListenConfig_set_listenPort},
    {"has_listenPort", lua_protobuf_pb_ListenConfig_has_listenPort},
    {"clear_maxConnection", lua_protobuf_pb_ListenConfig_clear_maxConnection},
    {"get_maxConnection", lua_protobuf_pb_ListenConfig_get_maxConnection},
    {"set_maxConnection", lua_protobuf_pb_ListenConfig_set_maxConnection},
    {"has_maxConnection", lua_protobuf_pb_ListenConfig_has_maxConnection},
    {"clear_udp", lua_protobuf_pb_ListenConfig_clear_udp},
    {"get_udp", lua_protobuf_pb_ListenConfig_get_udp},
    {"set_udp", lua_protobuf_pb_ListenConfig_set_udp},
    {"has_udp", lua_protobuf_pb_ListenConfig_has_udp},
    {NULL, NULL},
};

int lua_protobuf_pb_ListenConfig_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ListenConfig");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ListenConfig_methods);
    luaL_register(L, "proto-buf.pb.ListenConfig", ListenConfig_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ListenConfig_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ListenConfig*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ListenConfig");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ListenConfig_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ListenConfig();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ListenConfig");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ListenConfig_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ListenConfig_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* src = boost::polymorphic_downcast<::pb::ListenConfig*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ListenConfig_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ListenConfig_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ListenConfig_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ListenConfig_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ListenConfig_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ListenConfig_clear_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    m->clear_connectiontype();
    return 0;
}

int lua_protobuf_pb_ListenConfig_get_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushnumber(L, m->connectiontype());
    return 1;
}

int lua_protobuf_pb_ListenConfig_set_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Integer i = lua_tointeger(L, 2);
    m->set_connectiontype((::pb::EConnectionType)i);
    return 0;
}

int lua_protobuf_pb_ListenConfig_has_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushboolean(L, m->has_connectiontype());
    return 1;
}

int lua_protobuf_pb_ListenConfig_clear_listenIP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    m->clear_listenip();
    return 0;
}

int lua_protobuf_pb_ListenConfig_get_listenIP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    const std::string& s = m->listenip();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ListenConfig_set_listenIP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_listenip(s, len);
    return 0;
}

int lua_protobuf_pb_ListenConfig_has_listenIP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushboolean(L, m->has_listenip());
    return 1;
}

int lua_protobuf_pb_ListenConfig_clear_listenPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    m->clear_listenport();
    return 0;
}

int lua_protobuf_pb_ListenConfig_get_listenPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushnumber(L, m->listenport());
    return 1;
}

int lua_protobuf_pb_ListenConfig_set_listenPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_listenport(i);
    return 0;
}

int lua_protobuf_pb_ListenConfig_has_listenPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushboolean(L, m->has_listenport());
    return 1;
}

int lua_protobuf_pb_ListenConfig_clear_maxConnection(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    m->clear_maxconnection();
    return 0;
}

int lua_protobuf_pb_ListenConfig_get_maxConnection(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushnumber(L, m->maxconnection());
    return 1;
}

int lua_protobuf_pb_ListenConfig_set_maxConnection(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_maxconnection(i);
    return 0;
}

int lua_protobuf_pb_ListenConfig_has_maxConnection(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushboolean(L, m->has_maxconnection());
    return 1;
}

int lua_protobuf_pb_ListenConfig_clear_udp(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    m->clear_udp();
    return 0;
}

int lua_protobuf_pb_ListenConfig_get_udp(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushboolean(L, m->udp());
    return 1;
}

int lua_protobuf_pb_ListenConfig_set_udp(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_udp(b);
    return 0;
}

int lua_protobuf_pb_ListenConfig_has_udp(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ListenConfig");
    ::pb::ListenConfig* m = boost::polymorphic_downcast<::pb::ListenConfig*>(mud->msg);
    lua_pushboolean(L, m->has_udp());
    return 1;
}

static const struct luaL_Reg InitServer_functions [] = {
    {"new", lua_protobuf_pb_InitServer_new},
    {NULL, NULL}
};

static const struct luaL_Reg InitServer_methods [] = {
    {"serialized", lua_protobuf_pb_InitServer_serialized},
    {"parsefromstring", lua_protobuf_pb_InitServer_parsefromstring},
    {"data", lua_protobuf_pb_InitServer_data},
    {"assign", lua_protobuf_pb_InitServer_assign},
    {"clear", lua_protobuf_pb_InitServer_clear},
    {"__gc", lua_protobuf_pb_InitServer_gc},
    {"size", lua_protobuf_pb_InitServer_size},
    {"clear_servers", lua_protobuf_pb_InitServer_clear_servers},
    {"get_servers", lua_protobuf_pb_InitServer_get_servers},
    {"set_servers", lua_protobuf_pb_InitServer_set_servers},
    {"rawget_servers", lua_protobuf_pb_InitServer_rawget_servers},
    {"size_servers", lua_protobuf_pb_InitServer_size_servers},
    {"clear_clients", lua_protobuf_pb_InitServer_clear_clients},
    {"get_clients", lua_protobuf_pb_InitServer_get_clients},
    {"set_clients", lua_protobuf_pb_InitServer_set_clients},
    {"rawget_clients", lua_protobuf_pb_InitServer_rawget_clients},
    {"size_clients", lua_protobuf_pb_InitServer_size_clients},
    {"clear_serverGuid", lua_protobuf_pb_InitServer_clear_serverGuid},
    {"get_serverGuid", lua_protobuf_pb_InitServer_get_serverGuid},
    {"set_serverGuid", lua_protobuf_pb_InitServer_set_serverGuid},
    {"has_serverGuid", lua_protobuf_pb_InitServer_has_serverGuid},
    {"clear_serverName", lua_protobuf_pb_InitServer_clear_serverName},
    {"get_serverName", lua_protobuf_pb_InitServer_get_serverName},
    {"set_serverName", lua_protobuf_pb_InitServer_set_serverName},
    {"has_serverName", lua_protobuf_pb_InitServer_has_serverName},
    {"clear_connectionType", lua_protobuf_pb_InitServer_clear_connectionType},
    {"get_connectionType", lua_protobuf_pb_InitServer_get_connectionType},
    {"set_connectionType", lua_protobuf_pb_InitServer_set_connectionType},
    {"has_connectionType", lua_protobuf_pb_InitServer_has_connectionType},
    {NULL, NULL},
};

int lua_protobuf_pb_InitServer_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.InitServer");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, InitServer_methods);
    luaL_register(L, "proto-buf.pb.InitServer", InitServer_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_InitServer_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::InitServer*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.InitServer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_InitServer_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::InitServer();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.InitServer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_InitServer_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_InitServer_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.InitServer");
    ::pb::InitServer* src = boost::polymorphic_downcast<::pb::InitServer*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_InitServer_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_InitServer_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_InitServer_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_InitServer_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_InitServer_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_InitServer_clear_servers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    m->clear_servers();
    return 0;
}

int lua_protobuf_pb_InitServer_get_servers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    size_t index = m->servers_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        ::google::protobuf::RepeatedPtrField<::pb::ListenConfig>* msgVec = m->mutable_servers();
        ::pb::ListenConfig* msg = msgVec->ReleaseLast();
        lua_protobuf_pb_ListenConfig_(L, msg); //value
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_InitServer_set_servers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number n = lua_tonumber(L, 2);
    lua_newtable(L);
    for(size_t i=0; i<n; i++) {
        ::pb::ListenConfig* msg = m->add_servers();
        lua_pushnumber(L, i+1); //key
        lua_protobuf_pb_ListenConfig_(L, msg, false);
        lua_rawset(L, -3);
    }
    return 1;
}

int lua_protobuf_pb_InitServer_rawget_servers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int size = m->servers_size();
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > size) {
        return luaL_error(L, "index must be between 1 and current size: %d", size);
    }
    ::pb::ListenConfig* msg = m->mutable_servers(index-1);
    lua_protobuf_pb_ListenConfig_(L, msg, false);
    return 1;
}

int lua_protobuf_pb_InitServer_size_servers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    int size = m->servers_size();
    lua_pushnumber(L, size);
    return 1;
}

int lua_protobuf_pb_InitServer_clear_clients(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    m->clear_clients();
    return 0;
}

int lua_protobuf_pb_InitServer_get_clients(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    size_t index = m->clients_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        ::google::protobuf::RepeatedPtrField<::pb::ListenConfig>* msgVec = m->mutable_clients();
        ::pb::ListenConfig* msg = msgVec->ReleaseLast();
        lua_protobuf_pb_ListenConfig_(L, msg); //value
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_InitServer_set_clients(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number n = lua_tonumber(L, 2);
    lua_newtable(L);
    for(size_t i=0; i<n; i++) {
        ::pb::ListenConfig* msg = m->add_clients();
        lua_pushnumber(L, i+1); //key
        lua_protobuf_pb_ListenConfig_(L, msg, false);
        lua_rawset(L, -3);
    }
    return 1;
}

int lua_protobuf_pb_InitServer_rawget_clients(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int size = m->clients_size();
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > size) {
        return luaL_error(L, "index must be between 1 and current size: %d", size);
    }
    ::pb::ListenConfig* msg = m->mutable_clients(index-1);
    lua_protobuf_pb_ListenConfig_(L, msg, false);
    return 1;
}

int lua_protobuf_pb_InitServer_size_clients(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    int size = m->clients_size();
    lua_pushnumber(L, size);
    return 1;
}

int lua_protobuf_pb_InitServer_clear_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    m->clear_serverguid();
    return 0;
}

int lua_protobuf_pb_InitServer_get_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushnumber(L, m->serverguid());
    return 1;
}

int lua_protobuf_pb_InitServer_set_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_serverguid(i);
    return 0;
}

int lua_protobuf_pb_InitServer_has_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushboolean(L, m->has_serverguid());
    return 1;
}

int lua_protobuf_pb_InitServer_clear_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    m->clear_servername();
    return 0;
}

int lua_protobuf_pb_InitServer_get_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    const std::string& s = m->servername();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_InitServer_set_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_servername(s, len);
    return 0;
}

int lua_protobuf_pb_InitServer_has_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushboolean(L, m->has_servername());
    return 1;
}

int lua_protobuf_pb_InitServer_clear_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    m->clear_connectiontype();
    return 0;
}

int lua_protobuf_pb_InitServer_get_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushnumber(L, m->connectiontype());
    return 1;
}

int lua_protobuf_pb_InitServer_set_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Integer i = lua_tointeger(L, 2);
    m->set_connectiontype((::pb::EConnectionType)i);
    return 0;
}

int lua_protobuf_pb_InitServer_has_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServer");
    ::pb::InitServer* m = boost::polymorphic_downcast<::pb::InitServer*>(mud->msg);
    lua_pushboolean(L, m->has_connectiontype());
    return 1;
}

static const struct luaL_Reg SetServerInfo_functions [] = {
    {"new", lua_protobuf_pb_SetServerInfo_new},
    {NULL, NULL}
};

static const struct luaL_Reg SetServerInfo_methods [] = {
    {"serialized", lua_protobuf_pb_SetServerInfo_serialized},
    {"parsefromstring", lua_protobuf_pb_SetServerInfo_parsefromstring},
    {"data", lua_protobuf_pb_SetServerInfo_data},
    {"assign", lua_protobuf_pb_SetServerInfo_assign},
    {"clear", lua_protobuf_pb_SetServerInfo_clear},
    {"__gc", lua_protobuf_pb_SetServerInfo_gc},
    {"size", lua_protobuf_pb_SetServerInfo_size},
    {"clear_serverGuid", lua_protobuf_pb_SetServerInfo_clear_serverGuid},
    {"get_serverGuid", lua_protobuf_pb_SetServerInfo_get_serverGuid},
    {"set_serverGuid", lua_protobuf_pb_SetServerInfo_set_serverGuid},
    {"has_serverGuid", lua_protobuf_pb_SetServerInfo_has_serverGuid},
    {"clear_serverName", lua_protobuf_pb_SetServerInfo_clear_serverName},
    {"get_serverName", lua_protobuf_pb_SetServerInfo_get_serverName},
    {"set_serverName", lua_protobuf_pb_SetServerInfo_set_serverName},
    {"has_serverName", lua_protobuf_pb_SetServerInfo_has_serverName},
    {"clear_level", lua_protobuf_pb_SetServerInfo_clear_level},
    {"get_level", lua_protobuf_pb_SetServerInfo_get_level},
    {"set_level", lua_protobuf_pb_SetServerInfo_set_level},
    {"has_level", lua_protobuf_pb_SetServerInfo_has_level},
    {"clear_maxPlayerCount", lua_protobuf_pb_SetServerInfo_clear_maxPlayerCount},
    {"get_maxPlayerCount", lua_protobuf_pb_SetServerInfo_get_maxPlayerCount},
    {"set_maxPlayerCount", lua_protobuf_pb_SetServerInfo_set_maxPlayerCount},
    {"has_maxPlayerCount", lua_protobuf_pb_SetServerInfo_has_maxPlayerCount},
    {NULL, NULL},
};

int lua_protobuf_pb_SetServerInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.SetServerInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SetServerInfo_methods);
    luaL_register(L, "proto-buf.pb.SetServerInfo", SetServerInfo_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_SetServerInfo_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::SetServerInfo*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.SetServerInfo");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_SetServerInfo_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::SetServerInfo();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.SetServerInfo");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_SetServerInfo_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_SetServerInfo_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* src = boost::polymorphic_downcast<::pb::SetServerInfo*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_SetServerInfo_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_SetServerInfo_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_SetServerInfo_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_SetServerInfo_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_SetServerInfo_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_SetServerInfo_clear_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    m->clear_serverguid();
    return 0;
}

int lua_protobuf_pb_SetServerInfo_get_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushnumber(L, m->serverguid());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_set_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_serverguid(i);
    return 0;
}

int lua_protobuf_pb_SetServerInfo_has_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushboolean(L, m->has_serverguid());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_clear_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    m->clear_servername();
    return 0;
}

int lua_protobuf_pb_SetServerInfo_get_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    const std::string& s = m->servername();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_set_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_servername(s, len);
    return 0;
}

int lua_protobuf_pb_SetServerInfo_has_serverName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushboolean(L, m->has_servername());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_clear_level(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    m->clear_level();
    return 0;
}

int lua_protobuf_pb_SetServerInfo_get_level(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushnumber(L, m->level());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_set_level(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_level(i);
    return 0;
}

int lua_protobuf_pb_SetServerInfo_has_level(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushboolean(L, m->has_level());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_clear_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    m->clear_maxplayercount();
    return 0;
}

int lua_protobuf_pb_SetServerInfo_get_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushnumber(L, m->maxplayercount());
    return 1;
}

int lua_protobuf_pb_SetServerInfo_set_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_maxplayercount(i);
    return 0;
}

int lua_protobuf_pb_SetServerInfo_has_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetServerInfo");
    ::pb::SetServerInfo* m = boost::polymorphic_downcast<::pb::SetServerInfo*>(mud->msg);
    lua_pushboolean(L, m->has_maxplayercount());
    return 1;
}

static const struct luaL_Reg InitServerResponse_functions [] = {
    {"new", lua_protobuf_pb_InitServerResponse_new},
    {NULL, NULL}
};

static const struct luaL_Reg InitServerResponse_methods [] = {
    {"serialized", lua_protobuf_pb_InitServerResponse_serialized},
    {"parsefromstring", lua_protobuf_pb_InitServerResponse_parsefromstring},
    {"data", lua_protobuf_pb_InitServerResponse_data},
    {"assign", lua_protobuf_pb_InitServerResponse_assign},
    {"clear", lua_protobuf_pb_InitServerResponse_clear},
    {"__gc", lua_protobuf_pb_InitServerResponse_gc},
    {"size", lua_protobuf_pb_InitServerResponse_size},
    {"clear_remoteServers", lua_protobuf_pb_InitServerResponse_clear_remoteServers},
    {"get_remoteServers", lua_protobuf_pb_InitServerResponse_get_remoteServers},
    {"set_remoteServers", lua_protobuf_pb_InitServerResponse_set_remoteServers},
    {"rawget_remoteServers", lua_protobuf_pb_InitServerResponse_rawget_remoteServers},
    {"size_remoteServers", lua_protobuf_pb_InitServerResponse_size_remoteServers},
    {NULL, NULL},
};

int lua_protobuf_pb_InitServerResponse_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.InitServerResponse");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, InitServerResponse_methods);
    luaL_register(L, "proto-buf.pb.InitServerResponse", InitServerResponse_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_InitServerResponse_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::InitServerResponse*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.InitServerResponse");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_InitServerResponse_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::InitServerResponse();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.InitServerResponse");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_InitServerResponse_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_InitServerResponse_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* src = boost::polymorphic_downcast<::pb::InitServerResponse*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_InitServerResponse_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_InitServerResponse_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_InitServerResponse_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_InitServerResponse_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_InitServerResponse_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_InitServerResponse_clear_remoteServers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    m->clear_remoteservers();
    return 0;
}

int lua_protobuf_pb_InitServerResponse_get_remoteServers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    size_t index = m->remoteservers_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        ::google::protobuf::RepeatedPtrField<::pb::ListenConfig>* msgVec = m->mutable_remoteservers();
        ::pb::ListenConfig* msg = msgVec->ReleaseLast();
        lua_protobuf_pb_ListenConfig_(L, msg); //value
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_InitServerResponse_set_remoteServers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number n = lua_tonumber(L, 2);
    lua_newtable(L);
    for(size_t i=0; i<n; i++) {
        ::pb::ListenConfig* msg = m->add_remoteservers();
        lua_pushnumber(L, i+1); //key
        lua_protobuf_pb_ListenConfig_(L, msg, false);
        lua_rawset(L, -3);
    }
    return 1;
}

int lua_protobuf_pb_InitServerResponse_rawget_remoteServers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int size = m->remoteservers_size();
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > size) {
        return luaL_error(L, "index must be between 1 and current size: %d", size);
    }
    ::pb::ListenConfig* msg = m->mutable_remoteservers(index-1);
    lua_protobuf_pb_ListenConfig_(L, msg, false);
    return 1;
}

int lua_protobuf_pb_InitServerResponse_size_remoteServers(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitServerResponse");
    ::pb::InitServerResponse* m = boost::polymorphic_downcast<::pb::InitServerResponse*>(mud->msg);
    int size = m->remoteservers_size();
    lua_pushnumber(L, size);
    return 1;
}

static const struct luaL_Reg ServerActive_functions [] = {
    {"new", lua_protobuf_pb_ServerActive_new},
    {NULL, NULL}
};

static const struct luaL_Reg ServerActive_methods [] = {
    {"serialized", lua_protobuf_pb_ServerActive_serialized},
    {"parsefromstring", lua_protobuf_pb_ServerActive_parsefromstring},
    {"data", lua_protobuf_pb_ServerActive_data},
    {"assign", lua_protobuf_pb_ServerActive_assign},
    {"clear", lua_protobuf_pb_ServerActive_clear},
    {"__gc", lua_protobuf_pb_ServerActive_gc},
    {"size", lua_protobuf_pb_ServerActive_size},
    {"clear_remoteServer", lua_protobuf_pb_ServerActive_clear_remoteServer},
    {"get_remoteServer", lua_protobuf_pb_ServerActive_get_remoteServer},
    {"set_remoteServer", lua_protobuf_pb_ServerActive_set_remoteServer},
    {"has_remoteServer", lua_protobuf_pb_ServerActive_has_remoteServer},
    {NULL, NULL},
};

int lua_protobuf_pb_ServerActive_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ServerActive");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ServerActive_methods);
    luaL_register(L, "proto-buf.pb.ServerActive", ServerActive_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ServerActive_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ServerActive*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ServerActive");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ServerActive_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ServerActive();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ServerActive");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ServerActive_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ServerActive_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* src = boost::polymorphic_downcast<::pb::ServerActive*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ServerActive_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ServerActive_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ServerActive_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ServerActive_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ServerActive_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ServerActive_clear_remoteServer(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    m->clear_remoteserver();
    return 0;
}

int lua_protobuf_pb_ServerActive_get_remoteServer(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    ::pb::ListenConfig* msg = m->mutable_remoteserver();
    m->release_remoteserver();
    lua_protobuf_pb_ListenConfig_(L, msg);
    return 1;
}

int lua_protobuf_pb_ServerActive_set_remoteServer(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    ::pb::ListenConfig* msg = m->mutable_remoteserver();
    lua_protobuf_pb_ListenConfig_(L, msg, false);
    return 1;
}

int lua_protobuf_pb_ServerActive_has_remoteServer(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ServerActive");
    ::pb::ServerActive* m = boost::polymorphic_downcast<::pb::ServerActive*>(mud->msg);
    lua_pushboolean(L, m->has_remoteserver());
    return 1;
}

static const struct luaL_Reg InitGate_functions [] = {
    {"new", lua_protobuf_pb_InitGate_new},
    {NULL, NULL}
};

static const struct luaL_Reg InitGate_methods [] = {
    {"serialized", lua_protobuf_pb_InitGate_serialized},
    {"parsefromstring", lua_protobuf_pb_InitGate_parsefromstring},
    {"data", lua_protobuf_pb_InitGate_data},
    {"assign", lua_protobuf_pb_InitGate_assign},
    {"clear", lua_protobuf_pb_InitGate_clear},
    {"__gc", lua_protobuf_pb_InitGate_gc},
    {"size", lua_protobuf_pb_InitGate_size},
    {"clear_gateAddress", lua_protobuf_pb_InitGate_clear_gateAddress},
    {"get_gateAddress", lua_protobuf_pb_InitGate_get_gateAddress},
    {"set_gateAddress", lua_protobuf_pb_InitGate_set_gateAddress},
    {"has_gateAddress", lua_protobuf_pb_InitGate_has_gateAddress},
    {"clear_gatePort", lua_protobuf_pb_InitGate_clear_gatePort},
    {"get_gatePort", lua_protobuf_pb_InitGate_get_gatePort},
    {"set_gatePort", lua_protobuf_pb_InitGate_set_gatePort},
    {"has_gatePort", lua_protobuf_pb_InitGate_has_gatePort},
    {"clear_gateGuid", lua_protobuf_pb_InitGate_clear_gateGuid},
    {"get_gateGuid", lua_protobuf_pb_InitGate_get_gateGuid},
    {"set_gateGuid", lua_protobuf_pb_InitGate_set_gateGuid},
    {"has_gateGuid", lua_protobuf_pb_InitGate_has_gateGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_InitGate_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.InitGate");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, InitGate_methods);
    luaL_register(L, "proto-buf.pb.InitGate", InitGate_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_InitGate_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::InitGate*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.InitGate");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_InitGate_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::InitGate();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.InitGate");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_InitGate_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_InitGate_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.InitGate");
    ::pb::InitGate* src = boost::polymorphic_downcast<::pb::InitGate*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_InitGate_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_InitGate_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_InitGate_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_InitGate_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_InitGate_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_InitGate_clear_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    m->clear_gateaddress();
    return 0;
}

int lua_protobuf_pb_InitGate_get_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    const std::string& s = m->gateaddress();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_InitGate_set_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_gateaddress(s, len);
    return 0;
}

int lua_protobuf_pb_InitGate_has_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushboolean(L, m->has_gateaddress());
    return 1;
}

int lua_protobuf_pb_InitGate_clear_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    m->clear_gateport();
    return 0;
}

int lua_protobuf_pb_InitGate_get_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushnumber(L, m->gateport());
    return 1;
}

int lua_protobuf_pb_InitGate_set_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_gateport(i);
    return 0;
}

int lua_protobuf_pb_InitGate_has_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushboolean(L, m->has_gateport());
    return 1;
}

int lua_protobuf_pb_InitGate_clear_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    m->clear_gateguid();
    return 0;
}

int lua_protobuf_pb_InitGate_get_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushnumber(L, m->gateguid());
    return 1;
}

int lua_protobuf_pb_InitGate_set_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_gateguid(i);
    return 0;
}

int lua_protobuf_pb_InitGate_has_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitGate");
    ::pb::InitGate* m = boost::polymorphic_downcast<::pb::InitGate*>(mud->msg);
    lua_pushboolean(L, m->has_gateguid());
    return 1;
}

static const struct luaL_Reg ClientConnectGate_functions [] = {
    {"new", lua_protobuf_pb_ClientConnectGate_new},
    {NULL, NULL}
};

static const struct luaL_Reg ClientConnectGate_methods [] = {
    {"serialized", lua_protobuf_pb_ClientConnectGate_serialized},
    {"parsefromstring", lua_protobuf_pb_ClientConnectGate_parsefromstring},
    {"data", lua_protobuf_pb_ClientConnectGate_data},
    {"assign", lua_protobuf_pb_ClientConnectGate_assign},
    {"clear", lua_protobuf_pb_ClientConnectGate_clear},
    {"__gc", lua_protobuf_pb_ClientConnectGate_gc},
    {"size", lua_protobuf_pb_ClientConnectGate_size},
    {"clear_gateAddress", lua_protobuf_pb_ClientConnectGate_clear_gateAddress},
    {"get_gateAddress", lua_protobuf_pb_ClientConnectGate_get_gateAddress},
    {"set_gateAddress", lua_protobuf_pb_ClientConnectGate_set_gateAddress},
    {"has_gateAddress", lua_protobuf_pb_ClientConnectGate_has_gateAddress},
    {"clear_gatePort", lua_protobuf_pb_ClientConnectGate_clear_gatePort},
    {"get_gatePort", lua_protobuf_pb_ClientConnectGate_get_gatePort},
    {"set_gatePort", lua_protobuf_pb_ClientConnectGate_set_gatePort},
    {"has_gatePort", lua_protobuf_pb_ClientConnectGate_has_gatePort},
    {"clear_newGuid", lua_protobuf_pb_ClientConnectGate_clear_newGuid},
    {"get_newGuid", lua_protobuf_pb_ClientConnectGate_get_newGuid},
    {"set_newGuid", lua_protobuf_pb_ClientConnectGate_set_newGuid},
    {"has_newGuid", lua_protobuf_pb_ClientConnectGate_has_newGuid},
    {"clear_waitNum", lua_protobuf_pb_ClientConnectGate_clear_waitNum},
    {"get_waitNum", lua_protobuf_pb_ClientConnectGate_get_waitNum},
    {"set_waitNum", lua_protobuf_pb_ClientConnectGate_set_waitNum},
    {"has_waitNum", lua_protobuf_pb_ClientConnectGate_has_waitNum},
    {"clear_securityKey", lua_protobuf_pb_ClientConnectGate_clear_securityKey},
    {"get_securityKey", lua_protobuf_pb_ClientConnectGate_get_securityKey},
    {"set_securityKey", lua_protobuf_pb_ClientConnectGate_set_securityKey},
    {"has_securityKey", lua_protobuf_pb_ClientConnectGate_has_securityKey},
    {NULL, NULL},
};

int lua_protobuf_pb_ClientConnectGate_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ClientConnectGate");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ClientConnectGate_methods);
    luaL_register(L, "proto-buf.pb.ClientConnectGate", ClientConnectGate_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ClientConnectGate_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ClientConnectGate*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ClientConnectGate");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ClientConnectGate_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ClientConnectGate();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ClientConnectGate");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* src = boost::polymorphic_downcast<::pb::ClientConnectGate*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ClientConnectGate_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ClientConnectGate_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ClientConnectGate_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ClientConnectGate_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ClientConnectGate_clear_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    m->clear_gateaddress();
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_get_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    const std::string& s = m->gateaddress();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_set_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_gateaddress(s, len);
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_has_gateAddress(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushboolean(L, m->has_gateaddress());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_clear_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    m->clear_gateport();
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_get_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushnumber(L, m->gateport());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_set_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_gateport(i);
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_has_gatePort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushboolean(L, m->has_gateport());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_clear_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    m->clear_newguid();
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_get_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushnumber(L, m->newguid());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_set_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_newguid(i);
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_has_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushboolean(L, m->has_newguid());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_clear_waitNum(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    m->clear_waitnum();
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_get_waitNum(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushnumber(L, m->waitnum());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_set_waitNum(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_waitnum(i);
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_has_waitNum(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushboolean(L, m->has_waitnum());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_clear_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    m->clear_securitykey();
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_get_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    const std::string& s = m->securitykey();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientConnectGate_set_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_securitykey(s, len);
    return 0;
}

int lua_protobuf_pb_ClientConnectGate_has_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientConnectGate");
    ::pb::ClientConnectGate* m = boost::polymorphic_downcast<::pb::ClientConnectGate*>(mud->msg);
    lua_pushboolean(L, m->has_securitykey());
    return 1;
}

static const struct luaL_Reg ChangeServerGuid_functions [] = {
    {"new", lua_protobuf_pb_ChangeServerGuid_new},
    {NULL, NULL}
};

static const struct luaL_Reg ChangeServerGuid_methods [] = {
    {"serialized", lua_protobuf_pb_ChangeServerGuid_serialized},
    {"parsefromstring", lua_protobuf_pb_ChangeServerGuid_parsefromstring},
    {"data", lua_protobuf_pb_ChangeServerGuid_data},
    {"assign", lua_protobuf_pb_ChangeServerGuid_assign},
    {"clear", lua_protobuf_pb_ChangeServerGuid_clear},
    {"__gc", lua_protobuf_pb_ChangeServerGuid_gc},
    {"size", lua_protobuf_pb_ChangeServerGuid_size},
    {"clear_newGuid", lua_protobuf_pb_ChangeServerGuid_clear_newGuid},
    {"get_newGuid", lua_protobuf_pb_ChangeServerGuid_get_newGuid},
    {"set_newGuid", lua_protobuf_pb_ChangeServerGuid_set_newGuid},
    {"has_newGuid", lua_protobuf_pb_ChangeServerGuid_has_newGuid},
    {"clear_serverGuid", lua_protobuf_pb_ChangeServerGuid_clear_serverGuid},
    {"get_serverGuid", lua_protobuf_pb_ChangeServerGuid_get_serverGuid},
    {"set_serverGuid", lua_protobuf_pb_ChangeServerGuid_set_serverGuid},
    {"has_serverGuid", lua_protobuf_pb_ChangeServerGuid_has_serverGuid},
    {"clear_groupID", lua_protobuf_pb_ChangeServerGuid_clear_groupID},
    {"get_groupID", lua_protobuf_pb_ChangeServerGuid_get_groupID},
    {"set_groupID", lua_protobuf_pb_ChangeServerGuid_set_groupID},
    {"has_groupID", lua_protobuf_pb_ChangeServerGuid_has_groupID},
    {NULL, NULL},
};

int lua_protobuf_pb_ChangeServerGuid_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ChangeServerGuid");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ChangeServerGuid_methods);
    luaL_register(L, "proto-buf.pb.ChangeServerGuid", ChangeServerGuid_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ChangeServerGuid_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ChangeServerGuid*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ChangeServerGuid");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ChangeServerGuid_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ChangeServerGuid();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ChangeServerGuid");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* src = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ChangeServerGuid_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ChangeServerGuid_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ChangeServerGuid_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ChangeServerGuid_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ChangeServerGuid_clear_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    m->clear_newguid();
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_get_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushnumber(L, m->newguid());
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_set_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_newguid(i);
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_has_newGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushboolean(L, m->has_newguid());
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_clear_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    m->clear_serverguid();
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_get_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushnumber(L, m->serverguid());
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_set_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_serverguid(i);
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_has_serverGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushboolean(L, m->has_serverguid());
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_clear_groupID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    m->clear_groupid();
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_get_groupID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushnumber(L, m->groupid());
    return 1;
}

int lua_protobuf_pb_ChangeServerGuid_set_groupID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_groupid(i);
    return 0;
}

int lua_protobuf_pb_ChangeServerGuid_has_groupID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ChangeServerGuid");
    ::pb::ChangeServerGuid* m = boost::polymorphic_downcast<::pb::ChangeServerGuid*>(mud->msg);
    lua_pushboolean(L, m->has_groupid());
    return 1;
}

static const struct luaL_Reg GatePlayerCount_functions [] = {
    {"new", lua_protobuf_pb_GatePlayerCount_new},
    {NULL, NULL}
};

static const struct luaL_Reg GatePlayerCount_methods [] = {
    {"serialized", lua_protobuf_pb_GatePlayerCount_serialized},
    {"parsefromstring", lua_protobuf_pb_GatePlayerCount_parsefromstring},
    {"data", lua_protobuf_pb_GatePlayerCount_data},
    {"assign", lua_protobuf_pb_GatePlayerCount_assign},
    {"clear", lua_protobuf_pb_GatePlayerCount_clear},
    {"__gc", lua_protobuf_pb_GatePlayerCount_gc},
    {"size", lua_protobuf_pb_GatePlayerCount_size},
    {"clear_gateGuid", lua_protobuf_pb_GatePlayerCount_clear_gateGuid},
    {"get_gateGuid", lua_protobuf_pb_GatePlayerCount_get_gateGuid},
    {"set_gateGuid", lua_protobuf_pb_GatePlayerCount_set_gateGuid},
    {"has_gateGuid", lua_protobuf_pb_GatePlayerCount_has_gateGuid},
    {"clear_playerCount", lua_protobuf_pb_GatePlayerCount_clear_playerCount},
    {"get_playerCount", lua_protobuf_pb_GatePlayerCount_get_playerCount},
    {"set_playerCount", lua_protobuf_pb_GatePlayerCount_set_playerCount},
    {"has_playerCount", lua_protobuf_pb_GatePlayerCount_has_playerCount},
    {NULL, NULL},
};

int lua_protobuf_pb_GatePlayerCount_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.GatePlayerCount");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, GatePlayerCount_methods);
    luaL_register(L, "proto-buf.pb.GatePlayerCount", GatePlayerCount_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_GatePlayerCount_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::GatePlayerCount*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.GatePlayerCount");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_GatePlayerCount_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::GatePlayerCount();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.GatePlayerCount");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_GatePlayerCount_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_GatePlayerCount_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* src = boost::polymorphic_downcast<::pb::GatePlayerCount*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_GatePlayerCount_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_GatePlayerCount_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_GatePlayerCount_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_GatePlayerCount_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_GatePlayerCount_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_GatePlayerCount_clear_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    m->clear_gateguid();
    return 0;
}

int lua_protobuf_pb_GatePlayerCount_get_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    lua_pushnumber(L, m->gateguid());
    return 1;
}

int lua_protobuf_pb_GatePlayerCount_set_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_gateguid(i);
    return 0;
}

int lua_protobuf_pb_GatePlayerCount_has_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    lua_pushboolean(L, m->has_gateguid());
    return 1;
}

int lua_protobuf_pb_GatePlayerCount_clear_playerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    m->clear_playercount();
    return 0;
}

int lua_protobuf_pb_GatePlayerCount_get_playerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    lua_pushnumber(L, m->playercount());
    return 1;
}

int lua_protobuf_pb_GatePlayerCount_set_playerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playercount(i);
    return 0;
}

int lua_protobuf_pb_GatePlayerCount_has_playerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.GatePlayerCount");
    ::pb::GatePlayerCount* m = boost::polymorphic_downcast<::pb::GatePlayerCount*>(mud->msg);
    lua_pushboolean(L, m->has_playercount());
    return 1;
}

static const struct luaL_Reg NewIncomingConnection_functions [] = {
    {"new", lua_protobuf_pb_NewIncomingConnection_new},
    {NULL, NULL}
};

static const struct luaL_Reg NewIncomingConnection_methods [] = {
    {"serialized", lua_protobuf_pb_NewIncomingConnection_serialized},
    {"parsefromstring", lua_protobuf_pb_NewIncomingConnection_parsefromstring},
    {"data", lua_protobuf_pb_NewIncomingConnection_data},
    {"assign", lua_protobuf_pb_NewIncomingConnection_assign},
    {"clear", lua_protobuf_pb_NewIncomingConnection_clear},
    {"__gc", lua_protobuf_pb_NewIncomingConnection_gc},
    {"size", lua_protobuf_pb_NewIncomingConnection_size},
    {"clear_connectionType", lua_protobuf_pb_NewIncomingConnection_clear_connectionType},
    {"get_connectionType", lua_protobuf_pb_NewIncomingConnection_get_connectionType},
    {"set_connectionType", lua_protobuf_pb_NewIncomingConnection_set_connectionType},
    {"has_connectionType", lua_protobuf_pb_NewIncomingConnection_has_connectionType},
    {"clear_remoteGuid", lua_protobuf_pb_NewIncomingConnection_clear_remoteGuid},
    {"get_remoteGuid", lua_protobuf_pb_NewIncomingConnection_get_remoteGuid},
    {"set_remoteGuid", lua_protobuf_pb_NewIncomingConnection_set_remoteGuid},
    {"has_remoteGuid", lua_protobuf_pb_NewIncomingConnection_has_remoteGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_NewIncomingConnection_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.NewIncomingConnection");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, NewIncomingConnection_methods);
    luaL_register(L, "proto-buf.pb.NewIncomingConnection", NewIncomingConnection_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_NewIncomingConnection_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::NewIncomingConnection*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.NewIncomingConnection");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_NewIncomingConnection_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::NewIncomingConnection();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.NewIncomingConnection");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_NewIncomingConnection_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_NewIncomingConnection_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* src = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_NewIncomingConnection_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_NewIncomingConnection_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_NewIncomingConnection_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_NewIncomingConnection_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_NewIncomingConnection_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_NewIncomingConnection_clear_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    m->clear_connectiontype();
    return 0;
}

int lua_protobuf_pb_NewIncomingConnection_get_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    lua_pushnumber(L, m->connectiontype());
    return 1;
}

int lua_protobuf_pb_NewIncomingConnection_set_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Integer i = lua_tointeger(L, 2);
    m->set_connectiontype((::pb::EConnectionType)i);
    return 0;
}

int lua_protobuf_pb_NewIncomingConnection_has_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    lua_pushboolean(L, m->has_connectiontype());
    return 1;
}

int lua_protobuf_pb_NewIncomingConnection_clear_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    m->clear_remoteguid();
    return 0;
}

int lua_protobuf_pb_NewIncomingConnection_get_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    lua_pushnumber(L, m->remoteguid());
    return 1;
}

int lua_protobuf_pb_NewIncomingConnection_set_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_remoteguid(i);
    return 0;
}

int lua_protobuf_pb_NewIncomingConnection_has_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.NewIncomingConnection");
    ::pb::NewIncomingConnection* m = boost::polymorphic_downcast<::pb::NewIncomingConnection*>(mud->msg);
    lua_pushboolean(L, m->has_remoteguid());
    return 1;
}

static const struct luaL_Reg ConnectionRequestAccepted_functions [] = {
    {"new", lua_protobuf_pb_ConnectionRequestAccepted_new},
    {NULL, NULL}
};

static const struct luaL_Reg ConnectionRequestAccepted_methods [] = {
    {"serialized", lua_protobuf_pb_ConnectionRequestAccepted_serialized},
    {"parsefromstring", lua_protobuf_pb_ConnectionRequestAccepted_parsefromstring},
    {"data", lua_protobuf_pb_ConnectionRequestAccepted_data},
    {"assign", lua_protobuf_pb_ConnectionRequestAccepted_assign},
    {"clear", lua_protobuf_pb_ConnectionRequestAccepted_clear},
    {"__gc", lua_protobuf_pb_ConnectionRequestAccepted_gc},
    {"size", lua_protobuf_pb_ConnectionRequestAccepted_size},
    {"clear_connectionType", lua_protobuf_pb_ConnectionRequestAccepted_clear_connectionType},
    {"get_connectionType", lua_protobuf_pb_ConnectionRequestAccepted_get_connectionType},
    {"set_connectionType", lua_protobuf_pb_ConnectionRequestAccepted_set_connectionType},
    {"has_connectionType", lua_protobuf_pb_ConnectionRequestAccepted_has_connectionType},
    {"clear_remoteGuid", lua_protobuf_pb_ConnectionRequestAccepted_clear_remoteGuid},
    {"get_remoteGuid", lua_protobuf_pb_ConnectionRequestAccepted_get_remoteGuid},
    {"set_remoteGuid", lua_protobuf_pb_ConnectionRequestAccepted_set_remoteGuid},
    {"has_remoteGuid", lua_protobuf_pb_ConnectionRequestAccepted_has_remoteGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_ConnectionRequestAccepted_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ConnectionRequestAccepted");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ConnectionRequestAccepted_methods);
    luaL_register(L, "proto-buf.pb.ConnectionRequestAccepted", ConnectionRequestAccepted_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ConnectionRequestAccepted_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ConnectionRequestAccepted");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ConnectionRequestAccepted_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ConnectionRequestAccepted();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ConnectionRequestAccepted");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ConnectionRequestAccepted_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ConnectionRequestAccepted_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* src = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ConnectionRequestAccepted_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ConnectionRequestAccepted_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ConnectionRequestAccepted_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ConnectionRequestAccepted_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ConnectionRequestAccepted_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ConnectionRequestAccepted_clear_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    m->clear_connectiontype();
    return 0;
}

int lua_protobuf_pb_ConnectionRequestAccepted_get_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    lua_pushnumber(L, m->connectiontype());
    return 1;
}

int lua_protobuf_pb_ConnectionRequestAccepted_set_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Integer i = lua_tointeger(L, 2);
    m->set_connectiontype((::pb::EConnectionType)i);
    return 0;
}

int lua_protobuf_pb_ConnectionRequestAccepted_has_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    lua_pushboolean(L, m->has_connectiontype());
    return 1;
}

int lua_protobuf_pb_ConnectionRequestAccepted_clear_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    m->clear_remoteguid();
    return 0;
}

int lua_protobuf_pb_ConnectionRequestAccepted_get_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    lua_pushnumber(L, m->remoteguid());
    return 1;
}

int lua_protobuf_pb_ConnectionRequestAccepted_set_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_remoteguid(i);
    return 0;
}

int lua_protobuf_pb_ConnectionRequestAccepted_has_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionRequestAccepted");
    ::pb::ConnectionRequestAccepted* m = boost::polymorphic_downcast<::pb::ConnectionRequestAccepted*>(mud->msg);
    lua_pushboolean(L, m->has_remoteguid());
    return 1;
}

static const struct luaL_Reg ConnectionAttemptFailed_functions [] = {
    {"new", lua_protobuf_pb_ConnectionAttemptFailed_new},
    {NULL, NULL}
};

static const struct luaL_Reg ConnectionAttemptFailed_methods [] = {
    {"serialized", lua_protobuf_pb_ConnectionAttemptFailed_serialized},
    {"parsefromstring", lua_protobuf_pb_ConnectionAttemptFailed_parsefromstring},
    {"data", lua_protobuf_pb_ConnectionAttemptFailed_data},
    {"assign", lua_protobuf_pb_ConnectionAttemptFailed_assign},
    {"clear", lua_protobuf_pb_ConnectionAttemptFailed_clear},
    {"__gc", lua_protobuf_pb_ConnectionAttemptFailed_gc},
    {"size", lua_protobuf_pb_ConnectionAttemptFailed_size},
    {"clear_remoteGuid", lua_protobuf_pb_ConnectionAttemptFailed_clear_remoteGuid},
    {"get_remoteGuid", lua_protobuf_pb_ConnectionAttemptFailed_get_remoteGuid},
    {"set_remoteGuid", lua_protobuf_pb_ConnectionAttemptFailed_set_remoteGuid},
    {"has_remoteGuid", lua_protobuf_pb_ConnectionAttemptFailed_has_remoteGuid},
    {"clear_IP", lua_protobuf_pb_ConnectionAttemptFailed_clear_IP},
    {"get_IP", lua_protobuf_pb_ConnectionAttemptFailed_get_IP},
    {"set_IP", lua_protobuf_pb_ConnectionAttemptFailed_set_IP},
    {"has_IP", lua_protobuf_pb_ConnectionAttemptFailed_has_IP},
    {"clear_port", lua_protobuf_pb_ConnectionAttemptFailed_clear_port},
    {"get_port", lua_protobuf_pb_ConnectionAttemptFailed_get_port},
    {"set_port", lua_protobuf_pb_ConnectionAttemptFailed_set_port},
    {"has_port", lua_protobuf_pb_ConnectionAttemptFailed_has_port},
    {"clear_connectionType", lua_protobuf_pb_ConnectionAttemptFailed_clear_connectionType},
    {"get_connectionType", lua_protobuf_pb_ConnectionAttemptFailed_get_connectionType},
    {"set_connectionType", lua_protobuf_pb_ConnectionAttemptFailed_set_connectionType},
    {"has_connectionType", lua_protobuf_pb_ConnectionAttemptFailed_has_connectionType},
    {NULL, NULL},
};

int lua_protobuf_pb_ConnectionAttemptFailed_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ConnectionAttemptFailed");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ConnectionAttemptFailed_methods);
    luaL_register(L, "proto-buf.pb.ConnectionAttemptFailed", ConnectionAttemptFailed_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ConnectionAttemptFailed_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ConnectionAttemptFailed");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ConnectionAttemptFailed_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ConnectionAttemptFailed();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ConnectionAttemptFailed");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* src = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ConnectionAttemptFailed_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ConnectionAttemptFailed_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ConnectionAttemptFailed_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ConnectionAttemptFailed_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ConnectionAttemptFailed_clear_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    m->clear_remoteguid();
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_get_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushnumber(L, m->remoteguid());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_set_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_remoteguid(i);
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_has_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushboolean(L, m->has_remoteguid());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_clear_IP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    m->clear_ip();
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_get_IP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    const std::string& s = m->ip();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_set_IP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_ip(s, len);
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_has_IP(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushboolean(L, m->has_ip());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_clear_port(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    m->clear_port();
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_get_port(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushnumber(L, m->port());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_set_port(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_port(i);
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_has_port(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushboolean(L, m->has_port());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_clear_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    m->clear_connectiontype();
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_get_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushnumber(L, m->connectiontype());
    return 1;
}

int lua_protobuf_pb_ConnectionAttemptFailed_set_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Integer i = lua_tointeger(L, 2);
    m->set_connectiontype((::pb::EConnectionType)i);
    return 0;
}

int lua_protobuf_pb_ConnectionAttemptFailed_has_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ConnectionAttemptFailed");
    ::pb::ConnectionAttemptFailed* m = boost::polymorphic_downcast<::pb::ConnectionAttemptFailed*>(mud->msg);
    lua_pushboolean(L, m->has_connectiontype());
    return 1;
}

static const struct luaL_Reg DisconnectionNotification_functions [] = {
    {"new", lua_protobuf_pb_DisconnectionNotification_new},
    {NULL, NULL}
};

static const struct luaL_Reg DisconnectionNotification_methods [] = {
    {"serialized", lua_protobuf_pb_DisconnectionNotification_serialized},
    {"parsefromstring", lua_protobuf_pb_DisconnectionNotification_parsefromstring},
    {"data", lua_protobuf_pb_DisconnectionNotification_data},
    {"assign", lua_protobuf_pb_DisconnectionNotification_assign},
    {"clear", lua_protobuf_pb_DisconnectionNotification_clear},
    {"__gc", lua_protobuf_pb_DisconnectionNotification_gc},
    {"size", lua_protobuf_pb_DisconnectionNotification_size},
    {"clear_connectionType", lua_protobuf_pb_DisconnectionNotification_clear_connectionType},
    {"get_connectionType", lua_protobuf_pb_DisconnectionNotification_get_connectionType},
    {"set_connectionType", lua_protobuf_pb_DisconnectionNotification_set_connectionType},
    {"has_connectionType", lua_protobuf_pb_DisconnectionNotification_has_connectionType},
    {"clear_remoteGuid", lua_protobuf_pb_DisconnectionNotification_clear_remoteGuid},
    {"get_remoteGuid", lua_protobuf_pb_DisconnectionNotification_get_remoteGuid},
    {"set_remoteGuid", lua_protobuf_pb_DisconnectionNotification_set_remoteGuid},
    {"has_remoteGuid", lua_protobuf_pb_DisconnectionNotification_has_remoteGuid},
    {"clear_bPassive", lua_protobuf_pb_DisconnectionNotification_clear_bPassive},
    {"get_bPassive", lua_protobuf_pb_DisconnectionNotification_get_bPassive},
    {"set_bPassive", lua_protobuf_pb_DisconnectionNotification_set_bPassive},
    {"has_bPassive", lua_protobuf_pb_DisconnectionNotification_has_bPassive},
    {NULL, NULL},
};

int lua_protobuf_pb_DisconnectionNotification_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.DisconnectionNotification");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, DisconnectionNotification_methods);
    luaL_register(L, "proto-buf.pb.DisconnectionNotification", DisconnectionNotification_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_DisconnectionNotification_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::DisconnectionNotification*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.DisconnectionNotification");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_DisconnectionNotification_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::DisconnectionNotification();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.DisconnectionNotification");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* src = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_DisconnectionNotification_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_DisconnectionNotification_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_DisconnectionNotification_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_DisconnectionNotification_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_DisconnectionNotification_clear_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    m->clear_connectiontype();
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_get_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushnumber(L, m->connectiontype());
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_set_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Integer i = lua_tointeger(L, 2);
    m->set_connectiontype((::pb::EConnectionType)i);
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_has_connectionType(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushboolean(L, m->has_connectiontype());
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_clear_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    m->clear_remoteguid();
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_get_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushnumber(L, m->remoteguid());
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_set_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_remoteguid(i);
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_has_remoteGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushboolean(L, m->has_remoteguid());
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_clear_bPassive(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    m->clear_bpassive();
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_get_bPassive(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushboolean(L, m->bpassive());
    return 1;
}

int lua_protobuf_pb_DisconnectionNotification_set_bPassive(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_bpassive(b);
    return 0;
}

int lua_protobuf_pb_DisconnectionNotification_has_bPassive(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DisconnectionNotification");
    ::pb::DisconnectionNotification* m = boost::polymorphic_downcast<::pb::DisconnectionNotification*>(mud->msg);
    lua_pushboolean(L, m->has_bpassive());
    return 1;
}

static const struct luaL_Reg LoginError_functions [] = {
    {"new", lua_protobuf_pb_LoginError_new},
    {NULL, NULL}
};

static const struct luaL_Reg LoginError_methods [] = {
    {"serialized", lua_protobuf_pb_LoginError_serialized},
    {"parsefromstring", lua_protobuf_pb_LoginError_parsefromstring},
    {"data", lua_protobuf_pb_LoginError_data},
    {"assign", lua_protobuf_pb_LoginError_assign},
    {"clear", lua_protobuf_pb_LoginError_clear},
    {"__gc", lua_protobuf_pb_LoginError_gc},
    {"size", lua_protobuf_pb_LoginError_size},
    {"clear_playerGuid", lua_protobuf_pb_LoginError_clear_playerGuid},
    {"get_playerGuid", lua_protobuf_pb_LoginError_get_playerGuid},
    {"set_playerGuid", lua_protobuf_pb_LoginError_set_playerGuid},
    {"has_playerGuid", lua_protobuf_pb_LoginError_has_playerGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_LoginError_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.LoginError");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, LoginError_methods);
    luaL_register(L, "proto-buf.pb.LoginError", LoginError_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_LoginError_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::LoginError*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.LoginError");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_LoginError_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::LoginError();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.LoginError");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_LoginError_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_LoginError_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.LoginError");
    ::pb::LoginError* src = boost::polymorphic_downcast<::pb::LoginError*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_LoginError_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_LoginError_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_LoginError_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_LoginError_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_LoginError_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_LoginError_clear_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    m->clear_playerguid();
    return 0;
}

int lua_protobuf_pb_LoginError_get_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    lua_pushnumber(L, m->playerguid());
    return 1;
}

int lua_protobuf_pb_LoginError_set_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerguid(i);
    return 0;
}

int lua_protobuf_pb_LoginError_has_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.LoginError");
    ::pb::LoginError* m = boost::polymorphic_downcast<::pb::LoginError*>(mud->msg);
    lua_pushboolean(L, m->has_playerguid());
    return 1;
}

static const struct luaL_Reg FlushConfig_functions [] = {
    {"new", lua_protobuf_pb_FlushConfig_new},
    {NULL, NULL}
};

static const struct luaL_Reg FlushConfig_methods [] = {
    {"serialized", lua_protobuf_pb_FlushConfig_serialized},
    {"parsefromstring", lua_protobuf_pb_FlushConfig_parsefromstring},
    {"data", lua_protobuf_pb_FlushConfig_data},
    {"assign", lua_protobuf_pb_FlushConfig_assign},
    {"clear", lua_protobuf_pb_FlushConfig_clear},
    {"__gc", lua_protobuf_pb_FlushConfig_gc},
    {"size", lua_protobuf_pb_FlushConfig_size},
    {"clear_flushModule", lua_protobuf_pb_FlushConfig_clear_flushModule},
    {"get_flushModule", lua_protobuf_pb_FlushConfig_get_flushModule},
    {"set_flushModule", lua_protobuf_pb_FlushConfig_set_flushModule},
    {"has_flushModule", lua_protobuf_pb_FlushConfig_has_flushModule},
    {NULL, NULL},
};

int lua_protobuf_pb_FlushConfig_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.FlushConfig");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, FlushConfig_methods);
    luaL_register(L, "proto-buf.pb.FlushConfig", FlushConfig_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_FlushConfig_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::FlushConfig*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.FlushConfig");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_FlushConfig_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::FlushConfig();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.FlushConfig");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_FlushConfig_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_FlushConfig_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* src = boost::polymorphic_downcast<::pb::FlushConfig*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_FlushConfig_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_FlushConfig_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_FlushConfig_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_FlushConfig_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_FlushConfig_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_FlushConfig_clear_flushModule(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    m->clear_flushmodule();
    return 0;
}

int lua_protobuf_pb_FlushConfig_get_flushModule(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    const std::string& s = m->flushmodule();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_FlushConfig_set_flushModule(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_flushmodule(s, len);
    return 0;
}

int lua_protobuf_pb_FlushConfig_has_flushModule(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.FlushConfig");
    ::pb::FlushConfig* m = boost::polymorphic_downcast<::pb::FlushConfig*>(mud->msg);
    lua_pushboolean(L, m->has_flushmodule());
    return 1;
}

static const struct luaL_Reg ShutServerDown_functions [] = {
    {"new", lua_protobuf_pb_ShutServerDown_new},
    {NULL, NULL}
};

static const struct luaL_Reg ShutServerDown_methods [] = {
    {"serialized", lua_protobuf_pb_ShutServerDown_serialized},
    {"parsefromstring", lua_protobuf_pb_ShutServerDown_parsefromstring},
    {"data", lua_protobuf_pb_ShutServerDown_data},
    {"assign", lua_protobuf_pb_ShutServerDown_assign},
    {"clear", lua_protobuf_pb_ShutServerDown_clear},
    {"__gc", lua_protobuf_pb_ShutServerDown_gc},
    {"size", lua_protobuf_pb_ShutServerDown_size},
    {"clear_afterTime", lua_protobuf_pb_ShutServerDown_clear_afterTime},
    {"get_afterTime", lua_protobuf_pb_ShutServerDown_get_afterTime},
    {"set_afterTime", lua_protobuf_pb_ShutServerDown_set_afterTime},
    {"has_afterTime", lua_protobuf_pb_ShutServerDown_has_afterTime},
    {NULL, NULL},
};

int lua_protobuf_pb_ShutServerDown_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ShutServerDown");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ShutServerDown_methods);
    luaL_register(L, "proto-buf.pb.ShutServerDown", ShutServerDown_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ShutServerDown_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ShutServerDown*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ShutServerDown");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ShutServerDown_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ShutServerDown();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ShutServerDown");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ShutServerDown_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ShutServerDown_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* src = boost::polymorphic_downcast<::pb::ShutServerDown*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ShutServerDown_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ShutServerDown_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ShutServerDown_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ShutServerDown_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ShutServerDown_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ShutServerDown_clear_afterTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    m->clear_aftertime();
    return 0;
}

int lua_protobuf_pb_ShutServerDown_get_afterTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    lua_pushnumber(L, m->aftertime());
    return 1;
}

int lua_protobuf_pb_ShutServerDown_set_afterTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_aftertime(i);
    return 0;
}

int lua_protobuf_pb_ShutServerDown_has_afterTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ShutServerDown");
    ::pb::ShutServerDown* m = boost::polymorphic_downcast<::pb::ShutServerDown*>(mud->msg);
    lua_pushboolean(L, m->has_aftertime());
    return 1;
}

static const struct luaL_Reg ClockDifferential_functions [] = {
    {"new", lua_protobuf_pb_ClockDifferential_new},
    {NULL, NULL}
};

static const struct luaL_Reg ClockDifferential_methods [] = {
    {"serialized", lua_protobuf_pb_ClockDifferential_serialized},
    {"parsefromstring", lua_protobuf_pb_ClockDifferential_parsefromstring},
    {"data", lua_protobuf_pb_ClockDifferential_data},
    {"assign", lua_protobuf_pb_ClockDifferential_assign},
    {"clear", lua_protobuf_pb_ClockDifferential_clear},
    {"__gc", lua_protobuf_pb_ClockDifferential_gc},
    {"size", lua_protobuf_pb_ClockDifferential_size},
    {"clear_beginTime", lua_protobuf_pb_ClockDifferential_clear_beginTime},
    {"get_beginTime", lua_protobuf_pb_ClockDifferential_get_beginTime},
    {"set_beginTime", lua_protobuf_pb_ClockDifferential_set_beginTime},
    {"has_beginTime", lua_protobuf_pb_ClockDifferential_has_beginTime},
    {"clear_syncTime", lua_protobuf_pb_ClockDifferential_clear_syncTime},
    {"get_syncTime", lua_protobuf_pb_ClockDifferential_get_syncTime},
    {"set_syncTime", lua_protobuf_pb_ClockDifferential_set_syncTime},
    {"has_syncTime", lua_protobuf_pb_ClockDifferential_has_syncTime},
    {"clear_guid", lua_protobuf_pb_ClockDifferential_clear_guid},
    {"get_guid", lua_protobuf_pb_ClockDifferential_get_guid},
    {"set_guid", lua_protobuf_pb_ClockDifferential_set_guid},
    {"has_guid", lua_protobuf_pb_ClockDifferential_has_guid},
    {NULL, NULL},
};

int lua_protobuf_pb_ClockDifferential_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ClockDifferential");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ClockDifferential_methods);
    luaL_register(L, "proto-buf.pb.ClockDifferential", ClockDifferential_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ClockDifferential_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ClockDifferential*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ClockDifferential");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ClockDifferential_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ClockDifferential();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ClockDifferential");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ClockDifferential_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ClockDifferential_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* src = boost::polymorphic_downcast<::pb::ClockDifferential*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ClockDifferential_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ClockDifferential_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ClockDifferential_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ClockDifferential_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ClockDifferential_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ClockDifferential_clear_beginTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    m->clear_begintime();
    return 0;
}

int lua_protobuf_pb_ClockDifferential_get_beginTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushnumber(L, m->begintime());
    return 1;
}

int lua_protobuf_pb_ClockDifferential_set_beginTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_begintime(i);
    return 0;
}

int lua_protobuf_pb_ClockDifferential_has_beginTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushboolean(L, m->has_begintime());
    return 1;
}

int lua_protobuf_pb_ClockDifferential_clear_syncTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    m->clear_synctime();
    return 0;
}

int lua_protobuf_pb_ClockDifferential_get_syncTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushnumber(L, m->synctime());
    return 1;
}

int lua_protobuf_pb_ClockDifferential_set_syncTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_synctime(i);
    return 0;
}

int lua_protobuf_pb_ClockDifferential_has_syncTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushboolean(L, m->has_synctime());
    return 1;
}

int lua_protobuf_pb_ClockDifferential_clear_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    m->clear_guid();
    return 0;
}

int lua_protobuf_pb_ClockDifferential_get_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushnumber(L, m->guid());
    return 1;
}

int lua_protobuf_pb_ClockDifferential_set_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_guid(i);
    return 0;
}

int lua_protobuf_pb_ClockDifferential_has_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClockDifferential");
    ::pb::ClockDifferential* m = boost::polymorphic_downcast<::pb::ClockDifferential*>(mud->msg);
    lua_pushboolean(L, m->has_guid());
    return 1;
}

static const struct luaL_Reg Bulletin_functions [] = {
    {"new", lua_protobuf_pb_Bulletin_new},
    {NULL, NULL}
};

static const struct luaL_Reg Bulletin_methods [] = {
    {"serialized", lua_protobuf_pb_Bulletin_serialized},
    {"parsefromstring", lua_protobuf_pb_Bulletin_parsefromstring},
    {"data", lua_protobuf_pb_Bulletin_data},
    {"assign", lua_protobuf_pb_Bulletin_assign},
    {"clear", lua_protobuf_pb_Bulletin_clear},
    {"__gc", lua_protobuf_pb_Bulletin_gc},
    {"size", lua_protobuf_pb_Bulletin_size},
    {"clear_content", lua_protobuf_pb_Bulletin_clear_content},
    {"get_content", lua_protobuf_pb_Bulletin_get_content},
    {"set_content", lua_protobuf_pb_Bulletin_set_content},
    {"has_content", lua_protobuf_pb_Bulletin_has_content},
    {NULL, NULL},
};

int lua_protobuf_pb_Bulletin_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.Bulletin");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Bulletin_methods);
    luaL_register(L, "proto-buf.pb.Bulletin", Bulletin_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_Bulletin_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::Bulletin*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.Bulletin");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_Bulletin_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::Bulletin();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.Bulletin");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_Bulletin_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_Bulletin_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* src = boost::polymorphic_downcast<::pb::Bulletin*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_Bulletin_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_Bulletin_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_Bulletin_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_Bulletin_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_Bulletin_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_Bulletin_clear_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    m->clear_content();
    return 0;
}

int lua_protobuf_pb_Bulletin_get_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    const std::string& s = m->content();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_Bulletin_set_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_content(s, len);
    return 0;
}

int lua_protobuf_pb_Bulletin_has_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Bulletin");
    ::pb::Bulletin* m = boost::polymorphic_downcast<::pb::Bulletin*>(mud->msg);
    lua_pushboolean(L, m->has_content());
    return 1;
}

static const struct luaL_Reg VersionCheck_functions [] = {
    {"new", lua_protobuf_pb_VersionCheck_new},
    {NULL, NULL}
};

static const struct luaL_Reg VersionCheck_methods [] = {
    {"serialized", lua_protobuf_pb_VersionCheck_serialized},
    {"parsefromstring", lua_protobuf_pb_VersionCheck_parsefromstring},
    {"data", lua_protobuf_pb_VersionCheck_data},
    {"assign", lua_protobuf_pb_VersionCheck_assign},
    {"clear", lua_protobuf_pb_VersionCheck_clear},
    {"__gc", lua_protobuf_pb_VersionCheck_gc},
    {"size", lua_protobuf_pb_VersionCheck_size},
    {"clear_version", lua_protobuf_pb_VersionCheck_clear_version},
    {"get_version", lua_protobuf_pb_VersionCheck_get_version},
    {"set_version", lua_protobuf_pb_VersionCheck_set_version},
    {"has_version", lua_protobuf_pb_VersionCheck_has_version},
    {"clear_guid", lua_protobuf_pb_VersionCheck_clear_guid},
    {"get_guid", lua_protobuf_pb_VersionCheck_get_guid},
    {"set_guid", lua_protobuf_pb_VersionCheck_set_guid},
    {"has_guid", lua_protobuf_pb_VersionCheck_has_guid},
    {NULL, NULL},
};

int lua_protobuf_pb_VersionCheck_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.VersionCheck");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, VersionCheck_methods);
    luaL_register(L, "proto-buf.pb.VersionCheck", VersionCheck_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_VersionCheck_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::VersionCheck*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.VersionCheck");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_VersionCheck_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::VersionCheck();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.VersionCheck");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_VersionCheck_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_VersionCheck_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* src = boost::polymorphic_downcast<::pb::VersionCheck*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_VersionCheck_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_VersionCheck_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_VersionCheck_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_VersionCheck_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_VersionCheck_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_VersionCheck_clear_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    m->clear_version();
    return 0;
}

int lua_protobuf_pb_VersionCheck_get_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    const std::string& s = m->version();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_VersionCheck_set_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_version(s, len);
    return 0;
}

int lua_protobuf_pb_VersionCheck_has_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    lua_pushboolean(L, m->has_version());
    return 1;
}

int lua_protobuf_pb_VersionCheck_clear_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    m->clear_guid();
    return 0;
}

int lua_protobuf_pb_VersionCheck_get_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    lua_pushnumber(L, m->guid());
    return 1;
}

int lua_protobuf_pb_VersionCheck_set_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_guid(i);
    return 0;
}

int lua_protobuf_pb_VersionCheck_has_guid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheck");
    ::pb::VersionCheck* m = boost::polymorphic_downcast<::pb::VersionCheck*>(mud->msg);
    lua_pushboolean(L, m->has_guid());
    return 1;
}

static const struct luaL_Reg VersionCheckFaild_functions [] = {
    {"new", lua_protobuf_pb_VersionCheckFaild_new},
    {NULL, NULL}
};

static const struct luaL_Reg VersionCheckFaild_methods [] = {
    {"serialized", lua_protobuf_pb_VersionCheckFaild_serialized},
    {"parsefromstring", lua_protobuf_pb_VersionCheckFaild_parsefromstring},
    {"data", lua_protobuf_pb_VersionCheckFaild_data},
    {"assign", lua_protobuf_pb_VersionCheckFaild_assign},
    {"clear", lua_protobuf_pb_VersionCheckFaild_clear},
    {"__gc", lua_protobuf_pb_VersionCheckFaild_gc},
    {"size", lua_protobuf_pb_VersionCheckFaild_size},
    {NULL, NULL},
};

int lua_protobuf_pb_VersionCheckFaild_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.VersionCheckFaild");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, VersionCheckFaild_methods);
    luaL_register(L, "proto-buf.pb.VersionCheckFaild", VersionCheckFaild_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_VersionCheckFaild_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::VersionCheckFaild*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.VersionCheckFaild");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_VersionCheckFaild_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::VersionCheckFaild();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.VersionCheckFaild");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_VersionCheckFaild_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* m = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_VersionCheckFaild_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* m = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* src = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_VersionCheckFaild_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* m = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_VersionCheckFaild_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_VersionCheckFaild_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* m = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_VersionCheckFaild_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* m = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_VersionCheckFaild_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.VersionCheckFaild");
    ::pb::VersionCheckFaild* m = boost::polymorphic_downcast<::pb::VersionCheckFaild*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
static const struct luaL_Reg ProxyMessage_functions [] = {
    {"new", lua_protobuf_pb_ProxyMessage_new},
    {NULL, NULL}
};

static const struct luaL_Reg ProxyMessage_methods [] = {
    {"serialized", lua_protobuf_pb_ProxyMessage_serialized},
    {"parsefromstring", lua_protobuf_pb_ProxyMessage_parsefromstring},
    {"data", lua_protobuf_pb_ProxyMessage_data},
    {"assign", lua_protobuf_pb_ProxyMessage_assign},
    {"clear", lua_protobuf_pb_ProxyMessage_clear},
    {"__gc", lua_protobuf_pb_ProxyMessage_gc},
    {"size", lua_protobuf_pb_ProxyMessage_size},
    {"clear_playerGuid", lua_protobuf_pb_ProxyMessage_clear_playerGuid},
    {"get_playerGuid", lua_protobuf_pb_ProxyMessage_get_playerGuid},
    {"set_playerGuid", lua_protobuf_pb_ProxyMessage_set_playerGuid},
    {"has_playerGuid", lua_protobuf_pb_ProxyMessage_has_playerGuid},
    {"clear_status", lua_protobuf_pb_ProxyMessage_clear_status},
    {"get_status", lua_protobuf_pb_ProxyMessage_get_status},
    {"set_status", lua_protobuf_pb_ProxyMessage_set_status},
    {"has_status", lua_protobuf_pb_ProxyMessage_has_status},
    {NULL, NULL},
};

int lua_protobuf_pb_ProxyMessage_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ProxyMessage");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ProxyMessage_methods);
    luaL_register(L, "proto-buf.pb.ProxyMessage", ProxyMessage_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ProxyMessage_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ProxyMessage*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ProxyMessage");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ProxyMessage_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ProxyMessage();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ProxyMessage");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ProxyMessage_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ProxyMessage_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* src = boost::polymorphic_downcast<::pb::ProxyMessage*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ProxyMessage_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ProxyMessage_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ProxyMessage_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ProxyMessage_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ProxyMessage_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ProxyMessage_clear_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    m->clear_playerguid();
    return 0;
}

int lua_protobuf_pb_ProxyMessage_get_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    lua_pushnumber(L, m->playerguid());
    return 1;
}

int lua_protobuf_pb_ProxyMessage_set_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerguid(i);
    return 0;
}

int lua_protobuf_pb_ProxyMessage_has_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    lua_pushboolean(L, m->has_playerguid());
    return 1;
}

int lua_protobuf_pb_ProxyMessage_clear_status(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    m->clear_status();
    return 0;
}

int lua_protobuf_pb_ProxyMessage_get_status(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    lua_pushboolean(L, m->status());
    return 1;
}

int lua_protobuf_pb_ProxyMessage_set_status(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_status(b);
    return 0;
}

int lua_protobuf_pb_ProxyMessage_has_status(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyMessage");
    ::pb::ProxyMessage* m = boost::polymorphic_downcast<::pb::ProxyMessage*>(mud->msg);
    lua_pushboolean(L, m->has_status());
    return 1;
}

static const struct luaL_Reg ReInitProxy_functions [] = {
    {"new", lua_protobuf_pb_ReInitProxy_new},
    {NULL, NULL}
};

static const struct luaL_Reg ReInitProxy_methods [] = {
    {"serialized", lua_protobuf_pb_ReInitProxy_serialized},
    {"parsefromstring", lua_protobuf_pb_ReInitProxy_parsefromstring},
    {"data", lua_protobuf_pb_ReInitProxy_data},
    {"assign", lua_protobuf_pb_ReInitProxy_assign},
    {"clear", lua_protobuf_pb_ReInitProxy_clear},
    {"__gc", lua_protobuf_pb_ReInitProxy_gc},
    {"size", lua_protobuf_pb_ReInitProxy_size},
    {NULL, NULL},
};

int lua_protobuf_pb_ReInitProxy_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ReInitProxy");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ReInitProxy_methods);
    luaL_register(L, "proto-buf.pb.ReInitProxy", ReInitProxy_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ReInitProxy_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ReInitProxy*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ReInitProxy");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ReInitProxy_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ReInitProxy();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ReInitProxy");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ReInitProxy_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* m = boost::polymorphic_downcast<::pb::ReInitProxy*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ReInitProxy_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* m = boost::polymorphic_downcast<::pb::ReInitProxy*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* src = boost::polymorphic_downcast<::pb::ReInitProxy*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ReInitProxy_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* m = boost::polymorphic_downcast<::pb::ReInitProxy*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ReInitProxy_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ReInitProxy_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* m = boost::polymorphic_downcast<::pb::ReInitProxy*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ReInitProxy_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* m = boost::polymorphic_downcast<::pb::ReInitProxy*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ReInitProxy_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ReInitProxy");
    ::pb::ReInitProxy* m = boost::polymorphic_downcast<::pb::ReInitProxy*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
static const struct luaL_Reg PakCheckCodeQuery_functions [] = {
    {"new", lua_protobuf_pb_PakCheckCodeQuery_new},
    {NULL, NULL}
};

static const struct luaL_Reg PakCheckCodeQuery_methods [] = {
    {"serialized", lua_protobuf_pb_PakCheckCodeQuery_serialized},
    {"parsefromstring", lua_protobuf_pb_PakCheckCodeQuery_parsefromstring},
    {"data", lua_protobuf_pb_PakCheckCodeQuery_data},
    {"assign", lua_protobuf_pb_PakCheckCodeQuery_assign},
    {"clear", lua_protobuf_pb_PakCheckCodeQuery_clear},
    {"__gc", lua_protobuf_pb_PakCheckCodeQuery_gc},
    {"size", lua_protobuf_pb_PakCheckCodeQuery_size},
    {"clear_version", lua_protobuf_pb_PakCheckCodeQuery_clear_version},
    {"get_version", lua_protobuf_pb_PakCheckCodeQuery_get_version},
    {"set_version", lua_protobuf_pb_PakCheckCodeQuery_set_version},
    {"has_version", lua_protobuf_pb_PakCheckCodeQuery_has_version},
    {NULL, NULL},
};

int lua_protobuf_pb_PakCheckCodeQuery_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.PakCheckCodeQuery");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PakCheckCodeQuery_methods);
    luaL_register(L, "proto-buf.pb.PakCheckCodeQuery", PakCheckCodeQuery_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_PakCheckCodeQuery_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckCodeQuery");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_PakCheckCodeQuery_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::PakCheckCodeQuery();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckCodeQuery");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_PakCheckCodeQuery_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_PakCheckCodeQuery_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* src = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_PakCheckCodeQuery_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_PakCheckCodeQuery_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_PakCheckCodeQuery_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_PakCheckCodeQuery_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_PakCheckCodeQuery_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_PakCheckCodeQuery_clear_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    m->clear_version();
    return 0;
}

int lua_protobuf_pb_PakCheckCodeQuery_get_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    const std::string& s = m->version();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_PakCheckCodeQuery_set_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_version(s, len);
    return 0;
}

int lua_protobuf_pb_PakCheckCodeQuery_has_version(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeQuery");
    ::pb::PakCheckCodeQuery* m = boost::polymorphic_downcast<::pb::PakCheckCodeQuery*>(mud->msg);
    lua_pushboolean(L, m->has_version());
    return 1;
}

static const struct luaL_Reg PakCheckCode_functions [] = {
    {"new", lua_protobuf_pb_PakCheckCode_new},
    {NULL, NULL}
};

static const struct luaL_Reg PakCheckCode_methods [] = {
    {"serialized", lua_protobuf_pb_PakCheckCode_serialized},
    {"parsefromstring", lua_protobuf_pb_PakCheckCode_parsefromstring},
    {"data", lua_protobuf_pb_PakCheckCode_data},
    {"assign", lua_protobuf_pb_PakCheckCode_assign},
    {"clear", lua_protobuf_pb_PakCheckCode_clear},
    {"__gc", lua_protobuf_pb_PakCheckCode_gc},
    {"size", lua_protobuf_pb_PakCheckCode_size},
    {"clear_pakName", lua_protobuf_pb_PakCheckCode_clear_pakName},
    {"get_pakName", lua_protobuf_pb_PakCheckCode_get_pakName},
    {"set_pakName", lua_protobuf_pb_PakCheckCode_set_pakName},
    {"has_pakName", lua_protobuf_pb_PakCheckCode_has_pakName},
    {"clear_checkCode", lua_protobuf_pb_PakCheckCode_clear_checkCode},
    {"get_checkCode", lua_protobuf_pb_PakCheckCode_get_checkCode},
    {"set_checkCode", lua_protobuf_pb_PakCheckCode_set_checkCode},
    {"has_checkCode", lua_protobuf_pb_PakCheckCode_has_checkCode},
    {NULL, NULL},
};

int lua_protobuf_pb_PakCheckCode_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.PakCheckCode");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PakCheckCode_methods);
    luaL_register(L, "proto-buf.pb.PakCheckCode", PakCheckCode_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_PakCheckCode_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::PakCheckCode*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckCode");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_PakCheckCode_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::PakCheckCode();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckCode");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_PakCheckCode_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_PakCheckCode_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* src = boost::polymorphic_downcast<::pb::PakCheckCode*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_PakCheckCode_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_PakCheckCode_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_PakCheckCode_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_PakCheckCode_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_PakCheckCode_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_PakCheckCode_clear_pakName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    m->clear_pakname();
    return 0;
}

int lua_protobuf_pb_PakCheckCode_get_pakName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    const std::string& s = m->pakname();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_PakCheckCode_set_pakName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_pakname(s, len);
    return 0;
}

int lua_protobuf_pb_PakCheckCode_has_pakName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    lua_pushboolean(L, m->has_pakname());
    return 1;
}

int lua_protobuf_pb_PakCheckCode_clear_checkCode(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    m->clear_checkcode();
    return 0;
}

int lua_protobuf_pb_PakCheckCode_get_checkCode(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    const std::string& s = m->checkcode();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_PakCheckCode_set_checkCode(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_checkcode(s, len);
    return 0;
}

int lua_protobuf_pb_PakCheckCode_has_checkCode(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCode");
    ::pb::PakCheckCode* m = boost::polymorphic_downcast<::pb::PakCheckCode*>(mud->msg);
    lua_pushboolean(L, m->has_checkcode());
    return 1;
}

static const struct luaL_Reg PakCheckCodeRes_functions [] = {
    {"new", lua_protobuf_pb_PakCheckCodeRes_new},
    {NULL, NULL}
};

static const struct luaL_Reg PakCheckCodeRes_methods [] = {
    {"serialized", lua_protobuf_pb_PakCheckCodeRes_serialized},
    {"parsefromstring", lua_protobuf_pb_PakCheckCodeRes_parsefromstring},
    {"data", lua_protobuf_pb_PakCheckCodeRes_data},
    {"assign", lua_protobuf_pb_PakCheckCodeRes_assign},
    {"clear", lua_protobuf_pb_PakCheckCodeRes_clear},
    {"__gc", lua_protobuf_pb_PakCheckCodeRes_gc},
    {"size", lua_protobuf_pb_PakCheckCodeRes_size},
    {"clear_pakCheckCodes", lua_protobuf_pb_PakCheckCodeRes_clear_pakCheckCodes},
    {"get_pakCheckCodes", lua_protobuf_pb_PakCheckCodeRes_get_pakCheckCodes},
    {"set_pakCheckCodes", lua_protobuf_pb_PakCheckCodeRes_set_pakCheckCodes},
    {"rawget_pakCheckCodes", lua_protobuf_pb_PakCheckCodeRes_rawget_pakCheckCodes},
    {"size_pakCheckCodes", lua_protobuf_pb_PakCheckCodeRes_size_pakCheckCodes},
    {NULL, NULL},
};

int lua_protobuf_pb_PakCheckCodeRes_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.PakCheckCodeRes");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PakCheckCodeRes_methods);
    luaL_register(L, "proto-buf.pb.PakCheckCodeRes", PakCheckCodeRes_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_PakCheckCodeRes_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckCodeRes");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_PakCheckCodeRes_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::PakCheckCodeRes();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckCodeRes");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_PakCheckCodeRes_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_PakCheckCodeRes_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* src = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_PakCheckCodeRes_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_PakCheckCodeRes_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_PakCheckCodeRes_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_PakCheckCodeRes_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_PakCheckCodeRes_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_PakCheckCodeRes_clear_pakCheckCodes(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    m->clear_pakcheckcodes();
    return 0;
}

int lua_protobuf_pb_PakCheckCodeRes_get_pakCheckCodes(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    size_t index = m->pakcheckcodes_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        ::google::protobuf::RepeatedPtrField<::pb::PakCheckCode>* msgVec = m->mutable_pakcheckcodes();
        ::pb::PakCheckCode* msg = msgVec->ReleaseLast();
        lua_protobuf_pb_PakCheckCode_(L, msg); //value
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_PakCheckCodeRes_set_pakCheckCodes(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number n = lua_tonumber(L, 2);
    lua_newtable(L);
    for(size_t i=0; i<n; i++) {
        ::pb::PakCheckCode* msg = m->add_pakcheckcodes();
        lua_pushnumber(L, i+1); //key
        lua_protobuf_pb_PakCheckCode_(L, msg, false);
        lua_rawset(L, -3);
    }
    return 1;
}

int lua_protobuf_pb_PakCheckCodeRes_rawget_pakCheckCodes(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    luaL_checktype(L, 2, LUA_TNUMBER);
    int size = m->pakcheckcodes_size();
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > size) {
        return luaL_error(L, "index must be between 1 and current size: %d", size);
    }
    ::pb::PakCheckCode* msg = m->mutable_pakcheckcodes(index-1);
    lua_protobuf_pb_PakCheckCode_(L, msg, false);
    return 1;
}

int lua_protobuf_pb_PakCheckCodeRes_size_pakCheckCodes(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckCodeRes");
    ::pb::PakCheckCodeRes* m = boost::polymorphic_downcast<::pb::PakCheckCodeRes*>(mud->msg);
    int size = m->pakcheckcodes_size();
    lua_pushnumber(L, size);
    return 1;
}

static const struct luaL_Reg PakCheckFailed_functions [] = {
    {"new", lua_protobuf_pb_PakCheckFailed_new},
    {NULL, NULL}
};

static const struct luaL_Reg PakCheckFailed_methods [] = {
    {"serialized", lua_protobuf_pb_PakCheckFailed_serialized},
    {"parsefromstring", lua_protobuf_pb_PakCheckFailed_parsefromstring},
    {"data", lua_protobuf_pb_PakCheckFailed_data},
    {"assign", lua_protobuf_pb_PakCheckFailed_assign},
    {"clear", lua_protobuf_pb_PakCheckFailed_clear},
    {"__gc", lua_protobuf_pb_PakCheckFailed_gc},
    {"size", lua_protobuf_pb_PakCheckFailed_size},
    {"clear_pakNames", lua_protobuf_pb_PakCheckFailed_clear_pakNames},
    {"get_pakNames", lua_protobuf_pb_PakCheckFailed_get_pakNames},
    {"set_pakNames", lua_protobuf_pb_PakCheckFailed_set_pakNames},
    {"size_pakNames", lua_protobuf_pb_PakCheckFailed_size_pakNames},
    {NULL, NULL},
};

int lua_protobuf_pb_PakCheckFailed_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.PakCheckFailed");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PakCheckFailed_methods);
    luaL_register(L, "proto-buf.pb.PakCheckFailed", PakCheckFailed_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_PakCheckFailed_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::PakCheckFailed*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckFailed");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_PakCheckFailed_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::PakCheckFailed();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.PakCheckFailed");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_PakCheckFailed_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_PakCheckFailed_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* src = boost::polymorphic_downcast<::pb::PakCheckFailed*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_PakCheckFailed_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_PakCheckFailed_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_PakCheckFailed_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_PakCheckFailed_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_PakCheckFailed_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_PakCheckFailed_clear_pakNames(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    m->clear_paknames();
    return 0;
}

int lua_protobuf_pb_PakCheckFailed_get_pakNames(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    size_t index = m->paknames_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        const std::string& s = m->paknames(index - 1);
        lua_pushlstring(L, s.c_str(), s.size());
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_PakCheckFailed_set_pakNames(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    luaL_checktype(L, -1, LUA_TTABLE);
    lua_pushnil(L);
    while (lua_next(L, -2)) {
        luaL_checktype(L, -1, LUA_TSTRING);
        size_t len;
        const char *s = lua_tolstring(L, -1, &len);
        m->add_paknames(s, len);
        lua_pop(L, 1);
    }
    lua_pop(L, 1);
    return 0;
}

int lua_protobuf_pb_PakCheckFailed_size_pakNames(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PakCheckFailed");
    ::pb::PakCheckFailed* m = boost::polymorphic_downcast<::pb::PakCheckFailed*>(mud->msg);
    int size = m->paknames_size();
    lua_pushnumber(L, size);
    return 1;
}

static const struct luaL_Reg InitPveGameServer_functions [] = {
    {"new", lua_protobuf_pb_InitPveGameServer_new},
    {NULL, NULL}
};

static const struct luaL_Reg InitPveGameServer_methods [] = {
    {"serialized", lua_protobuf_pb_InitPveGameServer_serialized},
    {"parsefromstring", lua_protobuf_pb_InitPveGameServer_parsefromstring},
    {"data", lua_protobuf_pb_InitPveGameServer_data},
    {"assign", lua_protobuf_pb_InitPveGameServer_assign},
    {"clear", lua_protobuf_pb_InitPveGameServer_clear},
    {"__gc", lua_protobuf_pb_InitPveGameServer_gc},
    {"size", lua_protobuf_pb_InitPveGameServer_size},
    {"clear_maxPlayerCount", lua_protobuf_pb_InitPveGameServer_clear_maxPlayerCount},
    {"get_maxPlayerCount", lua_protobuf_pb_InitPveGameServer_get_maxPlayerCount},
    {"set_maxPlayerCount", lua_protobuf_pb_InitPveGameServer_set_maxPlayerCount},
    {"has_maxPlayerCount", lua_protobuf_pb_InitPveGameServer_has_maxPlayerCount},
    {NULL, NULL},
};

int lua_protobuf_pb_InitPveGameServer_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.InitPveGameServer");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, InitPveGameServer_methods);
    luaL_register(L, "proto-buf.pb.InitPveGameServer", InitPveGameServer_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_InitPveGameServer_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::InitPveGameServer*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.InitPveGameServer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_InitPveGameServer_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::InitPveGameServer();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.InitPveGameServer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_InitPveGameServer_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_InitPveGameServer_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* src = boost::polymorphic_downcast<::pb::InitPveGameServer*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_InitPveGameServer_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_InitPveGameServer_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_InitPveGameServer_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_InitPveGameServer_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_InitPveGameServer_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_InitPveGameServer_clear_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    m->clear_maxplayercount();
    return 0;
}

int lua_protobuf_pb_InitPveGameServer_get_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    lua_pushnumber(L, m->maxplayercount());
    return 1;
}

int lua_protobuf_pb_InitPveGameServer_set_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_maxplayercount(i);
    return 0;
}

int lua_protobuf_pb_InitPveGameServer_has_maxPlayerCount(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitPveGameServer");
    ::pb::InitPveGameServer* m = boost::polymorphic_downcast<::pb::InitPveGameServer*>(mud->msg);
    lua_pushboolean(L, m->has_maxplayercount());
    return 1;
}

static const struct luaL_Reg IncPlayer_functions [] = {
    {"new", lua_protobuf_pb_IncPlayer_new},
    {NULL, NULL}
};

static const struct luaL_Reg IncPlayer_methods [] = {
    {"serialized", lua_protobuf_pb_IncPlayer_serialized},
    {"parsefromstring", lua_protobuf_pb_IncPlayer_parsefromstring},
    {"data", lua_protobuf_pb_IncPlayer_data},
    {"assign", lua_protobuf_pb_IncPlayer_assign},
    {"clear", lua_protobuf_pb_IncPlayer_clear},
    {"__gc", lua_protobuf_pb_IncPlayer_gc},
    {"size", lua_protobuf_pb_IncPlayer_size},
    {"clear_playerGuid", lua_protobuf_pb_IncPlayer_clear_playerGuid},
    {"get_playerGuid", lua_protobuf_pb_IncPlayer_get_playerGuid},
    {"set_playerGuid", lua_protobuf_pb_IncPlayer_set_playerGuid},
    {"has_playerGuid", lua_protobuf_pb_IncPlayer_has_playerGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_IncPlayer_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.IncPlayer");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, IncPlayer_methods);
    luaL_register(L, "proto-buf.pb.IncPlayer", IncPlayer_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_IncPlayer_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::IncPlayer*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.IncPlayer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_IncPlayer_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::IncPlayer();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.IncPlayer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_IncPlayer_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_IncPlayer_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* src = boost::polymorphic_downcast<::pb::IncPlayer*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_IncPlayer_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_IncPlayer_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_IncPlayer_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_IncPlayer_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_IncPlayer_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_IncPlayer_clear_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    m->clear_playerguid();
    return 0;
}

int lua_protobuf_pb_IncPlayer_get_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    lua_pushnumber(L, m->playerguid());
    return 1;
}

int lua_protobuf_pb_IncPlayer_set_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerguid(i);
    return 0;
}

int lua_protobuf_pb_IncPlayer_has_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.IncPlayer");
    ::pb::IncPlayer* m = boost::polymorphic_downcast<::pb::IncPlayer*>(mud->msg);
    lua_pushboolean(L, m->has_playerguid());
    return 1;
}

static const struct luaL_Reg DeIncPlayer_functions [] = {
    {"new", lua_protobuf_pb_DeIncPlayer_new},
    {NULL, NULL}
};

static const struct luaL_Reg DeIncPlayer_methods [] = {
    {"serialized", lua_protobuf_pb_DeIncPlayer_serialized},
    {"parsefromstring", lua_protobuf_pb_DeIncPlayer_parsefromstring},
    {"data", lua_protobuf_pb_DeIncPlayer_data},
    {"assign", lua_protobuf_pb_DeIncPlayer_assign},
    {"clear", lua_protobuf_pb_DeIncPlayer_clear},
    {"__gc", lua_protobuf_pb_DeIncPlayer_gc},
    {"size", lua_protobuf_pb_DeIncPlayer_size},
    {NULL, NULL},
};

int lua_protobuf_pb_DeIncPlayer_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.DeIncPlayer");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, DeIncPlayer_methods);
    luaL_register(L, "proto-buf.pb.DeIncPlayer", DeIncPlayer_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_DeIncPlayer_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::DeIncPlayer*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.DeIncPlayer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_DeIncPlayer_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::DeIncPlayer();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.DeIncPlayer");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_DeIncPlayer_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* m = boost::polymorphic_downcast<::pb::DeIncPlayer*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_DeIncPlayer_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* m = boost::polymorphic_downcast<::pb::DeIncPlayer*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* src = boost::polymorphic_downcast<::pb::DeIncPlayer*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_DeIncPlayer_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* m = boost::polymorphic_downcast<::pb::DeIncPlayer*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_DeIncPlayer_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_DeIncPlayer_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* m = boost::polymorphic_downcast<::pb::DeIncPlayer*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_DeIncPlayer_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* m = boost::polymorphic_downcast<::pb::DeIncPlayer*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_DeIncPlayer_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.DeIncPlayer");
    ::pb::DeIncPlayer* m = boost::polymorphic_downcast<::pb::DeIncPlayer*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
static const struct luaL_Reg ClientLog_functions [] = {
    {"new", lua_protobuf_pb_ClientLog_new},
    {NULL, NULL}
};

static const struct luaL_Reg ClientLog_methods [] = {
    {"serialized", lua_protobuf_pb_ClientLog_serialized},
    {"parsefromstring", lua_protobuf_pb_ClientLog_parsefromstring},
    {"data", lua_protobuf_pb_ClientLog_data},
    {"assign", lua_protobuf_pb_ClientLog_assign},
    {"clear", lua_protobuf_pb_ClientLog_clear},
    {"__gc", lua_protobuf_pb_ClientLog_gc},
    {"size", lua_protobuf_pb_ClientLog_size},
    {"clear_error", lua_protobuf_pb_ClientLog_clear_error},
    {"get_error", lua_protobuf_pb_ClientLog_get_error},
    {"set_error", lua_protobuf_pb_ClientLog_set_error},
    {"has_error", lua_protobuf_pb_ClientLog_has_error},
    {"clear_machineID", lua_protobuf_pb_ClientLog_clear_machineID},
    {"get_machineID", lua_protobuf_pb_ClientLog_get_machineID},
    {"set_machineID", lua_protobuf_pb_ClientLog_set_machineID},
    {"has_machineID", lua_protobuf_pb_ClientLog_has_machineID},
    {"clear_content", lua_protobuf_pb_ClientLog_clear_content},
    {"get_content", lua_protobuf_pb_ClientLog_get_content},
    {"set_content", lua_protobuf_pb_ClientLog_set_content},
    {"has_content", lua_protobuf_pb_ClientLog_has_content},
    {"clear_memoryStatus", lua_protobuf_pb_ClientLog_clear_memoryStatus},
    {"get_memoryStatus", lua_protobuf_pb_ClientLog_get_memoryStatus},
    {"set_memoryStatus", lua_protobuf_pb_ClientLog_set_memoryStatus},
    {"has_memoryStatus", lua_protobuf_pb_ClientLog_has_memoryStatus},
    {NULL, NULL},
};

int lua_protobuf_pb_ClientLog_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ClientLog");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ClientLog_methods);
    luaL_register(L, "proto-buf.pb.ClientLog", ClientLog_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ClientLog_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ClientLog*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ClientLog");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ClientLog_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ClientLog();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ClientLog");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ClientLog_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ClientLog_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* src = boost::polymorphic_downcast<::pb::ClientLog*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ClientLog_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ClientLog_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ClientLog_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ClientLog_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ClientLog_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ClientLog_clear_error(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    m->clear_error();
    return 0;
}

int lua_protobuf_pb_ClientLog_get_error(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushboolean(L, m->error());
    return 1;
}

int lua_protobuf_pb_ClientLog_set_error(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_error(b);
    return 0;
}

int lua_protobuf_pb_ClientLog_has_error(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushboolean(L, m->has_error());
    return 1;
}

int lua_protobuf_pb_ClientLog_clear_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    m->clear_machineid();
    return 0;
}

int lua_protobuf_pb_ClientLog_get_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    const std::string& s = m->machineid();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientLog_set_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_machineid(s, len);
    return 0;
}

int lua_protobuf_pb_ClientLog_has_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushboolean(L, m->has_machineid());
    return 1;
}

int lua_protobuf_pb_ClientLog_clear_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    m->clear_content();
    return 0;
}

int lua_protobuf_pb_ClientLog_get_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    const std::string& s = m->content();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientLog_set_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_content(s, len);
    return 0;
}

int lua_protobuf_pb_ClientLog_has_content(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushboolean(L, m->has_content());
    return 1;
}

int lua_protobuf_pb_ClientLog_clear_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    m->clear_memorystatus();
    return 0;
}

int lua_protobuf_pb_ClientLog_get_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    const std::string& s = m->memorystatus();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientLog_set_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_memorystatus(s, len);
    return 0;
}

int lua_protobuf_pb_ClientLog_has_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientLog");
    ::pb::ClientLog* m = boost::polymorphic_downcast<::pb::ClientLog*>(mud->msg);
    lua_pushboolean(L, m->has_memorystatus());
    return 1;
}

static const struct luaL_Reg ClientDump_functions [] = {
    {"new", lua_protobuf_pb_ClientDump_new},
    {NULL, NULL}
};

static const struct luaL_Reg ClientDump_methods [] = {
    {"serialized", lua_protobuf_pb_ClientDump_serialized},
    {"parsefromstring", lua_protobuf_pb_ClientDump_parsefromstring},
    {"data", lua_protobuf_pb_ClientDump_data},
    {"assign", lua_protobuf_pb_ClientDump_assign},
    {"clear", lua_protobuf_pb_ClientDump_clear},
    {"__gc", lua_protobuf_pb_ClientDump_gc},
    {"size", lua_protobuf_pb_ClientDump_size},
    {"clear_machineID", lua_protobuf_pb_ClientDump_clear_machineID},
    {"get_machineID", lua_protobuf_pb_ClientDump_get_machineID},
    {"set_machineID", lua_protobuf_pb_ClientDump_set_machineID},
    {"has_machineID", lua_protobuf_pb_ClientDump_has_machineID},
    {"clear_dumpName", lua_protobuf_pb_ClientDump_clear_dumpName},
    {"get_dumpName", lua_protobuf_pb_ClientDump_get_dumpName},
    {"set_dumpName", lua_protobuf_pb_ClientDump_set_dumpName},
    {"has_dumpName", lua_protobuf_pb_ClientDump_has_dumpName},
    {"clear_dumpContent", lua_protobuf_pb_ClientDump_clear_dumpContent},
    {"get_dumpContent", lua_protobuf_pb_ClientDump_get_dumpContent},
    {"set_dumpContent", lua_protobuf_pb_ClientDump_set_dumpContent},
    {"has_dumpContent", lua_protobuf_pb_ClientDump_has_dumpContent},
    {"clear_memoryStatus", lua_protobuf_pb_ClientDump_clear_memoryStatus},
    {"get_memoryStatus", lua_protobuf_pb_ClientDump_get_memoryStatus},
    {"set_memoryStatus", lua_protobuf_pb_ClientDump_set_memoryStatus},
    {"has_memoryStatus", lua_protobuf_pb_ClientDump_has_memoryStatus},
    {NULL, NULL},
};

int lua_protobuf_pb_ClientDump_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ClientDump");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ClientDump_methods);
    luaL_register(L, "proto-buf.pb.ClientDump", ClientDump_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ClientDump_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ClientDump*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ClientDump");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ClientDump_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ClientDump();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ClientDump");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ClientDump_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ClientDump_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* src = boost::polymorphic_downcast<::pb::ClientDump*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ClientDump_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ClientDump_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ClientDump_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ClientDump_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ClientDump_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ClientDump_clear_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    m->clear_machineid();
    return 0;
}

int lua_protobuf_pb_ClientDump_get_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    const std::string& s = m->machineid();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientDump_set_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_machineid(s, len);
    return 0;
}

int lua_protobuf_pb_ClientDump_has_machineID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    lua_pushboolean(L, m->has_machineid());
    return 1;
}

int lua_protobuf_pb_ClientDump_clear_dumpName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    m->clear_dumpname();
    return 0;
}

int lua_protobuf_pb_ClientDump_get_dumpName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    const std::string& s = m->dumpname();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientDump_set_dumpName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_dumpname(s, len);
    return 0;
}

int lua_protobuf_pb_ClientDump_has_dumpName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    lua_pushboolean(L, m->has_dumpname());
    return 1;
}

int lua_protobuf_pb_ClientDump_clear_dumpContent(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    m->clear_dumpcontent();
    return 0;
}

int lua_protobuf_pb_ClientDump_get_dumpContent(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    const std::string& s = m->dumpcontent();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientDump_set_dumpContent(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_dumpcontent(s, len);
    return 0;
}

int lua_protobuf_pb_ClientDump_has_dumpContent(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    lua_pushboolean(L, m->has_dumpcontent());
    return 1;
}

int lua_protobuf_pb_ClientDump_clear_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    m->clear_memorystatus();
    return 0;
}

int lua_protobuf_pb_ClientDump_get_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    const std::string& s = m->memorystatus();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_ClientDump_set_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_memorystatus(s, len);
    return 0;
}

int lua_protobuf_pb_ClientDump_has_memoryStatus(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ClientDump");
    ::pb::ClientDump* m = boost::polymorphic_downcast<::pb::ClientDump*>(mud->msg);
    lua_pushboolean(L, m->has_memorystatus());
    return 1;
}

static const struct luaL_Reg SystemKeepalive_functions [] = {
    {"new", lua_protobuf_pb_SystemKeepalive_new},
    {NULL, NULL}
};

static const struct luaL_Reg SystemKeepalive_methods [] = {
    {"serialized", lua_protobuf_pb_SystemKeepalive_serialized},
    {"parsefromstring", lua_protobuf_pb_SystemKeepalive_parsefromstring},
    {"data", lua_protobuf_pb_SystemKeepalive_data},
    {"assign", lua_protobuf_pb_SystemKeepalive_assign},
    {"clear", lua_protobuf_pb_SystemKeepalive_clear},
    {"__gc", lua_protobuf_pb_SystemKeepalive_gc},
    {"size", lua_protobuf_pb_SystemKeepalive_size},
    {NULL, NULL},
};

int lua_protobuf_pb_SystemKeepalive_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.SystemKeepalive");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SystemKeepalive_methods);
    luaL_register(L, "proto-buf.pb.SystemKeepalive", SystemKeepalive_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_SystemKeepalive_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::SystemKeepalive*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.SystemKeepalive");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_SystemKeepalive_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::SystemKeepalive();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.SystemKeepalive");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_SystemKeepalive_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* m = boost::polymorphic_downcast<::pb::SystemKeepalive*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_SystemKeepalive_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* m = boost::polymorphic_downcast<::pb::SystemKeepalive*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* src = boost::polymorphic_downcast<::pb::SystemKeepalive*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_SystemKeepalive_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* m = boost::polymorphic_downcast<::pb::SystemKeepalive*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_SystemKeepalive_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_SystemKeepalive_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* m = boost::polymorphic_downcast<::pb::SystemKeepalive*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_SystemKeepalive_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* m = boost::polymorphic_downcast<::pb::SystemKeepalive*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_SystemKeepalive_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SystemKeepalive");
    ::pb::SystemKeepalive* m = boost::polymorphic_downcast<::pb::SystemKeepalive*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
static const struct luaL_Reg ProxyBalanceAdd_functions [] = {
    {"new", lua_protobuf_pb_ProxyBalanceAdd_new},
    {NULL, NULL}
};

static const struct luaL_Reg ProxyBalanceAdd_methods [] = {
    {"serialized", lua_protobuf_pb_ProxyBalanceAdd_serialized},
    {"parsefromstring", lua_protobuf_pb_ProxyBalanceAdd_parsefromstring},
    {"data", lua_protobuf_pb_ProxyBalanceAdd_data},
    {"assign", lua_protobuf_pb_ProxyBalanceAdd_assign},
    {"clear", lua_protobuf_pb_ProxyBalanceAdd_clear},
    {"__gc", lua_protobuf_pb_ProxyBalanceAdd_gc},
    {"size", lua_protobuf_pb_ProxyBalanceAdd_size},
    {"clear_playerGuid", lua_protobuf_pb_ProxyBalanceAdd_clear_playerGuid},
    {"get_playerGuid", lua_protobuf_pb_ProxyBalanceAdd_get_playerGuid},
    {"set_playerGuid", lua_protobuf_pb_ProxyBalanceAdd_set_playerGuid},
    {"has_playerGuid", lua_protobuf_pb_ProxyBalanceAdd_has_playerGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_ProxyBalanceAdd_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ProxyBalanceAdd");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ProxyBalanceAdd_methods);
    luaL_register(L, "proto-buf.pb.ProxyBalanceAdd", ProxyBalanceAdd_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ProxyBalanceAdd_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ProxyBalanceAdd");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ProxyBalanceAdd_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ProxyBalanceAdd();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ProxyBalanceAdd");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ProxyBalanceAdd_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ProxyBalanceAdd_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* src = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ProxyBalanceAdd_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ProxyBalanceAdd_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ProxyBalanceAdd_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ProxyBalanceAdd_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ProxyBalanceAdd_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ProxyBalanceAdd_clear_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    m->clear_playerguid();
    return 0;
}

int lua_protobuf_pb_ProxyBalanceAdd_get_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    lua_pushnumber(L, m->playerguid());
    return 1;
}

int lua_protobuf_pb_ProxyBalanceAdd_set_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerguid(i);
    return 0;
}

int lua_protobuf_pb_ProxyBalanceAdd_has_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceAdd");
    ::pb::ProxyBalanceAdd* m = boost::polymorphic_downcast<::pb::ProxyBalanceAdd*>(mud->msg);
    lua_pushboolean(L, m->has_playerguid());
    return 1;
}

static const struct luaL_Reg ProxyBalanceDel_functions [] = {
    {"new", lua_protobuf_pb_ProxyBalanceDel_new},
    {NULL, NULL}
};

static const struct luaL_Reg ProxyBalanceDel_methods [] = {
    {"serialized", lua_protobuf_pb_ProxyBalanceDel_serialized},
    {"parsefromstring", lua_protobuf_pb_ProxyBalanceDel_parsefromstring},
    {"data", lua_protobuf_pb_ProxyBalanceDel_data},
    {"assign", lua_protobuf_pb_ProxyBalanceDel_assign},
    {"clear", lua_protobuf_pb_ProxyBalanceDel_clear},
    {"__gc", lua_protobuf_pb_ProxyBalanceDel_gc},
    {"size", lua_protobuf_pb_ProxyBalanceDel_size},
    {"clear_playerGuid", lua_protobuf_pb_ProxyBalanceDel_clear_playerGuid},
    {"get_playerGuid", lua_protobuf_pb_ProxyBalanceDel_get_playerGuid},
    {"set_playerGuid", lua_protobuf_pb_ProxyBalanceDel_set_playerGuid},
    {"has_playerGuid", lua_protobuf_pb_ProxyBalanceDel_has_playerGuid},
    {NULL, NULL},
};

int lua_protobuf_pb_ProxyBalanceDel_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.ProxyBalanceDel");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, ProxyBalanceDel_methods);
    luaL_register(L, "proto-buf.pb.ProxyBalanceDel", ProxyBalanceDel_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_ProxyBalanceDel_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.ProxyBalanceDel");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_ProxyBalanceDel_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::ProxyBalanceDel();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.ProxyBalanceDel");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_ProxyBalanceDel_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_ProxyBalanceDel_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* src = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_ProxyBalanceDel_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_ProxyBalanceDel_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_ProxyBalanceDel_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_ProxyBalanceDel_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_ProxyBalanceDel_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_ProxyBalanceDel_clear_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    m->clear_playerguid();
    return 0;
}

int lua_protobuf_pb_ProxyBalanceDel_get_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    lua_pushnumber(L, m->playerguid());
    return 1;
}

int lua_protobuf_pb_ProxyBalanceDel_set_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerguid(i);
    return 0;
}

int lua_protobuf_pb_ProxyBalanceDel_has_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.ProxyBalanceDel");
    ::pb::ProxyBalanceDel* m = boost::polymorphic_downcast<::pb::ProxyBalanceDel*>(mud->msg);
    lua_pushboolean(L, m->has_playerguid());
    return 1;
}

static const struct luaL_Reg InitUdpProxy_functions [] = {
    {"new", lua_protobuf_pb_InitUdpProxy_new},
    {NULL, NULL}
};

static const struct luaL_Reg InitUdpProxy_methods [] = {
    {"serialized", lua_protobuf_pb_InitUdpProxy_serialized},
    {"parsefromstring", lua_protobuf_pb_InitUdpProxy_parsefromstring},
    {"data", lua_protobuf_pb_InitUdpProxy_data},
    {"assign", lua_protobuf_pb_InitUdpProxy_assign},
    {"clear", lua_protobuf_pb_InitUdpProxy_clear},
    {"__gc", lua_protobuf_pb_InitUdpProxy_gc},
    {"size", lua_protobuf_pb_InitUdpProxy_size},
    {"clear_udpProxyHost", lua_protobuf_pb_InitUdpProxy_clear_udpProxyHost},
    {"get_udpProxyHost", lua_protobuf_pb_InitUdpProxy_get_udpProxyHost},
    {"set_udpProxyHost", lua_protobuf_pb_InitUdpProxy_set_udpProxyHost},
    {"has_udpProxyHost", lua_protobuf_pb_InitUdpProxy_has_udpProxyHost},
    {"clear_udpProxyPort", lua_protobuf_pb_InitUdpProxy_clear_udpProxyPort},
    {"get_udpProxyPort", lua_protobuf_pb_InitUdpProxy_get_udpProxyPort},
    {"set_udpProxyPort", lua_protobuf_pb_InitUdpProxy_set_udpProxyPort},
    {"has_udpProxyPort", lua_protobuf_pb_InitUdpProxy_has_udpProxyPort},
    {NULL, NULL},
};

int lua_protobuf_pb_InitUdpProxy_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.InitUdpProxy");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, InitUdpProxy_methods);
    luaL_register(L, "proto-buf.pb.InitUdpProxy", InitUdpProxy_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_InitUdpProxy_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::InitUdpProxy*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.InitUdpProxy");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_InitUdpProxy_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::InitUdpProxy();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.InitUdpProxy");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_InitUdpProxy_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_InitUdpProxy_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* src = boost::polymorphic_downcast<::pb::InitUdpProxy*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_InitUdpProxy_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_InitUdpProxy_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_InitUdpProxy_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_InitUdpProxy_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_InitUdpProxy_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_InitUdpProxy_clear_udpProxyHost(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    m->clear_udpproxyhost();
    return 0;
}

int lua_protobuf_pb_InitUdpProxy_get_udpProxyHost(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    const std::string& s = m->udpproxyhost();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_InitUdpProxy_set_udpProxyHost(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_udpproxyhost(s, len);
    return 0;
}

int lua_protobuf_pb_InitUdpProxy_has_udpProxyHost(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    lua_pushboolean(L, m->has_udpproxyhost());
    return 1;
}

int lua_protobuf_pb_InitUdpProxy_clear_udpProxyPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    m->clear_udpproxyport();
    return 0;
}

int lua_protobuf_pb_InitUdpProxy_get_udpProxyPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    lua_pushnumber(L, m->udpproxyport());
    return 1;
}

int lua_protobuf_pb_InitUdpProxy_set_udpProxyPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_udpproxyport(i);
    return 0;
}

int lua_protobuf_pb_InitUdpProxy_has_udpProxyPort(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.InitUdpProxy");
    ::pb::InitUdpProxy* m = boost::polymorphic_downcast<::pb::InitUdpProxy*>(mud->msg);
    lua_pushboolean(L, m->has_udpproxyport());
    return 1;
}

static const struct luaL_Reg PlayerGuidNotify_functions [] = {
    {"new", lua_protobuf_pb_PlayerGuidNotify_new},
    {NULL, NULL}
};

static const struct luaL_Reg PlayerGuidNotify_methods [] = {
    {"serialized", lua_protobuf_pb_PlayerGuidNotify_serialized},
    {"parsefromstring", lua_protobuf_pb_PlayerGuidNotify_parsefromstring},
    {"data", lua_protobuf_pb_PlayerGuidNotify_data},
    {"assign", lua_protobuf_pb_PlayerGuidNotify_assign},
    {"clear", lua_protobuf_pb_PlayerGuidNotify_clear},
    {"__gc", lua_protobuf_pb_PlayerGuidNotify_gc},
    {"size", lua_protobuf_pb_PlayerGuidNotify_size},
    {"clear_clientGuid", lua_protobuf_pb_PlayerGuidNotify_clear_clientGuid},
    {"get_clientGuid", lua_protobuf_pb_PlayerGuidNotify_get_clientGuid},
    {"set_clientGuid", lua_protobuf_pb_PlayerGuidNotify_set_clientGuid},
    {"has_clientGuid", lua_protobuf_pb_PlayerGuidNotify_has_clientGuid},
    {"clear_uid", lua_protobuf_pb_PlayerGuidNotify_clear_uid},
    {"get_uid", lua_protobuf_pb_PlayerGuidNotify_get_uid},
    {"set_uid", lua_protobuf_pb_PlayerGuidNotify_set_uid},
    {"has_uid", lua_protobuf_pb_PlayerGuidNotify_has_uid},
    {"clear_token", lua_protobuf_pb_PlayerGuidNotify_clear_token},
    {"get_token", lua_protobuf_pb_PlayerGuidNotify_get_token},
    {"set_token", lua_protobuf_pb_PlayerGuidNotify_set_token},
    {"has_token", lua_protobuf_pb_PlayerGuidNotify_has_token},
    {"clear_robot", lua_protobuf_pb_PlayerGuidNotify_clear_robot},
    {"get_robot", lua_protobuf_pb_PlayerGuidNotify_get_robot},
    {"set_robot", lua_protobuf_pb_PlayerGuidNotify_set_robot},
    {"has_robot", lua_protobuf_pb_PlayerGuidNotify_has_robot},
    {"clear_securityKey", lua_protobuf_pb_PlayerGuidNotify_clear_securityKey},
    {"get_securityKey", lua_protobuf_pb_PlayerGuidNotify_get_securityKey},
    {"set_securityKey", lua_protobuf_pb_PlayerGuidNotify_set_securityKey},
    {"has_securityKey", lua_protobuf_pb_PlayerGuidNotify_has_securityKey},
    {NULL, NULL},
};

int lua_protobuf_pb_PlayerGuidNotify_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.PlayerGuidNotify");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, PlayerGuidNotify_methods);
    luaL_register(L, "proto-buf.pb.PlayerGuidNotify", PlayerGuidNotify_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_PlayerGuidNotify_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.PlayerGuidNotify");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_PlayerGuidNotify_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::PlayerGuidNotify();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.PlayerGuidNotify");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* src = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_PlayerGuidNotify_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_PlayerGuidNotify_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_PlayerGuidNotify_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_PlayerGuidNotify_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_PlayerGuidNotify_clear_clientGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    m->clear_clientguid();
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_get_clientGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushnumber(L, m->clientguid());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_set_clientGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_clientguid(i);
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_has_clientGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushboolean(L, m->has_clientguid());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_clear_uid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    m->clear_uid();
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_get_uid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    const std::string& s = m->uid();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_set_uid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_uid(s, len);
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_has_uid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushboolean(L, m->has_uid());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_clear_token(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    m->clear_token();
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_get_token(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    const std::string& s = m->token();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_set_token(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_token(s, len);
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_has_token(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushboolean(L, m->has_token());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_clear_robot(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    m->clear_robot();
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_get_robot(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushnumber(L, m->robot());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_set_robot(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_robot(i);
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_has_robot(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushboolean(L, m->has_robot());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_clear_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    m->clear_securitykey();
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_get_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    const std::string& s = m->securitykey();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_PlayerGuidNotify_set_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_securitykey(s, len);
    return 0;
}

int lua_protobuf_pb_PlayerGuidNotify_has_securityKey(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.PlayerGuidNotify");
    ::pb::PlayerGuidNotify* m = boost::polymorphic_downcast<::pb::PlayerGuidNotify*>(mud->msg);
    lua_pushboolean(L, m->has_securitykey());
    return 1;
}

static const struct luaL_Reg SetPacketStat_functions [] = {
    {"new", lua_protobuf_pb_SetPacketStat_new},
    {NULL, NULL}
};

static const struct luaL_Reg SetPacketStat_methods [] = {
    {"serialized", lua_protobuf_pb_SetPacketStat_serialized},
    {"parsefromstring", lua_protobuf_pb_SetPacketStat_parsefromstring},
    {"data", lua_protobuf_pb_SetPacketStat_data},
    {"assign", lua_protobuf_pb_SetPacketStat_assign},
    {"clear", lua_protobuf_pb_SetPacketStat_clear},
    {"__gc", lua_protobuf_pb_SetPacketStat_gc},
    {"size", lua_protobuf_pb_SetPacketStat_size},
    {"clear_needStat", lua_protobuf_pb_SetPacketStat_clear_needStat},
    {"get_needStat", lua_protobuf_pb_SetPacketStat_get_needStat},
    {"set_needStat", lua_protobuf_pb_SetPacketStat_set_needStat},
    {"has_needStat", lua_protobuf_pb_SetPacketStat_has_needStat},
    {"clear_needStatTime", lua_protobuf_pb_SetPacketStat_clear_needStatTime},
    {"get_needStatTime", lua_protobuf_pb_SetPacketStat_get_needStatTime},
    {"set_needStatTime", lua_protobuf_pb_SetPacketStat_set_needStatTime},
    {"has_needStatTime", lua_protobuf_pb_SetPacketStat_has_needStatTime},
    {NULL, NULL},
};

int lua_protobuf_pb_SetPacketStat_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.SetPacketStat");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SetPacketStat_methods);
    luaL_register(L, "proto-buf.pb.SetPacketStat", SetPacketStat_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_SetPacketStat_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::SetPacketStat*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.SetPacketStat");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_SetPacketStat_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::SetPacketStat();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.SetPacketStat");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_SetPacketStat_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_SetPacketStat_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* src = boost::polymorphic_downcast<::pb::SetPacketStat*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_SetPacketStat_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_SetPacketStat_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_SetPacketStat_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_SetPacketStat_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_SetPacketStat_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_SetPacketStat_clear_needStat(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    m->clear_needstat();
    return 0;
}

int lua_protobuf_pb_SetPacketStat_get_needStat(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    lua_pushboolean(L, m->needstat());
    return 1;
}

int lua_protobuf_pb_SetPacketStat_set_needStat(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_needstat(b);
    return 0;
}

int lua_protobuf_pb_SetPacketStat_has_needStat(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    lua_pushboolean(L, m->has_needstat());
    return 1;
}

int lua_protobuf_pb_SetPacketStat_clear_needStatTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    m->clear_needstattime();
    return 0;
}

int lua_protobuf_pb_SetPacketStat_get_needStatTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    lua_pushboolean(L, m->needstattime());
    return 1;
}

int lua_protobuf_pb_SetPacketStat_set_needStatTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_needstattime(b);
    return 0;
}

int lua_protobuf_pb_SetPacketStat_has_needStatTime(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SetPacketStat");
    ::pb::SetPacketStat* m = boost::polymorphic_downcast<::pb::SetPacketStat*>(mud->msg);
    lua_pushboolean(L, m->has_needstattime());
    return 1;
}

static const struct luaL_Reg UploadFileReq_functions [] = {
    {"new", lua_protobuf_pb_UploadFileReq_new},
    {NULL, NULL}
};

static const struct luaL_Reg UploadFileReq_methods [] = {
    {"serialized", lua_protobuf_pb_UploadFileReq_serialized},
    {"parsefromstring", lua_protobuf_pb_UploadFileReq_parsefromstring},
    {"data", lua_protobuf_pb_UploadFileReq_data},
    {"assign", lua_protobuf_pb_UploadFileReq_assign},
    {"clear", lua_protobuf_pb_UploadFileReq_clear},
    {"__gc", lua_protobuf_pb_UploadFileReq_gc},
    {"size", lua_protobuf_pb_UploadFileReq_size},
    {"clear_fileName", lua_protobuf_pb_UploadFileReq_clear_fileName},
    {"get_fileName", lua_protobuf_pb_UploadFileReq_get_fileName},
    {"set_fileName", lua_protobuf_pb_UploadFileReq_set_fileName},
    {"has_fileName", lua_protobuf_pb_UploadFileReq_has_fileName},
    {"clear_roleName", lua_protobuf_pb_UploadFileReq_clear_roleName},
    {"get_roleName", lua_protobuf_pb_UploadFileReq_get_roleName},
    {"set_roleName", lua_protobuf_pb_UploadFileReq_set_roleName},
    {"has_roleName", lua_protobuf_pb_UploadFileReq_has_roleName},
    {NULL, NULL},
};

int lua_protobuf_pb_UploadFileReq_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.UploadFileReq");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, UploadFileReq_methods);
    luaL_register(L, "proto-buf.pb.UploadFileReq", UploadFileReq_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_UploadFileReq_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::UploadFileReq*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.UploadFileReq");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_UploadFileReq_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::UploadFileReq();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.UploadFileReq");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_UploadFileReq_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_UploadFileReq_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* src = boost::polymorphic_downcast<::pb::UploadFileReq*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_UploadFileReq_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_UploadFileReq_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_UploadFileReq_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_UploadFileReq_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_UploadFileReq_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_UploadFileReq_clear_fileName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    m->clear_filename();
    return 0;
}

int lua_protobuf_pb_UploadFileReq_get_fileName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    const std::string& s = m->filename();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_UploadFileReq_set_fileName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_filename(s, len);
    return 0;
}

int lua_protobuf_pb_UploadFileReq_has_fileName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    lua_pushboolean(L, m->has_filename());
    return 1;
}

int lua_protobuf_pb_UploadFileReq_clear_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    m->clear_rolename();
    return 0;
}

int lua_protobuf_pb_UploadFileReq_get_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    const std::string& s = m->rolename();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_UploadFileReq_set_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_rolename(s, len);
    return 0;
}

int lua_protobuf_pb_UploadFileReq_has_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReq");
    ::pb::UploadFileReq* m = boost::polymorphic_downcast<::pb::UploadFileReq*>(mud->msg);
    lua_pushboolean(L, m->has_rolename());
    return 1;
}

static const struct luaL_Reg UploadFileReply_functions [] = {
    {"new", lua_protobuf_pb_UploadFileReply_new},
    {NULL, NULL}
};

static const struct luaL_Reg UploadFileReply_methods [] = {
    {"serialized", lua_protobuf_pb_UploadFileReply_serialized},
    {"parsefromstring", lua_protobuf_pb_UploadFileReply_parsefromstring},
    {"data", lua_protobuf_pb_UploadFileReply_data},
    {"assign", lua_protobuf_pb_UploadFileReply_assign},
    {"clear", lua_protobuf_pb_UploadFileReply_clear},
    {"__gc", lua_protobuf_pb_UploadFileReply_gc},
    {"size", lua_protobuf_pb_UploadFileReply_size},
    {"clear_roleName", lua_protobuf_pb_UploadFileReply_clear_roleName},
    {"get_roleName", lua_protobuf_pb_UploadFileReply_get_roleName},
    {"set_roleName", lua_protobuf_pb_UploadFileReply_set_roleName},
    {"has_roleName", lua_protobuf_pb_UploadFileReply_has_roleName},
    {"clear_data", lua_protobuf_pb_UploadFileReply_clear_data},
    {"get_data", lua_protobuf_pb_UploadFileReply_get_data},
    {"set_data", lua_protobuf_pb_UploadFileReply_set_data},
    {"has_data", lua_protobuf_pb_UploadFileReply_has_data},
    {NULL, NULL},
};

int lua_protobuf_pb_UploadFileReply_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.UploadFileReply");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, UploadFileReply_methods);
    luaL_register(L, "proto-buf.pb.UploadFileReply", UploadFileReply_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_UploadFileReply_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::UploadFileReply*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.UploadFileReply");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_UploadFileReply_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::UploadFileReply();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.UploadFileReply");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_UploadFileReply_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_UploadFileReply_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* src = boost::polymorphic_downcast<::pb::UploadFileReply*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_UploadFileReply_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_UploadFileReply_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_UploadFileReply_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_UploadFileReply_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_UploadFileReply_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_UploadFileReply_clear_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    m->clear_rolename();
    return 0;
}

int lua_protobuf_pb_UploadFileReply_get_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    const std::string& s = m->rolename();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_UploadFileReply_set_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_rolename(s, len);
    return 0;
}

int lua_protobuf_pb_UploadFileReply_has_roleName(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    lua_pushboolean(L, m->has_rolename());
    return 1;
}

int lua_protobuf_pb_UploadFileReply_clear_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    m->clear_data();
    return 0;
}

int lua_protobuf_pb_UploadFileReply_get_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    const std::string& s = m->data();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_UploadFileReply_set_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_data(s, len);
    return 0;
}

int lua_protobuf_pb_UploadFileReply_has_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.UploadFileReply");
    ::pb::UploadFileReply* m = boost::polymorphic_downcast<::pb::UploadFileReply*>(mud->msg);
    lua_pushboolean(L, m->has_data());
    return 1;
}

static const struct luaL_Reg CollectModuleInfo_functions [] = {
    {"new", lua_protobuf_pb_CollectModuleInfo_new},
    {NULL, NULL}
};

static const struct luaL_Reg CollectModuleInfo_methods [] = {
    {"serialized", lua_protobuf_pb_CollectModuleInfo_serialized},
    {"parsefromstring", lua_protobuf_pb_CollectModuleInfo_parsefromstring},
    {"data", lua_protobuf_pb_CollectModuleInfo_data},
    {"assign", lua_protobuf_pb_CollectModuleInfo_assign},
    {"clear", lua_protobuf_pb_CollectModuleInfo_clear},
    {"__gc", lua_protobuf_pb_CollectModuleInfo_gc},
    {"size", lua_protobuf_pb_CollectModuleInfo_size},
    {"clear_playerID", lua_protobuf_pb_CollectModuleInfo_clear_playerID},
    {"get_playerID", lua_protobuf_pb_CollectModuleInfo_get_playerID},
    {"set_playerID", lua_protobuf_pb_CollectModuleInfo_set_playerID},
    {"has_playerID", lua_protobuf_pb_CollectModuleInfo_has_playerID},
    {"clear_sign", lua_protobuf_pb_CollectModuleInfo_clear_sign},
    {"get_sign", lua_protobuf_pb_CollectModuleInfo_get_sign},
    {"set_sign", lua_protobuf_pb_CollectModuleInfo_set_sign},
    {"has_sign", lua_protobuf_pb_CollectModuleInfo_has_sign},
    {"clear_modulePath", lua_protobuf_pb_CollectModuleInfo_clear_modulePath},
    {"get_modulePath", lua_protobuf_pb_CollectModuleInfo_get_modulePath},
    {"set_modulePath", lua_protobuf_pb_CollectModuleInfo_set_modulePath},
    {"has_modulePath", lua_protobuf_pb_CollectModuleInfo_has_modulePath},
    {"clear_time", lua_protobuf_pb_CollectModuleInfo_clear_time},
    {"get_time", lua_protobuf_pb_CollectModuleInfo_get_time},
    {"set_time", lua_protobuf_pb_CollectModuleInfo_set_time},
    {"has_time", lua_protobuf_pb_CollectModuleInfo_has_time},
    {NULL, NULL},
};

int lua_protobuf_pb_CollectModuleInfo_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.CollectModuleInfo");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, CollectModuleInfo_methods);
    luaL_register(L, "proto-buf.pb.CollectModuleInfo", CollectModuleInfo_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_CollectModuleInfo_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::CollectModuleInfo*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.CollectModuleInfo");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_CollectModuleInfo_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::CollectModuleInfo();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.CollectModuleInfo");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* src = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_CollectModuleInfo_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_CollectModuleInfo_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_CollectModuleInfo_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_CollectModuleInfo_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_CollectModuleInfo_clear_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    m->clear_playerid();
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_get_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushnumber(L, m->playerid());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_set_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerid(i);
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_has_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushboolean(L, m->has_playerid());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_clear_sign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    m->clear_sign();
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_get_sign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    const std::string& s = m->sign();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_set_sign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_sign(s, len);
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_has_sign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushboolean(L, m->has_sign());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_clear_modulePath(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    m->clear_modulepath();
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_get_modulePath(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    const std::string& s = m->modulepath();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_set_modulePath(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_modulepath(s, len);
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_has_modulePath(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushboolean(L, m->has_modulepath());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_clear_time(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    m->clear_time();
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_get_time(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushnumber(L, m->time());
    return 1;
}

int lua_protobuf_pb_CollectModuleInfo_set_time(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_time(i);
    return 0;
}

int lua_protobuf_pb_CollectModuleInfo_has_time(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.CollectModuleInfo");
    ::pb::CollectModuleInfo* m = boost::polymorphic_downcast<::pb::CollectModuleInfo*>(mud->msg);
    lua_pushboolean(L, m->has_time());
    return 1;
}

static const struct luaL_Reg SyncItemLock_functions [] = {
    {"new", lua_protobuf_pb_SyncItemLock_new},
    {NULL, NULL}
};

static const struct luaL_Reg SyncItemLock_methods [] = {
    {"serialized", lua_protobuf_pb_SyncItemLock_serialized},
    {"parsefromstring", lua_protobuf_pb_SyncItemLock_parsefromstring},
    {"data", lua_protobuf_pb_SyncItemLock_data},
    {"assign", lua_protobuf_pb_SyncItemLock_assign},
    {"clear", lua_protobuf_pb_SyncItemLock_clear},
    {"__gc", lua_protobuf_pb_SyncItemLock_gc},
    {"size", lua_protobuf_pb_SyncItemLock_size},
    {"clear_account", lua_protobuf_pb_SyncItemLock_clear_account},
    {"get_account", lua_protobuf_pb_SyncItemLock_get_account},
    {"set_account", lua_protobuf_pb_SyncItemLock_set_account},
    {"has_account", lua_protobuf_pb_SyncItemLock_has_account},
    {"clear_playerID", lua_protobuf_pb_SyncItemLock_clear_playerID},
    {"get_playerID", lua_protobuf_pb_SyncItemLock_get_playerID},
    {"set_playerID", lua_protobuf_pb_SyncItemLock_set_playerID},
    {"has_playerID", lua_protobuf_pb_SyncItemLock_has_playerID},
    {"clear_lock", lua_protobuf_pb_SyncItemLock_clear_lock},
    {"get_lock", lua_protobuf_pb_SyncItemLock_get_lock},
    {"set_lock", lua_protobuf_pb_SyncItemLock_set_lock},
    {"has_lock", lua_protobuf_pb_SyncItemLock_has_lock},
    {NULL, NULL},
};

int lua_protobuf_pb_SyncItemLock_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.SyncItemLock");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, SyncItemLock_methods);
    luaL_register(L, "proto-buf.pb.SyncItemLock", SyncItemLock_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_SyncItemLock_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::SyncItemLock*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.SyncItemLock");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_SyncItemLock_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::SyncItemLock();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.SyncItemLock");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_SyncItemLock_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_SyncItemLock_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* src = boost::polymorphic_downcast<::pb::SyncItemLock*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_SyncItemLock_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_SyncItemLock_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_SyncItemLock_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_SyncItemLock_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_SyncItemLock_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_SyncItemLock_clear_account(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    m->clear_account();
    return 0;
}

int lua_protobuf_pb_SyncItemLock_get_account(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    const std::string& s = m->account();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_SyncItemLock_set_account(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_account(s, len);
    return 0;
}

int lua_protobuf_pb_SyncItemLock_has_account(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushboolean(L, m->has_account());
    return 1;
}

int lua_protobuf_pb_SyncItemLock_clear_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    m->clear_playerid();
    return 0;
}

int lua_protobuf_pb_SyncItemLock_get_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushnumber(L, m->playerid());
    return 1;
}

int lua_protobuf_pb_SyncItemLock_set_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerid(i);
    return 0;
}

int lua_protobuf_pb_SyncItemLock_has_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushboolean(L, m->has_playerid());
    return 1;
}

int lua_protobuf_pb_SyncItemLock_clear_lock(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    m->clear_lock();
    return 0;
}

int lua_protobuf_pb_SyncItemLock_get_lock(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushboolean(L, m->lock());
    return 1;
}

int lua_protobuf_pb_SyncItemLock_set_lock(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    luaL_checktype(L, 2, LUA_TBOOLEAN);
    bool b = lua_toboolean(L, 2) != 0;
    m->set_lock(b);
    return 0;
}

int lua_protobuf_pb_SyncItemLock_has_lock(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.SyncItemLock");
    ::pb::SyncItemLock* m = boost::polymorphic_downcast<::pb::SyncItemLock*>(mud->msg);
    lua_pushboolean(L, m->has_lock());
    return 1;
}

static const struct luaL_Reg OneString_functions [] = {
    {"new", lua_protobuf_pb_OneString_new},
    {NULL, NULL}
};

static const struct luaL_Reg OneString_methods [] = {
    {"serialized", lua_protobuf_pb_OneString_serialized},
    {"parsefromstring", lua_protobuf_pb_OneString_parsefromstring},
    {"data", lua_protobuf_pb_OneString_data},
    {"assign", lua_protobuf_pb_OneString_assign},
    {"clear", lua_protobuf_pb_OneString_clear},
    {"__gc", lua_protobuf_pb_OneString_gc},
    {"size", lua_protobuf_pb_OneString_size},
    {"clear_str", lua_protobuf_pb_OneString_clear_str},
    {"get_str", lua_protobuf_pb_OneString_get_str},
    {"set_str", lua_protobuf_pb_OneString_set_str},
    {"has_str", lua_protobuf_pb_OneString_has_str},
    {NULL, NULL},
};

int lua_protobuf_pb_OneString_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.OneString");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, OneString_methods);
    luaL_register(L, "proto-buf.pb.OneString", OneString_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_OneString_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::OneString*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.OneString");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_OneString_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::OneString();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.OneString");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_OneString_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_OneString_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.OneString");
    ::pb::OneString* src = boost::polymorphic_downcast<::pb::OneString*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_OneString_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_OneString_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_OneString_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_OneString_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_OneString_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_OneString_clear_str(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    m->clear_str();
    return 0;
}

int lua_protobuf_pb_OneString_get_str(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    const std::string& s = m->str();
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}

int lua_protobuf_pb_OneString_set_str(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    luaL_checktype(L, 2, LUA_TSTRING);
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (s == NULL) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_str(s, len);
    return 0;
}

int lua_protobuf_pb_OneString_has_str(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.OneString");
    ::pb::OneString* m = boost::polymorphic_downcast<::pb::OneString*>(mud->msg);
    lua_pushboolean(L, m->has_str());
    return 1;
}
