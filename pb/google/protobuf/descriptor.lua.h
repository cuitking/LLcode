// Generated by the lua-protobuf compiler.
// You shouldn't be editing this file manually
//
// source proto file: google/protobuf/descriptor.proto
#pragma once

#include "lua-protobuf.h"
#include "google/protobuf/descriptor.pb.h"

#ifdef __cplusplus
extern "C" {
#endif

#include <lua/lua.h>

#ifdef __cplusplus
}

// register all messages in this package to a Lua state
static int lua_protobuf_google_protobuf_open(lua_State *L);

// Message FileDescriptorSet
// registers the message type with Lua
int lua_protobuf_google_protobuf_FileDescriptorSet_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_FileDescriptorSet_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_FileDescriptorSet_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_FileDescriptorSet_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_FileDescriptorSet_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_FileDescriptorSet_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_FileDescriptorSet_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_FileDescriptorSet_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_FileDescriptorSet_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_FileDescriptorSet_size(lua_State *L);
// repeated message file = 1
int lua_protobuf_google_protobuf_FileDescriptorSet_clear_file(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorSet_get_file(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorSet_set_file(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorSet_rawget_file(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorSet_size_file(lua_State *L);

// end of message FileDescriptorSet

// Message FileDescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_FileDescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_FileDescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_FileDescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_FileDescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_FileDescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_FileDescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_FileDescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_FileDescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_FileDescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_FileDescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_has_name(lua_State *L);

// optional string package = 2
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_package(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_package(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_package(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_has_package(lua_State *L);

// repeated string dependency = 3
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_dependency(lua_State *L);

// repeated int32 public_dependency = 10
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_public_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_public_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_public_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_public_dependency(lua_State *L);

// repeated int32 weak_dependency = 11
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_weak_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_weak_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_weak_dependency(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_weak_dependency(lua_State *L);

// repeated message message_type = 4
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_message_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_message_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_message_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_rawget_message_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_message_type(lua_State *L);

// repeated message enum_type = 5
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_rawget_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_enum_type(lua_State *L);

// repeated message service = 6
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_service(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_service(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_service(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_rawget_service(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_service(lua_State *L);

// repeated message extension = 7
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_extension(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_extension(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_extension(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_rawget_extension(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_size_extension(lua_State *L);

// optional message options = 8
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_has_options(lua_State *L);

// optional message source_code_info = 9
int lua_protobuf_google_protobuf_FileDescriptorProto_clear_source_code_info(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_get_source_code_info(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_set_source_code_info(lua_State *L);
int lua_protobuf_google_protobuf_FileDescriptorProto_has_source_code_info(lua_State *L);

// end of message FileDescriptorProto

// Message DescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_DescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_DescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_DescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_DescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_DescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_DescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_DescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_DescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_DescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_DescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_DescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_has_name(lua_State *L);

// repeated message field = 2
int lua_protobuf_google_protobuf_DescriptorProto_clear_field(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_field(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_field(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_rawget_field(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_size_field(lua_State *L);

// repeated message extension = 6
int lua_protobuf_google_protobuf_DescriptorProto_clear_extension(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_extension(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_extension(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_rawget_extension(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_size_extension(lua_State *L);

// repeated message nested_type = 3
int lua_protobuf_google_protobuf_DescriptorProto_clear_nested_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_nested_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_nested_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_rawget_nested_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_size_nested_type(lua_State *L);

// repeated message enum_type = 4
int lua_protobuf_google_protobuf_DescriptorProto_clear_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_rawget_enum_type(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_size_enum_type(lua_State *L);

// repeated message extension_range = 5
int lua_protobuf_google_protobuf_DescriptorProto_clear_extension_range(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_extension_range(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_extension_range(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_rawget_extension_range(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_size_extension_range(lua_State *L);

// optional message options = 7
int lua_protobuf_google_protobuf_DescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_DescriptorProto_has_options(lua_State *L);

// end of message DescriptorProto

// Message FieldDescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_FieldDescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_FieldDescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_FieldDescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_FieldDescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_FieldDescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_FieldDescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_FieldDescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_FieldDescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_FieldDescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_name(lua_State *L);

// optional int32 number = 3
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_number(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_number(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_number(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_number(lua_State *L);

// optional enum label = 4
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_label(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_label(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_label(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_label(lua_State *L);

// optional enum type = 5
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_type(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_type(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_type(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_type(lua_State *L);

// optional string type_name = 6
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_type_name(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_type_name(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_type_name(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_type_name(lua_State *L);

// optional string extendee = 2
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_extendee(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_extendee(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_extendee(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_extendee(lua_State *L);

// optional string default_value = 7
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_default_value(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_default_value(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_default_value(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_default_value(lua_State *L);

// optional message options = 8
int lua_protobuf_google_protobuf_FieldDescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_FieldDescriptorProto_has_options(lua_State *L);

// end of message FieldDescriptorProto

// Message EnumDescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_EnumDescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_EnumDescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_EnumDescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_EnumDescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_EnumDescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_EnumDescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_EnumDescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_EnumDescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_EnumDescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_EnumDescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_EnumDescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_has_name(lua_State *L);

// repeated message value = 2
int lua_protobuf_google_protobuf_EnumDescriptorProto_clear_value(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_get_value(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_set_value(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_rawget_value(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_size_value(lua_State *L);

// optional message options = 3
int lua_protobuf_google_protobuf_EnumDescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_EnumDescriptorProto_has_options(lua_State *L);

// end of message EnumDescriptorProto

// Message EnumValueDescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_EnumValueDescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_has_name(lua_State *L);

// optional int32 number = 2
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_clear_number(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_get_number(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_set_number(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_has_number(lua_State *L);

// optional message options = 3
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueDescriptorProto_has_options(lua_State *L);

// end of message EnumValueDescriptorProto

// Message ServiceDescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_ServiceDescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_ServiceDescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_ServiceDescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_ServiceDescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_ServiceDescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_ServiceDescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_ServiceDescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_ServiceDescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_ServiceDescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_ServiceDescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_ServiceDescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_has_name(lua_State *L);

// repeated message method = 2
int lua_protobuf_google_protobuf_ServiceDescriptorProto_clear_method(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_get_method(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_set_method(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_rawget_method(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_size_method(lua_State *L);

// optional message options = 3
int lua_protobuf_google_protobuf_ServiceDescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_ServiceDescriptorProto_has_options(lua_State *L);

// end of message ServiceDescriptorProto

// Message MethodDescriptorProto
// registers the message type with Lua
int lua_protobuf_google_protobuf_MethodDescriptorProto_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_MethodDescriptorProto_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_MethodDescriptorProto_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_MethodDescriptorProto_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_MethodDescriptorProto_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_MethodDescriptorProto_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_MethodDescriptorProto_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_MethodDescriptorProto_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_MethodDescriptorProto_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_MethodDescriptorProto_size(lua_State *L);
// optional string name = 1
int lua_protobuf_google_protobuf_MethodDescriptorProto_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_get_name(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_set_name(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_has_name(lua_State *L);

// optional string input_type = 2
int lua_protobuf_google_protobuf_MethodDescriptorProto_clear_input_type(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_get_input_type(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_set_input_type(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_has_input_type(lua_State *L);

// optional string output_type = 3
int lua_protobuf_google_protobuf_MethodDescriptorProto_clear_output_type(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_get_output_type(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_set_output_type(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_has_output_type(lua_State *L);

// optional message options = 4
int lua_protobuf_google_protobuf_MethodDescriptorProto_clear_options(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_get_options(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_set_options(lua_State *L);
int lua_protobuf_google_protobuf_MethodDescriptorProto_has_options(lua_State *L);

// end of message MethodDescriptorProto

// Message FileOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_FileOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_FileOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_FileOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_FileOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_FileOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_FileOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_FileOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_FileOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_FileOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_FileOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_FileOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_FileOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_FileOptions_defaultKey(lua_State *L);
// optional string java_package = 1
int lua_protobuf_google_protobuf_FileOptions_clear_java_package(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_java_package(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_java_package(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_java_package(lua_State *L);

// optional string java_outer_classname = 8
int lua_protobuf_google_protobuf_FileOptions_clear_java_outer_classname(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_java_outer_classname(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_java_outer_classname(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_java_outer_classname(lua_State *L);

// optional bool java_multiple_files = 10
int lua_protobuf_google_protobuf_FileOptions_clear_java_multiple_files(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_java_multiple_files(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_java_multiple_files(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_java_multiple_files(lua_State *L);

// optional bool java_generate_equals_and_hash = 20
int lua_protobuf_google_protobuf_FileOptions_clear_java_generate_equals_and_hash(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_java_generate_equals_and_hash(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_java_generate_equals_and_hash(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_java_generate_equals_and_hash(lua_State *L);

// optional enum optimize_for = 9
int lua_protobuf_google_protobuf_FileOptions_clear_optimize_for(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_optimize_for(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_optimize_for(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_optimize_for(lua_State *L);

// optional string go_package = 11
int lua_protobuf_google_protobuf_FileOptions_clear_go_package(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_go_package(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_go_package(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_go_package(lua_State *L);

// optional bool cc_generic_services = 16
int lua_protobuf_google_protobuf_FileOptions_clear_cc_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_cc_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_cc_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_cc_generic_services(lua_State *L);

// optional bool java_generic_services = 17
int lua_protobuf_google_protobuf_FileOptions_clear_java_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_java_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_java_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_java_generic_services(lua_State *L);

// optional bool py_generic_services = 18
int lua_protobuf_google_protobuf_FileOptions_clear_py_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_py_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_py_generic_services(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_has_py_generic_services(lua_State *L);

// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_FileOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FileOptions_size_uninterpreted_option(lua_State *L);

// end of message FileOptions

// Message MessageOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_MessageOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_MessageOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_MessageOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_MessageOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_MessageOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_MessageOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_MessageOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_MessageOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_MessageOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_MessageOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_MessageOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_MessageOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_MessageOptions_defaultKey(lua_State *L);
// optional bool message_set_wire_format = 1
int lua_protobuf_google_protobuf_MessageOptions_clear_message_set_wire_format(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_get_message_set_wire_format(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_set_message_set_wire_format(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_has_message_set_wire_format(lua_State *L);

// optional bool no_standard_descriptor_accessor = 2
int lua_protobuf_google_protobuf_MessageOptions_clear_no_standard_descriptor_accessor(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_get_no_standard_descriptor_accessor(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_set_no_standard_descriptor_accessor(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_has_no_standard_descriptor_accessor(lua_State *L);

// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_MessageOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MessageOptions_size_uninterpreted_option(lua_State *L);

// end of message MessageOptions

// Message FieldOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_FieldOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_FieldOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_FieldOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_FieldOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_FieldOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_FieldOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_FieldOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_FieldOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_FieldOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_FieldOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_FieldOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_FieldOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_FieldOptions_defaultKey(lua_State *L);
// optional enum ctype = 1
int lua_protobuf_google_protobuf_FieldOptions_clear_ctype(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_ctype(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_ctype(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_has_ctype(lua_State *L);

// optional bool packed = 2
int lua_protobuf_google_protobuf_FieldOptions_clear_packed(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_packed(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_packed(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_has_packed(lua_State *L);

// optional bool lazy = 5
int lua_protobuf_google_protobuf_FieldOptions_clear_lazy(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_lazy(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_lazy(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_has_lazy(lua_State *L);

// optional bool deprecated = 3
int lua_protobuf_google_protobuf_FieldOptions_clear_deprecated(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_deprecated(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_deprecated(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_has_deprecated(lua_State *L);

// optional string experimental_map_key = 9
int lua_protobuf_google_protobuf_FieldOptions_clear_experimental_map_key(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_experimental_map_key(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_experimental_map_key(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_has_experimental_map_key(lua_State *L);

// optional bool weak = 10
int lua_protobuf_google_protobuf_FieldOptions_clear_weak(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_weak(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_weak(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_has_weak(lua_State *L);

// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_FieldOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_FieldOptions_size_uninterpreted_option(lua_State *L);

// end of message FieldOptions

// Message EnumOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_EnumOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_EnumOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_EnumOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_EnumOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_EnumOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_EnumOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_EnumOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_EnumOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_EnumOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_EnumOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_EnumOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_EnumOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_EnumOptions_defaultKey(lua_State *L);
// optional bool allow_alias = 2
int lua_protobuf_google_protobuf_EnumOptions_clear_allow_alias(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_get_allow_alias(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_set_allow_alias(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_has_allow_alias(lua_State *L);

// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_EnumOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumOptions_size_uninterpreted_option(lua_State *L);

// end of message EnumOptions

// Message EnumValueOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_EnumValueOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_EnumValueOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_EnumValueOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_EnumValueOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_EnumValueOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_EnumValueOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_EnumValueOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_EnumValueOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_EnumValueOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_EnumValueOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_EnumValueOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_EnumValueOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_EnumValueOptions_defaultKey(lua_State *L);
// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_EnumValueOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_EnumValueOptions_size_uninterpreted_option(lua_State *L);

// end of message EnumValueOptions

// Message ServiceOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_ServiceOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_ServiceOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_ServiceOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_ServiceOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_ServiceOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_ServiceOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_ServiceOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_ServiceOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_ServiceOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_ServiceOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_ServiceOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_ServiceOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_ServiceOptions_defaultKey(lua_State *L);
// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_ServiceOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_ServiceOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_ServiceOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_ServiceOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_ServiceOptions_size_uninterpreted_option(lua_State *L);

// end of message ServiceOptions

// Message MethodOptions
// registers the message type with Lua
int lua_protobuf_google_protobuf_MethodOptions_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_MethodOptions_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_MethodOptions_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_MethodOptions_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_MethodOptions_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_MethodOptions_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_MethodOptions_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_MethodOptions_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_MethodOptions_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_MethodOptions_size(lua_State *L);
// return syncoption
int lua_protobuf_google_protobuf_MethodOptions_getSyncOption(lua_State *L);

// clear syncoption
int lua_protobuf_google_protobuf_MethodOptions_clearSyncOption(lua_State *L);

// return repeated default key
int lua_protobuf_google_protobuf_MethodOptions_defaultKey(lua_State *L);
// repeated message uninterpreted_option = 999
int lua_protobuf_google_protobuf_MethodOptions_clear_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MethodOptions_get_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MethodOptions_set_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MethodOptions_rawget_uninterpreted_option(lua_State *L);
int lua_protobuf_google_protobuf_MethodOptions_size_uninterpreted_option(lua_State *L);

// end of message MethodOptions

// Message UninterpretedOption
// registers the message type with Lua
int lua_protobuf_google_protobuf_UninterpretedOption_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_UninterpretedOption_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_UninterpretedOption_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_UninterpretedOption_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_UninterpretedOption_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_UninterpretedOption_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_UninterpretedOption_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_UninterpretedOption_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_UninterpretedOption_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_UninterpretedOption_size(lua_State *L);
// repeated message name = 2
int lua_protobuf_google_protobuf_UninterpretedOption_clear_name(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_name(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_name(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_rawget_name(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_size_name(lua_State *L);

// optional string identifier_value = 3
int lua_protobuf_google_protobuf_UninterpretedOption_clear_identifier_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_identifier_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_identifier_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_has_identifier_value(lua_State *L);

// optional uint64 positive_int_value = 4
int lua_protobuf_google_protobuf_UninterpretedOption_clear_positive_int_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_positive_int_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_positive_int_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_has_positive_int_value(lua_State *L);

// optional int64 negative_int_value = 5
int lua_protobuf_google_protobuf_UninterpretedOption_clear_negative_int_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_negative_int_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_negative_int_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_has_negative_int_value(lua_State *L);

// optional double double_value = 6
int lua_protobuf_google_protobuf_UninterpretedOption_clear_double_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_double_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_double_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_has_double_value(lua_State *L);

// optional bytes string_value = 7
int lua_protobuf_google_protobuf_UninterpretedOption_clear_string_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_string_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_string_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_has_string_value(lua_State *L);

// optional string aggregate_value = 8
int lua_protobuf_google_protobuf_UninterpretedOption_clear_aggregate_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_get_aggregate_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_set_aggregate_value(lua_State *L);
int lua_protobuf_google_protobuf_UninterpretedOption_has_aggregate_value(lua_State *L);

// end of message UninterpretedOption

// Message SourceCodeInfo
// registers the message type with Lua
int lua_protobuf_google_protobuf_SourceCodeInfo_open(lua_State *L);


// push a reference of the message to the Lua stack
// the 3rd and 4th arguments define a callback that can be invoked just before Lua
// garbage collects the message. If the 3rd argument is NULL, Lua will *NOT* free
// memory. If the second argument points to a function, that function is called when
// Lua garbage collects the object. The function is sent a pointer to the message being
// collected and the 4th argument to this function. If the function returns true,
// Lua will free the memory. If false (0), Lua will not free the memory.
void lua_protobuf_google_protobuf_SourceCodeInfo_(lua_State *L, ::google::protobuf::Message* msg, bool needDel = true);

// The following functions are called by Lua. Many people will not need them,
// but they are exported for those that do.

// constructor called from Lua
int lua_protobuf_google_protobuf_SourceCodeInfo_new(lua_State *L);

// return operation =
int lua_protobuf_google_protobuf_SourceCodeInfo_assign(lua_State *L);
// return ::google::Messsage*
int lua_protobuf_google_protobuf_SourceCodeInfo_data(lua_State *L);

// obtain instance from a serialized string
int lua_protobuf_google_protobuf_SourceCodeInfo_parsefromstring(lua_State *L);

// garbage collects message instance in Lua
int lua_protobuf_google_protobuf_SourceCodeInfo_gc(lua_State *L);

// obtain serialized representation of instance
int lua_protobuf_google_protobuf_SourceCodeInfo_serialized(lua_State *L);

// clear all fields in the message
int lua_protobuf_google_protobuf_SourceCodeInfo_clear(lua_State *L);

// return size of the message
int lua_protobuf_google_protobuf_SourceCodeInfo_size(lua_State *L);
// repeated message location = 1
int lua_protobuf_google_protobuf_SourceCodeInfo_clear_location(lua_State *L);
int lua_protobuf_google_protobuf_SourceCodeInfo_get_location(lua_State *L);
int lua_protobuf_google_protobuf_SourceCodeInfo_set_location(lua_State *L);
int lua_protobuf_google_protobuf_SourceCodeInfo_rawget_location(lua_State *L);
int lua_protobuf_google_protobuf_SourceCodeInfo_size_location(lua_State *L);

// end of message SourceCodeInfo

#endif