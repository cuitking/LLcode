// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packetSystem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packetSystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* EmptyPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListenConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListenConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitServerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitServerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientConnectGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientConnectGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeServerGuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeServerGuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatePlayerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatePlayerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewIncomingConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewIncomingConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionRequestAccepted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionRequestAccepted_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionAttemptFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionAttemptFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisconnectionNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisconnectionNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginError_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutServerDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutServerDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClockDifferential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClockDifferential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bulletin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bulletin_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionCheckFaild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionCheckFaild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReInitProxy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReInitProxy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PakCheckCodeQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PakCheckCodeQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* PakCheckCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PakCheckCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PakCheckCodeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PakCheckCodeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PakCheckFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PakCheckFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitPveGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitPveGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeIncPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeIncPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDump_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemKeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemKeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyBalanceAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyBalanceAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyBalanceDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyBalanceDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitUdpProxy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitUdpProxy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGuidNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGuidNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPacketStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPacketStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectModuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectModuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncItemLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncItemLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneString_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packetSystem_2eproto() {
  protobuf_AddDesc_packetSystem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packetSystem.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyPacket_descriptor_ = file->message_type(0);
  static const int EmptyPacket_offsets_[1] = {
  };
  EmptyPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyPacket_descriptor_,
      EmptyPacket::default_instance_,
      EmptyPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyPacket));
  Update_descriptor_ = file->message_type(1);
  static const int Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, delta_),
  };
  Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Update_descriptor_,
      Update::default_instance_,
      Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Update));
  ListenConfig_descriptor_ = file->message_type(2);
  static const int ListenConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, listenip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, listenport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, maxconnection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, udp_),
  };
  ListenConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListenConfig_descriptor_,
      ListenConfig::default_instance_,
      ListenConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListenConfig));
  InitServer_descriptor_ = file->message_type(3);
  static const int InitServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, serverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, connectiontype_),
  };
  InitServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitServer_descriptor_,
      InitServer::default_instance_,
      InitServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitServer));
  SetServerInfo_descriptor_ = file->message_type(4);
  static const int SetServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerInfo, serverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerInfo, maxplayercount_),
  };
  SetServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetServerInfo_descriptor_,
      SetServerInfo::default_instance_,
      SetServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetServerInfo));
  InitServerResponse_descriptor_ = file->message_type(5);
  static const int InitServerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServerResponse, remoteservers_),
  };
  InitServerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitServerResponse_descriptor_,
      InitServerResponse::default_instance_,
      InitServerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitServerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitServerResponse));
  ServerActive_descriptor_ = file->message_type(6);
  static const int ServerActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerActive, remoteserver_),
  };
  ServerActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerActive_descriptor_,
      ServerActive::default_instance_,
      ServerActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerActive));
  InitGate_descriptor_ = file->message_type(7);
  static const int InitGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGate, gateaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGate, gateport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGate, gateguid_),
  };
  InitGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitGate_descriptor_,
      InitGate::default_instance_,
      InitGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitGate));
  ClientConnectGate_descriptor_ = file->message_type(8);
  static const int ClientConnectGate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, gateaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, gateport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, newguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, waitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, securitykey_),
  };
  ClientConnectGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientConnectGate_descriptor_,
      ClientConnectGate::default_instance_,
      ClientConnectGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientConnectGate));
  ChangeServerGuid_descriptor_ = file->message_type(9);
  static const int ChangeServerGuid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeServerGuid, newguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeServerGuid, serverguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeServerGuid, groupid_),
  };
  ChangeServerGuid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeServerGuid_descriptor_,
      ChangeServerGuid::default_instance_,
      ChangeServerGuid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeServerGuid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeServerGuid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeServerGuid));
  GatePlayerCount_descriptor_ = file->message_type(10);
  static const int GatePlayerCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatePlayerCount, gateguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatePlayerCount, playercount_),
  };
  GatePlayerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatePlayerCount_descriptor_,
      GatePlayerCount::default_instance_,
      GatePlayerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatePlayerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatePlayerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatePlayerCount));
  NewIncomingConnection_descriptor_ = file->message_type(11);
  static const int NewIncomingConnection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewIncomingConnection, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewIncomingConnection, remoteguid_),
  };
  NewIncomingConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewIncomingConnection_descriptor_,
      NewIncomingConnection::default_instance_,
      NewIncomingConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewIncomingConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewIncomingConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewIncomingConnection));
  ConnectionRequestAccepted_descriptor_ = file->message_type(12);
  static const int ConnectionRequestAccepted_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequestAccepted, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequestAccepted, remoteguid_),
  };
  ConnectionRequestAccepted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionRequestAccepted_descriptor_,
      ConnectionRequestAccepted::default_instance_,
      ConnectionRequestAccepted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequestAccepted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequestAccepted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionRequestAccepted));
  ConnectionAttemptFailed_descriptor_ = file->message_type(13);
  static const int ConnectionAttemptFailed_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionAttemptFailed, remoteguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionAttemptFailed, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionAttemptFailed, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionAttemptFailed, connectiontype_),
  };
  ConnectionAttemptFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionAttemptFailed_descriptor_,
      ConnectionAttemptFailed::default_instance_,
      ConnectionAttemptFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionAttemptFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionAttemptFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionAttemptFailed));
  DisconnectionNotification_descriptor_ = file->message_type(14);
  static const int DisconnectionNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectionNotification, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectionNotification, remoteguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectionNotification, bpassive_),
  };
  DisconnectionNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisconnectionNotification_descriptor_,
      DisconnectionNotification::default_instance_,
      DisconnectionNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectionNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectionNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisconnectionNotification));
  LoginError_descriptor_ = file->message_type(15);
  static const int LoginError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginError, playerguid_),
  };
  LoginError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginError_descriptor_,
      LoginError::default_instance_,
      LoginError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginError));
  FlushConfig_descriptor_ = file->message_type(16);
  static const int FlushConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushConfig, flushmodule_),
  };
  FlushConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushConfig_descriptor_,
      FlushConfig::default_instance_,
      FlushConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushConfig));
  ShutServerDown_descriptor_ = file->message_type(17);
  static const int ShutServerDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutServerDown, aftertime_),
  };
  ShutServerDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShutServerDown_descriptor_,
      ShutServerDown::default_instance_,
      ShutServerDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutServerDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutServerDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShutServerDown));
  ClockDifferential_descriptor_ = file->message_type(18);
  static const int ClockDifferential_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockDifferential, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockDifferential, synctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockDifferential, guid_),
  };
  ClockDifferential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClockDifferential_descriptor_,
      ClockDifferential::default_instance_,
      ClockDifferential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockDifferential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockDifferential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClockDifferential));
  Bulletin_descriptor_ = file->message_type(19);
  static const int Bulletin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bulletin, content_),
  };
  Bulletin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bulletin_descriptor_,
      Bulletin::default_instance_,
      Bulletin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bulletin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bulletin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bulletin));
  VersionCheck_descriptor_ = file->message_type(20);
  static const int VersionCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCheck, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCheck, guid_),
  };
  VersionCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionCheck_descriptor_,
      VersionCheck::default_instance_,
      VersionCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionCheck));
  VersionCheckFaild_descriptor_ = file->message_type(21);
  static const int VersionCheckFaild_offsets_[1] = {
  };
  VersionCheckFaild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionCheckFaild_descriptor_,
      VersionCheckFaild::default_instance_,
      VersionCheckFaild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCheckFaild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCheckFaild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionCheckFaild));
  ProxyMessage_descriptor_ = file->message_type(22);
  static const int ProxyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMessage, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMessage, status_),
  };
  ProxyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyMessage_descriptor_,
      ProxyMessage::default_instance_,
      ProxyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyMessage));
  ReInitProxy_descriptor_ = file->message_type(23);
  static const int ReInitProxy_offsets_[1] = {
  };
  ReInitProxy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReInitProxy_descriptor_,
      ReInitProxy::default_instance_,
      ReInitProxy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReInitProxy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReInitProxy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReInitProxy));
  PakCheckCodeQuery_descriptor_ = file->message_type(24);
  static const int PakCheckCodeQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCodeQuery, version_),
  };
  PakCheckCodeQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PakCheckCodeQuery_descriptor_,
      PakCheckCodeQuery::default_instance_,
      PakCheckCodeQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCodeQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCodeQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PakCheckCodeQuery));
  PakCheckCode_descriptor_ = file->message_type(25);
  static const int PakCheckCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCode, pakname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCode, checkcode_),
  };
  PakCheckCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PakCheckCode_descriptor_,
      PakCheckCode::default_instance_,
      PakCheckCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PakCheckCode));
  PakCheckCodeRes_descriptor_ = file->message_type(26);
  static const int PakCheckCodeRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCodeRes, pakcheckcodes_),
  };
  PakCheckCodeRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PakCheckCodeRes_descriptor_,
      PakCheckCodeRes::default_instance_,
      PakCheckCodeRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCodeRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckCodeRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PakCheckCodeRes));
  PakCheckFailed_descriptor_ = file->message_type(27);
  static const int PakCheckFailed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckFailed, paknames_),
  };
  PakCheckFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PakCheckFailed_descriptor_,
      PakCheckFailed::default_instance_,
      PakCheckFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PakCheckFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PakCheckFailed));
  InitPveGameServer_descriptor_ = file->message_type(28);
  static const int InitPveGameServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitPveGameServer, maxplayercount_),
  };
  InitPveGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitPveGameServer_descriptor_,
      InitPveGameServer::default_instance_,
      InitPveGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitPveGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitPveGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitPveGameServer));
  IncPlayer_descriptor_ = file->message_type(29);
  static const int IncPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncPlayer, playerguid_),
  };
  IncPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncPlayer_descriptor_,
      IncPlayer::default_instance_,
      IncPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncPlayer));
  DeIncPlayer_descriptor_ = file->message_type(30);
  static const int DeIncPlayer_offsets_[1] = {
  };
  DeIncPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeIncPlayer_descriptor_,
      DeIncPlayer::default_instance_,
      DeIncPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeIncPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeIncPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeIncPlayer));
  ClientLog_descriptor_ = file->message_type(31);
  static const int ClientLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLog, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLog, machineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLog, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLog, memorystatus_),
  };
  ClientLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLog_descriptor_,
      ClientLog::default_instance_,
      ClientLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLog));
  ClientDump_descriptor_ = file->message_type(32);
  static const int ClientDump_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDump, machineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDump, dumpname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDump, dumpcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDump, memorystatus_),
  };
  ClientDump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDump_descriptor_,
      ClientDump::default_instance_,
      ClientDump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDump));
  SystemKeepalive_descriptor_ = file->message_type(33);
  static const int SystemKeepalive_offsets_[1] = {
  };
  SystemKeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemKeepalive_descriptor_,
      SystemKeepalive::default_instance_,
      SystemKeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemKeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemKeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemKeepalive));
  ProxyBalanceAdd_descriptor_ = file->message_type(34);
  static const int ProxyBalanceAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyBalanceAdd, playerguid_),
  };
  ProxyBalanceAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyBalanceAdd_descriptor_,
      ProxyBalanceAdd::default_instance_,
      ProxyBalanceAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyBalanceAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyBalanceAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyBalanceAdd));
  ProxyBalanceDel_descriptor_ = file->message_type(35);
  static const int ProxyBalanceDel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyBalanceDel, playerguid_),
  };
  ProxyBalanceDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyBalanceDel_descriptor_,
      ProxyBalanceDel::default_instance_,
      ProxyBalanceDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyBalanceDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyBalanceDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyBalanceDel));
  InitUdpProxy_descriptor_ = file->message_type(36);
  static const int InitUdpProxy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitUdpProxy, udpproxyhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitUdpProxy, udpproxyport_),
  };
  InitUdpProxy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitUdpProxy_descriptor_,
      InitUdpProxy::default_instance_,
      InitUdpProxy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitUdpProxy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitUdpProxy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitUdpProxy));
  PlayerGuidNotify_descriptor_ = file->message_type(37);
  static const int PlayerGuidNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, clientguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, securitykey_),
  };
  PlayerGuidNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGuidNotify_descriptor_,
      PlayerGuidNotify::default_instance_,
      PlayerGuidNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuidNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGuidNotify));
  SetPacketStat_descriptor_ = file->message_type(38);
  static const int SetPacketStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPacketStat, needstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPacketStat, needstattime_),
  };
  SetPacketStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPacketStat_descriptor_,
      SetPacketStat::default_instance_,
      SetPacketStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPacketStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPacketStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPacketStat));
  UploadFileReq_descriptor_ = file->message_type(39);
  static const int UploadFileReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReq, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReq, rolename_),
  };
  UploadFileReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileReq_descriptor_,
      UploadFileReq::default_instance_,
      UploadFileReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileReq));
  UploadFileReply_descriptor_ = file->message_type(40);
  static const int UploadFileReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReply, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReply, data_),
  };
  UploadFileReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileReply_descriptor_,
      UploadFileReply::default_instance_,
      UploadFileReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileReply));
  CollectModuleInfo_descriptor_ = file->message_type(41);
  static const int CollectModuleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectModuleInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectModuleInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectModuleInfo, modulepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectModuleInfo, time_),
  };
  CollectModuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectModuleInfo_descriptor_,
      CollectModuleInfo::default_instance_,
      CollectModuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectModuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectModuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectModuleInfo));
  SyncItemLock_descriptor_ = file->message_type(42);
  static const int SyncItemLock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncItemLock, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncItemLock, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncItemLock, lock_),
  };
  SyncItemLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncItemLock_descriptor_,
      SyncItemLock::default_instance_,
      SyncItemLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncItemLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncItemLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncItemLock));
  OneString_descriptor_ = file->message_type(43);
  static const int OneString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, str_),
  };
  OneString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneString_descriptor_,
      OneString::default_instance_,
      OneString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneString));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packetSystem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyPacket_descriptor_, &EmptyPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Update_descriptor_, &Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListenConfig_descriptor_, &ListenConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitServer_descriptor_, &InitServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetServerInfo_descriptor_, &SetServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitServerResponse_descriptor_, &InitServerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerActive_descriptor_, &ServerActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitGate_descriptor_, &InitGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientConnectGate_descriptor_, &ClientConnectGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeServerGuid_descriptor_, &ChangeServerGuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatePlayerCount_descriptor_, &GatePlayerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewIncomingConnection_descriptor_, &NewIncomingConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionRequestAccepted_descriptor_, &ConnectionRequestAccepted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionAttemptFailed_descriptor_, &ConnectionAttemptFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisconnectionNotification_descriptor_, &DisconnectionNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginError_descriptor_, &LoginError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushConfig_descriptor_, &FlushConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShutServerDown_descriptor_, &ShutServerDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClockDifferential_descriptor_, &ClockDifferential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bulletin_descriptor_, &Bulletin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionCheck_descriptor_, &VersionCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionCheckFaild_descriptor_, &VersionCheckFaild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyMessage_descriptor_, &ProxyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReInitProxy_descriptor_, &ReInitProxy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PakCheckCodeQuery_descriptor_, &PakCheckCodeQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PakCheckCode_descriptor_, &PakCheckCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PakCheckCodeRes_descriptor_, &PakCheckCodeRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PakCheckFailed_descriptor_, &PakCheckFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitPveGameServer_descriptor_, &InitPveGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncPlayer_descriptor_, &IncPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeIncPlayer_descriptor_, &DeIncPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLog_descriptor_, &ClientLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDump_descriptor_, &ClientDump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemKeepalive_descriptor_, &SystemKeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyBalanceAdd_descriptor_, &ProxyBalanceAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyBalanceDel_descriptor_, &ProxyBalanceDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitUdpProxy_descriptor_, &InitUdpProxy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGuidNotify_descriptor_, &PlayerGuidNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPacketStat_descriptor_, &SetPacketStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileReq_descriptor_, &UploadFileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileReply_descriptor_, &UploadFileReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectModuleInfo_descriptor_, &CollectModuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncItemLock_descriptor_, &SyncItemLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneString_descriptor_, &OneString::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packetSystem_2eproto() {
  delete EmptyPacket::default_instance_;
  delete EmptyPacket_reflection_;
  delete Update::default_instance_;
  delete Update_reflection_;
  delete ListenConfig::default_instance_;
  delete ListenConfig_reflection_;
  delete InitServer::default_instance_;
  delete InitServer_reflection_;
  delete SetServerInfo::default_instance_;
  delete SetServerInfo_reflection_;
  delete InitServerResponse::default_instance_;
  delete InitServerResponse_reflection_;
  delete ServerActive::default_instance_;
  delete ServerActive_reflection_;
  delete InitGate::default_instance_;
  delete InitGate_reflection_;
  delete ClientConnectGate::default_instance_;
  delete ClientConnectGate_reflection_;
  delete ChangeServerGuid::default_instance_;
  delete ChangeServerGuid_reflection_;
  delete GatePlayerCount::default_instance_;
  delete GatePlayerCount_reflection_;
  delete NewIncomingConnection::default_instance_;
  delete NewIncomingConnection_reflection_;
  delete ConnectionRequestAccepted::default_instance_;
  delete ConnectionRequestAccepted_reflection_;
  delete ConnectionAttemptFailed::default_instance_;
  delete ConnectionAttemptFailed_reflection_;
  delete DisconnectionNotification::default_instance_;
  delete DisconnectionNotification_reflection_;
  delete LoginError::default_instance_;
  delete LoginError_reflection_;
  delete FlushConfig::default_instance_;
  delete FlushConfig_reflection_;
  delete ShutServerDown::default_instance_;
  delete ShutServerDown_reflection_;
  delete ClockDifferential::default_instance_;
  delete ClockDifferential_reflection_;
  delete Bulletin::default_instance_;
  delete Bulletin_reflection_;
  delete VersionCheck::default_instance_;
  delete VersionCheck_reflection_;
  delete VersionCheckFaild::default_instance_;
  delete VersionCheckFaild_reflection_;
  delete ProxyMessage::default_instance_;
  delete ProxyMessage_reflection_;
  delete ReInitProxy::default_instance_;
  delete ReInitProxy_reflection_;
  delete PakCheckCodeQuery::default_instance_;
  delete PakCheckCodeQuery_reflection_;
  delete PakCheckCode::default_instance_;
  delete PakCheckCode_reflection_;
  delete PakCheckCodeRes::default_instance_;
  delete PakCheckCodeRes_reflection_;
  delete PakCheckFailed::default_instance_;
  delete PakCheckFailed_reflection_;
  delete InitPveGameServer::default_instance_;
  delete InitPveGameServer_reflection_;
  delete IncPlayer::default_instance_;
  delete IncPlayer_reflection_;
  delete DeIncPlayer::default_instance_;
  delete DeIncPlayer_reflection_;
  delete ClientLog::default_instance_;
  delete ClientLog_reflection_;
  delete ClientDump::default_instance_;
  delete ClientDump_reflection_;
  delete SystemKeepalive::default_instance_;
  delete SystemKeepalive_reflection_;
  delete ProxyBalanceAdd::default_instance_;
  delete ProxyBalanceAdd_reflection_;
  delete ProxyBalanceDel::default_instance_;
  delete ProxyBalanceDel_reflection_;
  delete InitUdpProxy::default_instance_;
  delete InitUdpProxy_reflection_;
  delete PlayerGuidNotify::default_instance_;
  delete PlayerGuidNotify_reflection_;
  delete SetPacketStat::default_instance_;
  delete SetPacketStat_reflection_;
  delete UploadFileReq::default_instance_;
  delete UploadFileReq_reflection_;
  delete UploadFileReply::default_instance_;
  delete UploadFileReply_reflection_;
  delete CollectModuleInfo::default_instance_;
  delete CollectModuleInfo_reflection_;
  delete SyncItemLock::default_instance_;
  delete SyncItemLock_reflection_;
  delete OneString::default_instance_;
  delete OneString_reflection_;
}

void protobuf_AddDesc_packetSystem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_connectionType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022packetSystem.proto\022\002pb\032\024connectionType"
    ".proto\"\r\n\013EmptyPacket\"$\n\006Update\022\013\n\003now\030\001"
    " \001(\r\022\r\n\005delta\030\002 \001(\r\"\213\001\n\014ListenConfig\022+\n\016"
    "connectionType\030\001 \001(\0162\023.pb.EConnectionTyp"
    "e\022\020\n\010listenIP\030\002 \001(\t\022\022\n\nlistenPort\030\003 \001(\005\022"
    "\025\n\rmaxConnection\030\004 \001(\005\022\021\n\003udp\030\005 \001(\010:\004tru"
    "e\"\247\001\n\nInitServer\022!\n\007servers\030\001 \003(\0132\020.pb.L"
    "istenConfig\022!\n\007clients\030\002 \003(\0132\020.pb.Listen"
    "Config\022\022\n\nserverGuid\030\003 \001(\r\022\022\n\nserverName"
    "\030\004 \001(\t\022+\n\016connectionType\030\005 \001(\0162\023.pb.ECon"
    "nectionType\"^\n\rSetServerInfo\022\022\n\nserverGu"
    "id\030\001 \001(\r\022\022\n\nserverName\030\002 \001(\t\022\r\n\005level\030\003 "
    "\001(\005\022\026\n\016maxPlayerCount\030\004 \001(\005\"=\n\022InitServe"
    "rResponse\022\'\n\rremoteServers\030\001 \003(\0132\020.pb.Li"
    "stenConfig\"6\n\014ServerActive\022&\n\014remoteServ"
    "er\030\001 \001(\0132\020.pb.ListenConfig\"C\n\010InitGate\022\023"
    "\n\013gateAddress\030\001 \001(\t\022\020\n\010gatePort\030\002 \001(\005\022\020\n"
    "\010gateGuid\030\003 \001(\r\"q\n\021ClientConnectGate\022\023\n\013"
    "gateAddress\030\001 \001(\t\022\020\n\010gatePort\030\002 \001(\005\022\017\n\007n"
    "ewGuid\030\003 \001(\r\022\017\n\007waitNum\030\004 \001(\r\022\023\n\013securit"
    "yKey\030\005 \001(\014\"H\n\020ChangeServerGuid\022\017\n\007newGui"
    "d\030\001 \001(\r\022\022\n\nserverGuid\030\002 \001(\r\022\017\n\007groupID\030\003"
    " \001(\r\"8\n\017GatePlayerCount\022\020\n\010gateGuid\030\001 \001("
    "\r\022\023\n\013playerCount\030\002 \001(\005\"X\n\025NewIncomingCon"
    "nection\022+\n\016connectionType\030\001 \001(\0162\023.pb.ECo"
    "nnectionType\022\022\n\nremoteGuid\030\002 \001(\r\"\\\n\031Conn"
    "ectionRequestAccepted\022+\n\016connectionType\030"
    "\001 \001(\0162\023.pb.EConnectionType\022\022\n\nremoteGuid"
    "\030\002 \001(\r\"t\n\027ConnectionAttemptFailed\022\022\n\nrem"
    "oteGuid\030\001 \001(\r\022\n\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022"
    "+\n\016connectionType\030\004 \001(\0162\023.pb.EConnection"
    "Type\"u\n\031DisconnectionNotification\022+\n\016con"
    "nectionType\030\001 \001(\0162\023.pb.EConnectionType\022\022"
    "\n\nremoteGuid\030\002 \001(\r\022\027\n\010bPassive\030\003 \001(\010:\005fa"
    "lse\" \n\nLoginError\022\022\n\nplayerGuid\030\001 \001(\r\"\"\n"
    "\013FlushConfig\022\023\n\013flushModule\030\001 \001(\t\"#\n\016Shu"
    "tServerDown\022\021\n\tafterTime\030\001 \001(\005\"F\n\021ClockD"
    "ifferential\022\021\n\tbeginTime\030\001 \001(\r\022\020\n\010syncTi"
    "me\030\002 \001(\r\022\014\n\004guid\030\003 \001(\r\"\033\n\010Bulletin\022\017\n\007co"
    "ntent\030\001 \001(\t\"-\n\014VersionCheck\022\017\n\007version\030\001"
    " \001(\t\022\014\n\004guid\030\002 \001(\r\"\023\n\021VersionCheckFaild\""
    "2\n\014ProxyMessage\022\022\n\nplayerGuid\030\001 \001(\r\022\016\n\006s"
    "tatus\030\002 \001(\010\"\r\n\013ReInitProxy\"$\n\021PakCheckCo"
    "deQuery\022\017\n\007version\030\001 \001(\t\"2\n\014PakCheckCode"
    "\022\017\n\007pakName\030\001 \001(\t\022\021\n\tcheckCode\030\002 \001(\t\":\n\017"
    "PakCheckCodeRes\022\'\n\rpakCheckCodes\030\001 \003(\0132\020"
    ".pb.PakCheckCode\"\"\n\016PakCheckFailed\022\020\n\010pa"
    "kNames\030\001 \003(\t\"+\n\021InitPveGameServer\022\026\n\016max"
    "PlayerCount\030\001 \001(\005\"\037\n\tIncPlayer\022\022\n\nplayer"
    "Guid\030\001 \001(\r\"\r\n\013DeIncPlayer\"T\n\tClientLog\022\r"
    "\n\005error\030\001 \002(\010\022\021\n\tmachineID\030\002 \002(\t\022\017\n\007cont"
    "ent\030\003 \002(\t\022\024\n\014memoryStatus\030\004 \002(\t\"\\\n\nClien"
    "tDump\022\021\n\tmachineID\030\001 \002(\t\022\020\n\010dumpName\030\002 \002"
    "(\t\022\023\n\013dumpContent\030\003 \002(\014\022\024\n\014memoryStatus\030"
    "\004 \002(\t\"\021\n\017SystemKeepalive\"%\n\017ProxyBalance"
    "Add\022\022\n\nplayerGuid\030\001 \001(\r\"%\n\017ProxyBalanceD"
    "el\022\022\n\nplayerGuid\030\001 \001(\r\":\n\014InitUdpProxy\022\024"
    "\n\014udpProxyHost\030\001 \001(\t\022\024\n\014udpProxyPort\030\002 \001"
    "(\005\"f\n\020PlayerGuidNotify\022\022\n\nclientGuid\030\001 \001"
    "(\r\022\013\n\003uid\030\002 \001(\014\022\r\n\005token\030\003 \001(\014\022\r\n\005robot\030"
    "\004 \001(\005\022\023\n\013securityKey\030\005 \001(\014\"7\n\rSetPacketS"
    "tat\022\020\n\010needStat\030\001 \001(\010\022\024\n\014needStatTime\030\002 "
    "\001(\010\"3\n\rUploadFileReq\022\020\n\010fileName\030\001 \001(\t\022\020"
    "\n\010roleName\030\002 \001(\t\"1\n\017UploadFileReply\022\020\n\010r"
    "oleName\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\"U\n\021CollectMo"
    "duleInfo\022\020\n\010playerID\030\001 \001(\r\022\014\n\004sign\030\002 \001(\014"
    "\022\022\n\nmodulePath\030\003 \001(\014\022\014\n\004time\030\004 \001(\r\"E\n\014Sy"
    "ncItemLock\022\017\n\007account\030\001 \001(\t\022\020\n\010playerID\030"
    "\002 \001(\r\022\022\n\004lock\030\003 \001(\010:\004true\"\030\n\tOneString\022\013"
    "\n\003str\030\001 \001(\t", 2771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packetSystem.proto", &protobuf_RegisterTypes);
  EmptyPacket::default_instance_ = new EmptyPacket();
  Update::default_instance_ = new Update();
  ListenConfig::default_instance_ = new ListenConfig();
  InitServer::default_instance_ = new InitServer();
  SetServerInfo::default_instance_ = new SetServerInfo();
  InitServerResponse::default_instance_ = new InitServerResponse();
  ServerActive::default_instance_ = new ServerActive();
  InitGate::default_instance_ = new InitGate();
  ClientConnectGate::default_instance_ = new ClientConnectGate();
  ChangeServerGuid::default_instance_ = new ChangeServerGuid();
  GatePlayerCount::default_instance_ = new GatePlayerCount();
  NewIncomingConnection::default_instance_ = new NewIncomingConnection();
  ConnectionRequestAccepted::default_instance_ = new ConnectionRequestAccepted();
  ConnectionAttemptFailed::default_instance_ = new ConnectionAttemptFailed();
  DisconnectionNotification::default_instance_ = new DisconnectionNotification();
  LoginError::default_instance_ = new LoginError();
  FlushConfig::default_instance_ = new FlushConfig();
  ShutServerDown::default_instance_ = new ShutServerDown();
  ClockDifferential::default_instance_ = new ClockDifferential();
  Bulletin::default_instance_ = new Bulletin();
  VersionCheck::default_instance_ = new VersionCheck();
  VersionCheckFaild::default_instance_ = new VersionCheckFaild();
  ProxyMessage::default_instance_ = new ProxyMessage();
  ReInitProxy::default_instance_ = new ReInitProxy();
  PakCheckCodeQuery::default_instance_ = new PakCheckCodeQuery();
  PakCheckCode::default_instance_ = new PakCheckCode();
  PakCheckCodeRes::default_instance_ = new PakCheckCodeRes();
  PakCheckFailed::default_instance_ = new PakCheckFailed();
  InitPveGameServer::default_instance_ = new InitPveGameServer();
  IncPlayer::default_instance_ = new IncPlayer();
  DeIncPlayer::default_instance_ = new DeIncPlayer();
  ClientLog::default_instance_ = new ClientLog();
  ClientDump::default_instance_ = new ClientDump();
  SystemKeepalive::default_instance_ = new SystemKeepalive();
  ProxyBalanceAdd::default_instance_ = new ProxyBalanceAdd();
  ProxyBalanceDel::default_instance_ = new ProxyBalanceDel();
  InitUdpProxy::default_instance_ = new InitUdpProxy();
  PlayerGuidNotify::default_instance_ = new PlayerGuidNotify();
  SetPacketStat::default_instance_ = new SetPacketStat();
  UploadFileReq::default_instance_ = new UploadFileReq();
  UploadFileReply::default_instance_ = new UploadFileReply();
  CollectModuleInfo::default_instance_ = new CollectModuleInfo();
  SyncItemLock::default_instance_ = new SyncItemLock();
  OneString::default_instance_ = new OneString();
  EmptyPacket::default_instance_->InitAsDefaultInstance();
  Update::default_instance_->InitAsDefaultInstance();
  ListenConfig::default_instance_->InitAsDefaultInstance();
  InitServer::default_instance_->InitAsDefaultInstance();
  SetServerInfo::default_instance_->InitAsDefaultInstance();
  InitServerResponse::default_instance_->InitAsDefaultInstance();
  ServerActive::default_instance_->InitAsDefaultInstance();
  InitGate::default_instance_->InitAsDefaultInstance();
  ClientConnectGate::default_instance_->InitAsDefaultInstance();
  ChangeServerGuid::default_instance_->InitAsDefaultInstance();
  GatePlayerCount::default_instance_->InitAsDefaultInstance();
  NewIncomingConnection::default_instance_->InitAsDefaultInstance();
  ConnectionRequestAccepted::default_instance_->InitAsDefaultInstance();
  ConnectionAttemptFailed::default_instance_->InitAsDefaultInstance();
  DisconnectionNotification::default_instance_->InitAsDefaultInstance();
  LoginError::default_instance_->InitAsDefaultInstance();
  FlushConfig::default_instance_->InitAsDefaultInstance();
  ShutServerDown::default_instance_->InitAsDefaultInstance();
  ClockDifferential::default_instance_->InitAsDefaultInstance();
  Bulletin::default_instance_->InitAsDefaultInstance();
  VersionCheck::default_instance_->InitAsDefaultInstance();
  VersionCheckFaild::default_instance_->InitAsDefaultInstance();
  ProxyMessage::default_instance_->InitAsDefaultInstance();
  ReInitProxy::default_instance_->InitAsDefaultInstance();
  PakCheckCodeQuery::default_instance_->InitAsDefaultInstance();
  PakCheckCode::default_instance_->InitAsDefaultInstance();
  PakCheckCodeRes::default_instance_->InitAsDefaultInstance();
  PakCheckFailed::default_instance_->InitAsDefaultInstance();
  InitPveGameServer::default_instance_->InitAsDefaultInstance();
  IncPlayer::default_instance_->InitAsDefaultInstance();
  DeIncPlayer::default_instance_->InitAsDefaultInstance();
  ClientLog::default_instance_->InitAsDefaultInstance();
  ClientDump::default_instance_->InitAsDefaultInstance();
  SystemKeepalive::default_instance_->InitAsDefaultInstance();
  ProxyBalanceAdd::default_instance_->InitAsDefaultInstance();
  ProxyBalanceDel::default_instance_->InitAsDefaultInstance();
  InitUdpProxy::default_instance_->InitAsDefaultInstance();
  PlayerGuidNotify::default_instance_->InitAsDefaultInstance();
  SetPacketStat::default_instance_->InitAsDefaultInstance();
  UploadFileReq::default_instance_->InitAsDefaultInstance();
  UploadFileReply::default_instance_->InitAsDefaultInstance();
  CollectModuleInfo::default_instance_->InitAsDefaultInstance();
  SyncItemLock::default_instance_->InitAsDefaultInstance();
  OneString::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packetSystem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packetSystem_2eproto {
  StaticDescriptorInitializer_packetSystem_2eproto() {
    protobuf_AddDesc_packetSystem_2eproto();
  }
} static_descriptor_initializer_packetSystem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyPacket::EmptyPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyPacket::InitAsDefaultInstance() {
}

EmptyPacket::EmptyPacket(const EmptyPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyPacket::~EmptyPacket() {
  SharedDtor();
}

void EmptyPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyPacket_descriptor_;
}

const EmptyPacket& EmptyPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

EmptyPacket* EmptyPacket::default_instance_ = NULL;

EmptyPacket* EmptyPacket::New() const {
  return new EmptyPacket;
}

void EmptyPacket::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyPacket::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyPacket::MergeFrom(const EmptyPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyPacket::CopyFrom(const EmptyPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyPacket::IsInitialized() const {

  return true;
}

void EmptyPacket::Swap(EmptyPacket* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyPacket_descriptor_;
  metadata.reflection = EmptyPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Update::kNowFieldNumber;
const int Update::kDeltaFieldNumber;
#endif  // !_MSC_VER

Update::Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Update::InitAsDefaultInstance() {
}

Update::Update(const Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Update::SharedCtor() {
  _cached_size_ = 0;
  now_ = 0u;
  delta_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Update::~Update() {
  SharedDtor();
}

void Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Update_descriptor_;
}

const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New() const {
  return new Update;
}

void Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    now_ = 0u;
    delta_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 now = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }

      // optional uint32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 now = 1;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->now(), output);
  }

  // optional uint32 delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 now = 1;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->now(), target);
  }

  // optional uint32 delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 now = 1;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->now());
    }

    // optional uint32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now()) {
      set_now(from.now());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {

  return true;
}

void Update::Swap(Update* other) {
  if (other != this) {
    std::swap(now_, other->now_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Update_descriptor_;
  metadata.reflection = Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListenConfig::kConnectionTypeFieldNumber;
const int ListenConfig::kListenIPFieldNumber;
const int ListenConfig::kListenPortFieldNumber;
const int ListenConfig::kMaxConnectionFieldNumber;
const int ListenConfig::kUdpFieldNumber;
#endif  // !_MSC_VER

ListenConfig::ListenConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListenConfig::InitAsDefaultInstance() {
}

ListenConfig::ListenConfig(const ListenConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListenConfig::SharedCtor() {
  _cached_size_ = 0;
  connectiontype_ = -1;
  listenip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listenport_ = 0;
  maxconnection_ = 0;
  udp_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListenConfig::~ListenConfig() {
  SharedDtor();
}

void ListenConfig::SharedDtor() {
  if (listenip_ != &::google::protobuf::internal::kEmptyString) {
    delete listenip_;
  }
  if (this != default_instance_) {
  }
}

void ListenConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListenConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenConfig_descriptor_;
}

const ListenConfig& ListenConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ListenConfig* ListenConfig::default_instance_ = NULL;

ListenConfig* ListenConfig::New() const {
  return new ListenConfig;
}

void ListenConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connectiontype_ = -1;
    if (has_listenip()) {
      if (listenip_ != &::google::protobuf::internal::kEmptyString) {
        listenip_->clear();
      }
    }
    listenport_ = 0;
    maxconnection_ = 0;
    udp_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListenConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EConnectionType connectionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::pb::EConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_listenIP;
        break;
      }

      // optional string listenIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listenIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listenip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listenip().data(), this->listenip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_listenPort;
        break;
      }

      // optional int32 listenPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listenPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));
          set_has_listenport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxConnection;
        break;
      }

      // optional int32 maxConnection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxConnection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconnection_)));
          set_has_maxconnection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_udp;
        break;
      }

      // optional bool udp = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &udp_)));
          set_has_udp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListenConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->connectiontype(), output);
  }

  // optional string listenIP = 2;
  if (has_listenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listenip().data(), this->listenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->listenip(), output);
  }

  // optional int32 listenPort = 3;
  if (has_listenport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->listenport(), output);
  }

  // optional int32 maxConnection = 4;
  if (has_maxconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxconnection(), output);
  }

  // optional bool udp = 5 [default = true];
  if (has_udp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->udp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListenConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->connectiontype(), target);
  }

  // optional string listenIP = 2;
  if (has_listenip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listenip().data(), this->listenip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->listenip(), target);
  }

  // optional int32 listenPort = 3;
  if (has_listenport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->listenport(), target);
  }

  // optional int32 maxConnection = 4;
  if (has_maxconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxconnection(), target);
  }

  // optional bool udp = 5 [default = true];
  if (has_udp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->udp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListenConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EConnectionType connectionType = 1;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional string listenIP = 2;
    if (has_listenip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listenip());
    }

    // optional int32 listenPort = 3;
    if (has_listenport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listenport());
    }

    // optional int32 maxConnection = 4;
    if (has_maxconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxconnection());
    }

    // optional bool udp = 5 [default = true];
    if (has_udp()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListenConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListenConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListenConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListenConfig::MergeFrom(const ListenConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_listenip()) {
      set_listenip(from.listenip());
    }
    if (from.has_listenport()) {
      set_listenport(from.listenport());
    }
    if (from.has_maxconnection()) {
      set_maxconnection(from.maxconnection());
    }
    if (from.has_udp()) {
      set_udp(from.udp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListenConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenConfig::CopyFrom(const ListenConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenConfig::IsInitialized() const {

  return true;
}

void ListenConfig::Swap(ListenConfig* other) {
  if (other != this) {
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(listenip_, other->listenip_);
    std::swap(listenport_, other->listenport_);
    std::swap(maxconnection_, other->maxconnection_);
    std::swap(udp_, other->udp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListenConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListenConfig_descriptor_;
  metadata.reflection = ListenConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitServer::kServersFieldNumber;
const int InitServer::kClientsFieldNumber;
const int InitServer::kServerGuidFieldNumber;
const int InitServer::kServerNameFieldNumber;
const int InitServer::kConnectionTypeFieldNumber;
#endif  // !_MSC_VER

InitServer::InitServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitServer::InitAsDefaultInstance() {
}

InitServer::InitServer(const InitServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitServer::SharedCtor() {
  _cached_size_ = 0;
  serverguid_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectiontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitServer::~InitServer() {
  SharedDtor();
}

void InitServer::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void InitServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitServer_descriptor_;
}

const InitServer& InitServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

InitServer* InitServer::default_instance_ = NULL;

InitServer* InitServer::New() const {
  return new InitServer;
}

void InitServer::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    serverguid_ = 0u;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    connectiontype_ = -1;
  }
  servers_.Clear();
  clients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ListenConfig servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectTag(18)) goto parse_clients;
        break;
      }

      // repeated .pb.ListenConfig clients = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clients()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clients;
        if (input->ExpectTag(24)) goto parse_serverGuid;
        break;
      }

      // optional uint32 serverGuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverguid_)));
          set_has_serverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serverName;
        break;
      }

      // optional string serverName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_connectionType;
        break;
      }

      // optional .pb.EConnectionType connectionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::pb::EConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ListenConfig servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  // repeated .pb.ListenConfig clients = 2;
  for (int i = 0; i < this->clients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clients(i), output);
  }

  // optional uint32 serverGuid = 3;
  if (has_serverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverguid(), output);
  }

  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->servername(), output);
  }

  // optional .pb.EConnectionType connectionType = 5;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->connectiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ListenConfig servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  // repeated .pb.ListenConfig clients = 2;
  for (int i = 0; i < this->clients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clients(i), target);
  }

  // optional uint32 serverGuid = 3;
  if (has_serverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverguid(), target);
  }

  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  // optional .pb.EConnectionType connectionType = 5;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->connectiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 serverGuid = 3;
    if (has_serverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverguid());
    }

    // optional string serverName = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional .pb.EConnectionType connectionType = 5;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

  }
  // repeated .pb.ListenConfig servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  // repeated .pb.ListenConfig clients = 2;
  total_size += 1 * this->clients_size();
  for (int i = 0; i < this->clients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitServer::MergeFrom(const InitServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  clients_.MergeFrom(from.clients_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_serverguid()) {
      set_serverguid(from.serverguid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitServer::CopyFrom(const InitServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitServer::IsInitialized() const {

  return true;
}

void InitServer::Swap(InitServer* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    clients_.Swap(&other->clients_);
    std::swap(serverguid_, other->serverguid_);
    std::swap(servername_, other->servername_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitServer_descriptor_;
  metadata.reflection = InitServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetServerInfo::kServerGuidFieldNumber;
const int SetServerInfo::kServerNameFieldNumber;
const int SetServerInfo::kLevelFieldNumber;
const int SetServerInfo::kMaxPlayerCountFieldNumber;
#endif  // !_MSC_VER

SetServerInfo::SetServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetServerInfo::InitAsDefaultInstance() {
}

SetServerInfo::SetServerInfo(const SetServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetServerInfo::SharedCtor() {
  _cached_size_ = 0;
  serverguid_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  maxplayercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetServerInfo::~SetServerInfo() {
  SharedDtor();
}

void SetServerInfo::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void SetServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetServerInfo_descriptor_;
}

const SetServerInfo& SetServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

SetServerInfo* SetServerInfo::default_instance_ = NULL;

SetServerInfo* SetServerInfo::New() const {
  return new SetServerInfo;
}

void SetServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverguid_ = 0u;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    level_ = 0;
    maxplayercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serverGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverguid_)));
          set_has_serverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverName;
        break;
      }

      // optional string serverName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxPlayerCount;
        break;
      }

      // optional int32 maxPlayerCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayercount_)));
          set_has_maxplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 serverGuid = 1;
  if (has_serverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverguid(), output);
  }

  // optional string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servername(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 maxPlayerCount = 4;
  if (has_maxplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxplayercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 serverGuid = 1;
  if (has_serverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverguid(), target);
  }

  // optional string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 maxPlayerCount = 4;
  if (has_maxplayercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxplayercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 serverGuid = 1;
    if (has_serverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverguid());
    }

    // optional string serverName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 maxPlayerCount = 4;
    if (has_maxplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetServerInfo::MergeFrom(const SetServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverguid()) {
      set_serverguid(from.serverguid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_maxplayercount()) {
      set_maxplayercount(from.maxplayercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetServerInfo::CopyFrom(const SetServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetServerInfo::IsInitialized() const {

  return true;
}

void SetServerInfo::Swap(SetServerInfo* other) {
  if (other != this) {
    std::swap(serverguid_, other->serverguid_);
    std::swap(servername_, other->servername_);
    std::swap(level_, other->level_);
    std::swap(maxplayercount_, other->maxplayercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetServerInfo_descriptor_;
  metadata.reflection = SetServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitServerResponse::kRemoteServersFieldNumber;
#endif  // !_MSC_VER

InitServerResponse::InitServerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitServerResponse::InitAsDefaultInstance() {
}

InitServerResponse::InitServerResponse(const InitServerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitServerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitServerResponse::~InitServerResponse() {
  SharedDtor();
}

void InitServerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitServerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitServerResponse_descriptor_;
}

const InitServerResponse& InitServerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

InitServerResponse* InitServerResponse::default_instance_ = NULL;

InitServerResponse* InitServerResponse::New() const {
  return new InitServerResponse;
}

void InitServerResponse::Clear() {
  remoteservers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.ListenConfig remoteServers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remoteServers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remoteservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_remoteServers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.ListenConfig remoteServers = 1;
  for (int i = 0; i < this->remoteservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->remoteservers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitServerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.ListenConfig remoteServers = 1;
  for (int i = 0; i < this->remoteservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->remoteservers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitServerResponse::ByteSize() const {
  int total_size = 0;

  // repeated .pb.ListenConfig remoteServers = 1;
  total_size += 1 * this->remoteservers_size();
  for (int i = 0; i < this->remoteservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remoteservers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitServerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitServerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitServerResponse::MergeFrom(const InitServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  remoteservers_.MergeFrom(from.remoteservers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitServerResponse::CopyFrom(const InitServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitServerResponse::IsInitialized() const {

  return true;
}

void InitServerResponse::Swap(InitServerResponse* other) {
  if (other != this) {
    remoteservers_.Swap(&other->remoteservers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitServerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitServerResponse_descriptor_;
  metadata.reflection = InitServerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerActive::kRemoteServerFieldNumber;
#endif  // !_MSC_VER

ServerActive::ServerActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerActive::InitAsDefaultInstance() {
  remoteserver_ = const_cast< ::pb::ListenConfig*>(&::pb::ListenConfig::default_instance());
}

ServerActive::ServerActive(const ServerActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerActive::SharedCtor() {
  _cached_size_ = 0;
  remoteserver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerActive::~ServerActive() {
  SharedDtor();
}

void ServerActive::SharedDtor() {
  if (this != default_instance_) {
    delete remoteserver_;
  }
}

void ServerActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerActive_descriptor_;
}

const ServerActive& ServerActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ServerActive* ServerActive::default_instance_ = NULL;

ServerActive* ServerActive::New() const {
  return new ServerActive;
}

void ServerActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_remoteserver()) {
      if (remoteserver_ != NULL) remoteserver_->::pb::ListenConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ListenConfig remoteServer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remoteserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ListenConfig remoteServer = 1;
  if (has_remoteserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->remoteserver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ListenConfig remoteServer = 1;
  if (has_remoteserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->remoteserver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ListenConfig remoteServer = 1;
    if (has_remoteserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remoteserver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerActive::MergeFrom(const ServerActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remoteserver()) {
      mutable_remoteserver()->::pb::ListenConfig::MergeFrom(from.remoteserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerActive::CopyFrom(const ServerActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerActive::IsInitialized() const {

  return true;
}

void ServerActive::Swap(ServerActive* other) {
  if (other != this) {
    std::swap(remoteserver_, other->remoteserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerActive_descriptor_;
  metadata.reflection = ServerActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitGate::kGateAddressFieldNumber;
const int InitGate::kGatePortFieldNumber;
const int InitGate::kGateGuidFieldNumber;
#endif  // !_MSC_VER

InitGate::InitGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitGate::InitAsDefaultInstance() {
}

InitGate::InitGate(const InitGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitGate::SharedCtor() {
  _cached_size_ = 0;
  gateaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateport_ = 0;
  gateguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitGate::~InitGate() {
  SharedDtor();
}

void InitGate::SharedDtor() {
  if (gateaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete gateaddress_;
  }
  if (this != default_instance_) {
  }
}

void InitGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitGate_descriptor_;
}

const InitGate& InitGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

InitGate* InitGate::default_instance_ = NULL;

InitGate* InitGate::New() const {
  return new InitGate;
}

void InitGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gateaddress()) {
      if (gateaddress_ != &::google::protobuf::internal::kEmptyString) {
        gateaddress_->clear();
      }
    }
    gateport_ = 0;
    gateguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gateAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateaddress().data(), this->gateaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gatePort;
        break;
      }

      // optional int32 gatePort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateport_)));
          set_has_gateport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateGuid;
        break;
      }

      // optional uint32 gateGuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateguid_)));
          set_has_gateguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gateAddress = 1;
  if (has_gateaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddress().data(), this->gateaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gateaddress(), output);
  }

  // optional int32 gatePort = 2;
  if (has_gateport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateport(), output);
  }

  // optional uint32 gateGuid = 3;
  if (has_gateguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gateAddress = 1;
  if (has_gateaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddress().data(), this->gateaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateaddress(), target);
  }

  // optional int32 gatePort = 2;
  if (has_gateport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateport(), target);
  }

  // optional uint32 gateGuid = 3;
  if (has_gateguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gateAddress = 1;
    if (has_gateaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateaddress());
    }

    // optional int32 gatePort = 2;
    if (has_gateport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateport());
    }

    // optional uint32 gateGuid = 3;
    if (has_gateguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitGate::MergeFrom(const InitGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateaddress()) {
      set_gateaddress(from.gateaddress());
    }
    if (from.has_gateport()) {
      set_gateport(from.gateport());
    }
    if (from.has_gateguid()) {
      set_gateguid(from.gateguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitGate::CopyFrom(const InitGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitGate::IsInitialized() const {

  return true;
}

void InitGate::Swap(InitGate* other) {
  if (other != this) {
    std::swap(gateaddress_, other->gateaddress_);
    std::swap(gateport_, other->gateport_);
    std::swap(gateguid_, other->gateguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitGate_descriptor_;
  metadata.reflection = InitGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientConnectGate::kGateAddressFieldNumber;
const int ClientConnectGate::kGatePortFieldNumber;
const int ClientConnectGate::kNewGuidFieldNumber;
const int ClientConnectGate::kWaitNumFieldNumber;
const int ClientConnectGate::kSecurityKeyFieldNumber;
#endif  // !_MSC_VER

ClientConnectGate::ClientConnectGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientConnectGate::InitAsDefaultInstance() {
}

ClientConnectGate::ClientConnectGate(const ClientConnectGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientConnectGate::SharedCtor() {
  _cached_size_ = 0;
  gateaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateport_ = 0;
  newguid_ = 0u;
  waitnum_ = 0u;
  securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientConnectGate::~ClientConnectGate() {
  SharedDtor();
}

void ClientConnectGate::SharedDtor() {
  if (gateaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete gateaddress_;
  }
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete securitykey_;
  }
  if (this != default_instance_) {
  }
}

void ClientConnectGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConnectGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientConnectGate_descriptor_;
}

const ClientConnectGate& ClientConnectGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ClientConnectGate* ClientConnectGate::default_instance_ = NULL;

ClientConnectGate* ClientConnectGate::New() const {
  return new ClientConnectGate;
}

void ClientConnectGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gateaddress()) {
      if (gateaddress_ != &::google::protobuf::internal::kEmptyString) {
        gateaddress_->clear();
      }
    }
    gateport_ = 0;
    newguid_ = 0u;
    waitnum_ = 0u;
    if (has_securitykey()) {
      if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
        securitykey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientConnectGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gateAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateaddress().data(), this->gateaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gatePort;
        break;
      }

      // optional int32 gatePort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gatePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateport_)));
          set_has_gateport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newGuid;
        break;
      }

      // optional uint32 newGuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newguid_)));
          set_has_newguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_waitNum;
        break;
      }

      // optional uint32 waitNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waitnum_)));
          set_has_waitnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_securityKey;
        break;
      }

      // optional bytes securityKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_securityKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_securitykey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientConnectGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gateAddress = 1;
  if (has_gateaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddress().data(), this->gateaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gateaddress(), output);
  }

  // optional int32 gatePort = 2;
  if (has_gateport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateport(), output);
  }

  // optional uint32 newGuid = 3;
  if (has_newguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newguid(), output);
  }

  // optional uint32 waitNum = 4;
  if (has_waitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->waitnum(), output);
  }

  // optional bytes securityKey = 5;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->securitykey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientConnectGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gateAddress = 1;
  if (has_gateaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateaddress().data(), this->gateaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gateaddress(), target);
  }

  // optional int32 gatePort = 2;
  if (has_gateport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateport(), target);
  }

  // optional uint32 newGuid = 3;
  if (has_newguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newguid(), target);
  }

  // optional uint32 waitNum = 4;
  if (has_waitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->waitnum(), target);
  }

  // optional bytes securityKey = 5;
  if (has_securitykey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->securitykey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientConnectGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gateAddress = 1;
    if (has_gateaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateaddress());
    }

    // optional int32 gatePort = 2;
    if (has_gateport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateport());
    }

    // optional uint32 newGuid = 3;
    if (has_newguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newguid());
    }

    // optional uint32 waitNum = 4;
    if (has_waitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waitnum());
    }

    // optional bytes securityKey = 5;
    if (has_securitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->securitykey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConnectGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientConnectGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientConnectGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientConnectGate::MergeFrom(const ClientConnectGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateaddress()) {
      set_gateaddress(from.gateaddress());
    }
    if (from.has_gateport()) {
      set_gateport(from.gateport());
    }
    if (from.has_newguid()) {
      set_newguid(from.newguid());
    }
    if (from.has_waitnum()) {
      set_waitnum(from.waitnum());
    }
    if (from.has_securitykey()) {
      set_securitykey(from.securitykey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientConnectGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnectGate::CopyFrom(const ClientConnectGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConnectGate::IsInitialized() const {

  return true;
}

void ClientConnectGate::Swap(ClientConnectGate* other) {
  if (other != this) {
    std::swap(gateaddress_, other->gateaddress_);
    std::swap(gateport_, other->gateport_);
    std::swap(newguid_, other->newguid_);
    std::swap(waitnum_, other->waitnum_);
    std::swap(securitykey_, other->securitykey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientConnectGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientConnectGate_descriptor_;
  metadata.reflection = ClientConnectGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeServerGuid::kNewGuidFieldNumber;
const int ChangeServerGuid::kServerGuidFieldNumber;
const int ChangeServerGuid::kGroupIDFieldNumber;
#endif  // !_MSC_VER

ChangeServerGuid::ChangeServerGuid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeServerGuid::InitAsDefaultInstance() {
}

ChangeServerGuid::ChangeServerGuid(const ChangeServerGuid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeServerGuid::SharedCtor() {
  _cached_size_ = 0;
  newguid_ = 0u;
  serverguid_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeServerGuid::~ChangeServerGuid() {
  SharedDtor();
}

void ChangeServerGuid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeServerGuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeServerGuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeServerGuid_descriptor_;
}

const ChangeServerGuid& ChangeServerGuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ChangeServerGuid* ChangeServerGuid::default_instance_ = NULL;

ChangeServerGuid* ChangeServerGuid::New() const {
  return new ChangeServerGuid;
}

void ChangeServerGuid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newguid_ = 0u;
    serverguid_ = 0u;
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeServerGuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 newGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newguid_)));
          set_has_newguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverGuid;
        break;
      }

      // optional uint32 serverGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverguid_)));
          set_has_serverguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupID;
        break;
      }

      // optional uint32 groupID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeServerGuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 newGuid = 1;
  if (has_newguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newguid(), output);
  }

  // optional uint32 serverGuid = 2;
  if (has_serverguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverguid(), output);
  }

  // optional uint32 groupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeServerGuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 newGuid = 1;
  if (has_newguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newguid(), target);
  }

  // optional uint32 serverGuid = 2;
  if (has_serverguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverguid(), target);
  }

  // optional uint32 groupID = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeServerGuid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 newGuid = 1;
    if (has_newguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newguid());
    }

    // optional uint32 serverGuid = 2;
    if (has_serverguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverguid());
    }

    // optional uint32 groupID = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeServerGuid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeServerGuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeServerGuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeServerGuid::MergeFrom(const ChangeServerGuid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newguid()) {
      set_newguid(from.newguid());
    }
    if (from.has_serverguid()) {
      set_serverguid(from.serverguid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeServerGuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeServerGuid::CopyFrom(const ChangeServerGuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerGuid::IsInitialized() const {

  return true;
}

void ChangeServerGuid::Swap(ChangeServerGuid* other) {
  if (other != this) {
    std::swap(newguid_, other->newguid_);
    std::swap(serverguid_, other->serverguid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeServerGuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeServerGuid_descriptor_;
  metadata.reflection = ChangeServerGuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatePlayerCount::kGateGuidFieldNumber;
const int GatePlayerCount::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

GatePlayerCount::GatePlayerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatePlayerCount::InitAsDefaultInstance() {
}

GatePlayerCount::GatePlayerCount(const GatePlayerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatePlayerCount::SharedCtor() {
  _cached_size_ = 0;
  gateguid_ = 0u;
  playercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatePlayerCount::~GatePlayerCount() {
  SharedDtor();
}

void GatePlayerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatePlayerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatePlayerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatePlayerCount_descriptor_;
}

const GatePlayerCount& GatePlayerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

GatePlayerCount* GatePlayerCount::default_instance_ = NULL;

GatePlayerCount* GatePlayerCount::New() const {
  return new GatePlayerCount;
}

void GatePlayerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateguid_ = 0u;
    playercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatePlayerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gateGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateguid_)));
          set_has_gateguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerCount;
        break;
      }

      // optional int32 playerCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatePlayerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gateGuid = 1;
  if (has_gateguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateguid(), output);
  }

  // optional int32 playerCount = 2;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatePlayerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gateGuid = 1;
  if (has_gateguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateguid(), target);
  }

  // optional int32 playerCount = 2;
  if (has_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatePlayerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gateGuid = 1;
    if (has_gateguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateguid());
    }

    // optional int32 playerCount = 2;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatePlayerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatePlayerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatePlayerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatePlayerCount::MergeFrom(const GatePlayerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateguid()) {
      set_gateguid(from.gateguid());
    }
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatePlayerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatePlayerCount::CopyFrom(const GatePlayerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatePlayerCount::IsInitialized() const {

  return true;
}

void GatePlayerCount::Swap(GatePlayerCount* other) {
  if (other != this) {
    std::swap(gateguid_, other->gateguid_);
    std::swap(playercount_, other->playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatePlayerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatePlayerCount_descriptor_;
  metadata.reflection = GatePlayerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewIncomingConnection::kConnectionTypeFieldNumber;
const int NewIncomingConnection::kRemoteGuidFieldNumber;
#endif  // !_MSC_VER

NewIncomingConnection::NewIncomingConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewIncomingConnection::InitAsDefaultInstance() {
}

NewIncomingConnection::NewIncomingConnection(const NewIncomingConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewIncomingConnection::SharedCtor() {
  _cached_size_ = 0;
  connectiontype_ = -1;
  remoteguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewIncomingConnection::~NewIncomingConnection() {
  SharedDtor();
}

void NewIncomingConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewIncomingConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewIncomingConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewIncomingConnection_descriptor_;
}

const NewIncomingConnection& NewIncomingConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

NewIncomingConnection* NewIncomingConnection::default_instance_ = NULL;

NewIncomingConnection* NewIncomingConnection::New() const {
  return new NewIncomingConnection;
}

void NewIncomingConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connectiontype_ = -1;
    remoteguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewIncomingConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EConnectionType connectionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::pb::EConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remoteGuid;
        break;
      }

      // optional uint32 remoteGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remoteGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remoteguid_)));
          set_has_remoteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewIncomingConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->connectiontype(), output);
  }

  // optional uint32 remoteGuid = 2;
  if (has_remoteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remoteguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewIncomingConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->connectiontype(), target);
  }

  // optional uint32 remoteGuid = 2;
  if (has_remoteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remoteguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewIncomingConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EConnectionType connectionType = 1;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional uint32 remoteGuid = 2;
    if (has_remoteguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remoteguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewIncomingConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewIncomingConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewIncomingConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewIncomingConnection::MergeFrom(const NewIncomingConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_remoteguid()) {
      set_remoteguid(from.remoteguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewIncomingConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewIncomingConnection::CopyFrom(const NewIncomingConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewIncomingConnection::IsInitialized() const {

  return true;
}

void NewIncomingConnection::Swap(NewIncomingConnection* other) {
  if (other != this) {
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(remoteguid_, other->remoteguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewIncomingConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewIncomingConnection_descriptor_;
  metadata.reflection = NewIncomingConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionRequestAccepted::kConnectionTypeFieldNumber;
const int ConnectionRequestAccepted::kRemoteGuidFieldNumber;
#endif  // !_MSC_VER

ConnectionRequestAccepted::ConnectionRequestAccepted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionRequestAccepted::InitAsDefaultInstance() {
}

ConnectionRequestAccepted::ConnectionRequestAccepted(const ConnectionRequestAccepted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionRequestAccepted::SharedCtor() {
  _cached_size_ = 0;
  connectiontype_ = -1;
  remoteguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionRequestAccepted::~ConnectionRequestAccepted() {
  SharedDtor();
}

void ConnectionRequestAccepted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectionRequestAccepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionRequestAccepted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionRequestAccepted_descriptor_;
}

const ConnectionRequestAccepted& ConnectionRequestAccepted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ConnectionRequestAccepted* ConnectionRequestAccepted::default_instance_ = NULL;

ConnectionRequestAccepted* ConnectionRequestAccepted::New() const {
  return new ConnectionRequestAccepted;
}

void ConnectionRequestAccepted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connectiontype_ = -1;
    remoteguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionRequestAccepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EConnectionType connectionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::pb::EConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remoteGuid;
        break;
      }

      // optional uint32 remoteGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remoteGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remoteguid_)));
          set_has_remoteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionRequestAccepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->connectiontype(), output);
  }

  // optional uint32 remoteGuid = 2;
  if (has_remoteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remoteguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionRequestAccepted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->connectiontype(), target);
  }

  // optional uint32 remoteGuid = 2;
  if (has_remoteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remoteguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionRequestAccepted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EConnectionType connectionType = 1;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional uint32 remoteGuid = 2;
    if (has_remoteguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remoteguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequestAccepted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionRequestAccepted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionRequestAccepted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionRequestAccepted::MergeFrom(const ConnectionRequestAccepted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_remoteguid()) {
      set_remoteguid(from.remoteguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionRequestAccepted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequestAccepted::CopyFrom(const ConnectionRequestAccepted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequestAccepted::IsInitialized() const {

  return true;
}

void ConnectionRequestAccepted::Swap(ConnectionRequestAccepted* other) {
  if (other != this) {
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(remoteguid_, other->remoteguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionRequestAccepted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionRequestAccepted_descriptor_;
  metadata.reflection = ConnectionRequestAccepted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionAttemptFailed::kRemoteGuidFieldNumber;
const int ConnectionAttemptFailed::kIPFieldNumber;
const int ConnectionAttemptFailed::kPortFieldNumber;
const int ConnectionAttemptFailed::kConnectionTypeFieldNumber;
#endif  // !_MSC_VER

ConnectionAttemptFailed::ConnectionAttemptFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionAttemptFailed::InitAsDefaultInstance() {
}

ConnectionAttemptFailed::ConnectionAttemptFailed(const ConnectionAttemptFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionAttemptFailed::SharedCtor() {
  _cached_size_ = 0;
  remoteguid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  connectiontype_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionAttemptFailed::~ConnectionAttemptFailed() {
  SharedDtor();
}

void ConnectionAttemptFailed::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ConnectionAttemptFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionAttemptFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionAttemptFailed_descriptor_;
}

const ConnectionAttemptFailed& ConnectionAttemptFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ConnectionAttemptFailed* ConnectionAttemptFailed::default_instance_ = NULL;

ConnectionAttemptFailed* ConnectionAttemptFailed::New() const {
  return new ConnectionAttemptFailed;
}

void ConnectionAttemptFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remoteguid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    connectiontype_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionAttemptFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remoteGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remoteguid_)));
          set_has_remoteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IP;
        break;
      }

      // optional string IP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_connectionType;
        break;
      }

      // optional .pb.EConnectionType connectionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::pb::EConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionAttemptFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remoteGuid = 1;
  if (has_remoteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remoteguid(), output);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional .pb.EConnectionType connectionType = 4;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->connectiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionAttemptFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 remoteGuid = 1;
  if (has_remoteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remoteguid(), target);
  }

  // optional string IP = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional .pb.EConnectionType connectionType = 4;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->connectiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionAttemptFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remoteGuid = 1;
    if (has_remoteguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remoteguid());
    }

    // optional string IP = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional .pb.EConnectionType connectionType = 4;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionAttemptFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionAttemptFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionAttemptFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionAttemptFailed::MergeFrom(const ConnectionAttemptFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remoteguid()) {
      set_remoteguid(from.remoteguid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionAttemptFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionAttemptFailed::CopyFrom(const ConnectionAttemptFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionAttemptFailed::IsInitialized() const {

  return true;
}

void ConnectionAttemptFailed::Swap(ConnectionAttemptFailed* other) {
  if (other != this) {
    std::swap(remoteguid_, other->remoteguid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionAttemptFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionAttemptFailed_descriptor_;
  metadata.reflection = ConnectionAttemptFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisconnectionNotification::kConnectionTypeFieldNumber;
const int DisconnectionNotification::kRemoteGuidFieldNumber;
const int DisconnectionNotification::kBPassiveFieldNumber;
#endif  // !_MSC_VER

DisconnectionNotification::DisconnectionNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisconnectionNotification::InitAsDefaultInstance() {
}

DisconnectionNotification::DisconnectionNotification(const DisconnectionNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisconnectionNotification::SharedCtor() {
  _cached_size_ = 0;
  connectiontype_ = -1;
  remoteguid_ = 0u;
  bpassive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectionNotification::~DisconnectionNotification() {
  SharedDtor();
}

void DisconnectionNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisconnectionNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectionNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisconnectionNotification_descriptor_;
}

const DisconnectionNotification& DisconnectionNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

DisconnectionNotification* DisconnectionNotification::default_instance_ = NULL;

DisconnectionNotification* DisconnectionNotification::New() const {
  return new DisconnectionNotification;
}

void DisconnectionNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connectiontype_ = -1;
    remoteguid_ = 0u;
    bpassive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisconnectionNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EConnectionType connectionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::pb::EConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remoteGuid;
        break;
      }

      // optional uint32 remoteGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remoteGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remoteguid_)));
          set_has_remoteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bPassive;
        break;
      }

      // optional bool bPassive = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bPassive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bpassive_)));
          set_has_bpassive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisconnectionNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->connectiontype(), output);
  }

  // optional uint32 remoteGuid = 2;
  if (has_remoteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remoteguid(), output);
  }

  // optional bool bPassive = 3 [default = false];
  if (has_bpassive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bpassive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisconnectionNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.EConnectionType connectionType = 1;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->connectiontype(), target);
  }

  // optional uint32 remoteGuid = 2;
  if (has_remoteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remoteguid(), target);
  }

  // optional bool bPassive = 3 [default = false];
  if (has_bpassive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bpassive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisconnectionNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EConnectionType connectionType = 1;
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional uint32 remoteGuid = 2;
    if (has_remoteguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remoteguid());
    }

    // optional bool bPassive = 3 [default = false];
    if (has_bpassive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectionNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisconnectionNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisconnectionNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisconnectionNotification::MergeFrom(const DisconnectionNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_remoteguid()) {
      set_remoteguid(from.remoteguid());
    }
    if (from.has_bpassive()) {
      set_bpassive(from.bpassive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisconnectionNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectionNotification::CopyFrom(const DisconnectionNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectionNotification::IsInitialized() const {

  return true;
}

void DisconnectionNotification::Swap(DisconnectionNotification* other) {
  if (other != this) {
    std::swap(connectiontype_, other->connectiontype_);
    std::swap(remoteguid_, other->remoteguid_);
    std::swap(bpassive_, other->bpassive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisconnectionNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisconnectionNotification_descriptor_;
  metadata.reflection = DisconnectionNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginError::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

LoginError::LoginError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginError::InitAsDefaultInstance() {
}

LoginError::LoginError(const LoginError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginError::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginError::~LoginError() {
  SharedDtor();
}

void LoginError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginError_descriptor_;
}

const LoginError& LoginError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

LoginError* LoginError::default_instance_ = NULL;

LoginError* LoginError::New() const {
  return new LoginError;
}

void LoginError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerGuid = 1;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginError::MergeFrom(const LoginError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginError::CopyFrom(const LoginError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginError::IsInitialized() const {

  return true;
}

void LoginError::Swap(LoginError* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginError_descriptor_;
  metadata.reflection = LoginError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushConfig::kFlushModuleFieldNumber;
#endif  // !_MSC_VER

FlushConfig::FlushConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushConfig::InitAsDefaultInstance() {
}

FlushConfig::FlushConfig(const FlushConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushConfig::SharedCtor() {
  _cached_size_ = 0;
  flushmodule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushConfig::~FlushConfig() {
  SharedDtor();
}

void FlushConfig::SharedDtor() {
  if (flushmodule_ != &::google::protobuf::internal::kEmptyString) {
    delete flushmodule_;
  }
  if (this != default_instance_) {
  }
}

void FlushConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushConfig_descriptor_;
}

const FlushConfig& FlushConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

FlushConfig* FlushConfig::default_instance_ = NULL;

FlushConfig* FlushConfig::New() const {
  return new FlushConfig;
}

void FlushConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flushmodule()) {
      if (flushmodule_ != &::google::protobuf::internal::kEmptyString) {
        flushmodule_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string flushModule = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flushmodule()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flushmodule().data(), this->flushmodule().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string flushModule = 1;
  if (has_flushmodule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flushmodule().data(), this->flushmodule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->flushmodule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string flushModule = 1;
  if (has_flushmodule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flushmodule().data(), this->flushmodule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flushmodule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string flushModule = 1;
    if (has_flushmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flushmodule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushConfig::MergeFrom(const FlushConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flushmodule()) {
      set_flushmodule(from.flushmodule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushConfig::CopyFrom(const FlushConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushConfig::IsInitialized() const {

  return true;
}

void FlushConfig::Swap(FlushConfig* other) {
  if (other != this) {
    std::swap(flushmodule_, other->flushmodule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushConfig_descriptor_;
  metadata.reflection = FlushConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShutServerDown::kAfterTimeFieldNumber;
#endif  // !_MSC_VER

ShutServerDown::ShutServerDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShutServerDown::InitAsDefaultInstance() {
}

ShutServerDown::ShutServerDown(const ShutServerDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShutServerDown::SharedCtor() {
  _cached_size_ = 0;
  aftertime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShutServerDown::~ShutServerDown() {
  SharedDtor();
}

void ShutServerDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutServerDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutServerDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutServerDown_descriptor_;
}

const ShutServerDown& ShutServerDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ShutServerDown* ShutServerDown::default_instance_ = NULL;

ShutServerDown* ShutServerDown::New() const {
  return new ShutServerDown;
}

void ShutServerDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aftertime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShutServerDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 afterTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aftertime_)));
          set_has_aftertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShutServerDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 afterTime = 1;
  if (has_aftertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aftertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShutServerDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 afterTime = 1;
  if (has_aftertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aftertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShutServerDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 afterTime = 1;
    if (has_aftertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aftertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutServerDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShutServerDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShutServerDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShutServerDown::MergeFrom(const ShutServerDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aftertime()) {
      set_aftertime(from.aftertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShutServerDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutServerDown::CopyFrom(const ShutServerDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutServerDown::IsInitialized() const {

  return true;
}

void ShutServerDown::Swap(ShutServerDown* other) {
  if (other != this) {
    std::swap(aftertime_, other->aftertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShutServerDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutServerDown_descriptor_;
  metadata.reflection = ShutServerDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClockDifferential::kBeginTimeFieldNumber;
const int ClockDifferential::kSyncTimeFieldNumber;
const int ClockDifferential::kGuidFieldNumber;
#endif  // !_MSC_VER

ClockDifferential::ClockDifferential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClockDifferential::InitAsDefaultInstance() {
}

ClockDifferential::ClockDifferential(const ClockDifferential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClockDifferential::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = 0u;
  synctime_ = 0u;
  guid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClockDifferential::~ClockDifferential() {
  SharedDtor();
}

void ClockDifferential::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClockDifferential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClockDifferential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClockDifferential_descriptor_;
}

const ClockDifferential& ClockDifferential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ClockDifferential* ClockDifferential::default_instance_ = NULL;

ClockDifferential* ClockDifferential::New() const {
  return new ClockDifferential;
}

void ClockDifferential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = 0u;
    synctime_ = 0u;
    guid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClockDifferential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_syncTime;
        break;
      }

      // optional uint32 syncTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syncTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &synctime_)));
          set_has_synctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint32 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClockDifferential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginTime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begintime(), output);
  }

  // optional uint32 syncTime = 2;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->synctime(), output);
  }

  // optional uint32 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClockDifferential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginTime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begintime(), target);
  }

  // optional uint32 syncTime = 2;
  if (has_synctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->synctime(), target);
  }

  // optional uint32 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClockDifferential::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginTime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 syncTime = 2;
    if (has_synctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->synctime());
    }

    // optional uint32 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClockDifferential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClockDifferential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClockDifferential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClockDifferential::MergeFrom(const ClockDifferential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_synctime()) {
      set_synctime(from.synctime());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClockDifferential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClockDifferential::CopyFrom(const ClockDifferential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockDifferential::IsInitialized() const {

  return true;
}

void ClockDifferential::Swap(ClockDifferential* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(synctime_, other->synctime_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClockDifferential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClockDifferential_descriptor_;
  metadata.reflection = ClockDifferential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bulletin::kContentFieldNumber;
#endif  // !_MSC_VER

Bulletin::Bulletin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bulletin::InitAsDefaultInstance() {
}

Bulletin::Bulletin(const Bulletin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bulletin::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bulletin::~Bulletin() {
  SharedDtor();
}

void Bulletin::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Bulletin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bulletin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bulletin_descriptor_;
}

const Bulletin& Bulletin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

Bulletin* Bulletin::default_instance_ = NULL;

Bulletin* Bulletin::New() const {
  return new Bulletin;
}

void Bulletin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bulletin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bulletin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bulletin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bulletin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bulletin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bulletin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bulletin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bulletin::MergeFrom(const Bulletin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bulletin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bulletin::CopyFrom(const Bulletin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bulletin::IsInitialized() const {

  return true;
}

void Bulletin::Swap(Bulletin* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bulletin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bulletin_descriptor_;
  metadata.reflection = Bulletin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VersionCheck::kVersionFieldNumber;
const int VersionCheck::kGuidFieldNumber;
#endif  // !_MSC_VER

VersionCheck::VersionCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionCheck::InitAsDefaultInstance() {
}

VersionCheck::VersionCheck(const VersionCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionCheck::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionCheck::~VersionCheck() {
  SharedDtor();
}

void VersionCheck::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void VersionCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionCheck_descriptor_;
}

const VersionCheck& VersionCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

VersionCheck* VersionCheck::default_instance_ = NULL;

VersionCheck* VersionCheck::New() const {
  return new VersionCheck;
}

void VersionCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    guid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional uint32 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VersionCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // optional uint32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional uint32 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional uint32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionCheck::MergeFrom(const VersionCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionCheck::CopyFrom(const VersionCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionCheck::IsInitialized() const {

  return true;
}

void VersionCheck::Swap(VersionCheck* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionCheck_descriptor_;
  metadata.reflection = VersionCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VersionCheckFaild::VersionCheckFaild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionCheckFaild::InitAsDefaultInstance() {
}

VersionCheckFaild::VersionCheckFaild(const VersionCheckFaild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionCheckFaild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionCheckFaild::~VersionCheckFaild() {
  SharedDtor();
}

void VersionCheckFaild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VersionCheckFaild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionCheckFaild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionCheckFaild_descriptor_;
}

const VersionCheckFaild& VersionCheckFaild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

VersionCheckFaild* VersionCheckFaild::default_instance_ = NULL;

VersionCheckFaild* VersionCheckFaild::New() const {
  return new VersionCheckFaild;
}

void VersionCheckFaild::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionCheckFaild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void VersionCheckFaild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionCheckFaild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionCheckFaild::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionCheckFaild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionCheckFaild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionCheckFaild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionCheckFaild::MergeFrom(const VersionCheckFaild& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionCheckFaild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionCheckFaild::CopyFrom(const VersionCheckFaild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionCheckFaild::IsInitialized() const {

  return true;
}

void VersionCheckFaild::Swap(VersionCheckFaild* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionCheckFaild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionCheckFaild_descriptor_;
  metadata.reflection = VersionCheckFaild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyMessage::kPlayerGuidFieldNumber;
const int ProxyMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

ProxyMessage::ProxyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyMessage::InitAsDefaultInstance() {
}

ProxyMessage::ProxyMessage(const ProxyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyMessage::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyMessage::~ProxyMessage() {
  SharedDtor();
}

void ProxyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyMessage_descriptor_;
}

const ProxyMessage& ProxyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ProxyMessage* ProxyMessage::default_instance_ = NULL;

ProxyMessage* ProxyMessage::New() const {
  return new ProxyMessage;
}

void ProxyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = 0u;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional bool status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerguid(), output);
  }

  // optional bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerguid(), target);
  }

  // optional bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerGuid = 1;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerguid());
    }

    // optional bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyMessage::MergeFrom(const ProxyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyMessage::CopyFrom(const ProxyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyMessage::IsInitialized() const {

  return true;
}

void ProxyMessage::Swap(ProxyMessage* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyMessage_descriptor_;
  metadata.reflection = ProxyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReInitProxy::ReInitProxy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReInitProxy::InitAsDefaultInstance() {
}

ReInitProxy::ReInitProxy(const ReInitProxy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReInitProxy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReInitProxy::~ReInitProxy() {
  SharedDtor();
}

void ReInitProxy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReInitProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReInitProxy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReInitProxy_descriptor_;
}

const ReInitProxy& ReInitProxy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ReInitProxy* ReInitProxy::default_instance_ = NULL;

ReInitProxy* ReInitProxy::New() const {
  return new ReInitProxy;
}

void ReInitProxy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReInitProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReInitProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReInitProxy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReInitProxy::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReInitProxy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReInitProxy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReInitProxy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReInitProxy::MergeFrom(const ReInitProxy& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReInitProxy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReInitProxy::CopyFrom(const ReInitProxy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReInitProxy::IsInitialized() const {

  return true;
}

void ReInitProxy::Swap(ReInitProxy* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReInitProxy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReInitProxy_descriptor_;
  metadata.reflection = ReInitProxy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PakCheckCodeQuery::kVersionFieldNumber;
#endif  // !_MSC_VER

PakCheckCodeQuery::PakCheckCodeQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PakCheckCodeQuery::InitAsDefaultInstance() {
}

PakCheckCodeQuery::PakCheckCodeQuery(const PakCheckCodeQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PakCheckCodeQuery::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PakCheckCodeQuery::~PakCheckCodeQuery() {
  SharedDtor();
}

void PakCheckCodeQuery::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void PakCheckCodeQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PakCheckCodeQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PakCheckCodeQuery_descriptor_;
}

const PakCheckCodeQuery& PakCheckCodeQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

PakCheckCodeQuery* PakCheckCodeQuery::default_instance_ = NULL;

PakCheckCodeQuery* PakCheckCodeQuery::New() const {
  return new PakCheckCodeQuery;
}

void PakCheckCodeQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PakCheckCodeQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PakCheckCodeQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PakCheckCodeQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PakCheckCodeQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PakCheckCodeQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PakCheckCodeQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PakCheckCodeQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PakCheckCodeQuery::MergeFrom(const PakCheckCodeQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PakCheckCodeQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PakCheckCodeQuery::CopyFrom(const PakCheckCodeQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakCheckCodeQuery::IsInitialized() const {

  return true;
}

void PakCheckCodeQuery::Swap(PakCheckCodeQuery* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PakCheckCodeQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PakCheckCodeQuery_descriptor_;
  metadata.reflection = PakCheckCodeQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PakCheckCode::kPakNameFieldNumber;
const int PakCheckCode::kCheckCodeFieldNumber;
#endif  // !_MSC_VER

PakCheckCode::PakCheckCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PakCheckCode::InitAsDefaultInstance() {
}

PakCheckCode::PakCheckCode(const PakCheckCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PakCheckCode::SharedCtor() {
  _cached_size_ = 0;
  pakname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checkcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PakCheckCode::~PakCheckCode() {
  SharedDtor();
}

void PakCheckCode::SharedDtor() {
  if (pakname_ != &::google::protobuf::internal::kEmptyString) {
    delete pakname_;
  }
  if (checkcode_ != &::google::protobuf::internal::kEmptyString) {
    delete checkcode_;
  }
  if (this != default_instance_) {
  }
}

void PakCheckCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PakCheckCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PakCheckCode_descriptor_;
}

const PakCheckCode& PakCheckCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

PakCheckCode* PakCheckCode::default_instance_ = NULL;

PakCheckCode* PakCheckCode::New() const {
  return new PakCheckCode;
}

void PakCheckCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pakname()) {
      if (pakname_ != &::google::protobuf::internal::kEmptyString) {
        pakname_->clear();
      }
    }
    if (has_checkcode()) {
      if (checkcode_ != &::google::protobuf::internal::kEmptyString) {
        checkcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PakCheckCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pakName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pakname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pakname().data(), this->pakname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_checkCode;
        break;
      }

      // optional string checkCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checkcode().data(), this->checkcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PakCheckCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pakName = 1;
  if (has_pakname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pakname().data(), this->pakname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pakname(), output);
  }

  // optional string checkCode = 2;
  if (has_checkcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkcode().data(), this->checkcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->checkcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PakCheckCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pakName = 1;
  if (has_pakname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pakname().data(), this->pakname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pakname(), target);
  }

  // optional string checkCode = 2;
  if (has_checkcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkcode().data(), this->checkcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->checkcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PakCheckCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pakName = 1;
    if (has_pakname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pakname());
    }

    // optional string checkCode = 2;
    if (has_checkcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PakCheckCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PakCheckCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PakCheckCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PakCheckCode::MergeFrom(const PakCheckCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pakname()) {
      set_pakname(from.pakname());
    }
    if (from.has_checkcode()) {
      set_checkcode(from.checkcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PakCheckCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PakCheckCode::CopyFrom(const PakCheckCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakCheckCode::IsInitialized() const {

  return true;
}

void PakCheckCode::Swap(PakCheckCode* other) {
  if (other != this) {
    std::swap(pakname_, other->pakname_);
    std::swap(checkcode_, other->checkcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PakCheckCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PakCheckCode_descriptor_;
  metadata.reflection = PakCheckCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PakCheckCodeRes::kPakCheckCodesFieldNumber;
#endif  // !_MSC_VER

PakCheckCodeRes::PakCheckCodeRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PakCheckCodeRes::InitAsDefaultInstance() {
}

PakCheckCodeRes::PakCheckCodeRes(const PakCheckCodeRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PakCheckCodeRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PakCheckCodeRes::~PakCheckCodeRes() {
  SharedDtor();
}

void PakCheckCodeRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PakCheckCodeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PakCheckCodeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PakCheckCodeRes_descriptor_;
}

const PakCheckCodeRes& PakCheckCodeRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

PakCheckCodeRes* PakCheckCodeRes::default_instance_ = NULL;

PakCheckCodeRes* PakCheckCodeRes::New() const {
  return new PakCheckCodeRes;
}

void PakCheckCodeRes::Clear() {
  pakcheckcodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PakCheckCodeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.PakCheckCode pakCheckCodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pakCheckCodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pakcheckcodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pakCheckCodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PakCheckCodeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.PakCheckCode pakCheckCodes = 1;
  for (int i = 0; i < this->pakcheckcodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pakcheckcodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PakCheckCodeRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.PakCheckCode pakCheckCodes = 1;
  for (int i = 0; i < this->pakcheckcodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pakcheckcodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PakCheckCodeRes::ByteSize() const {
  int total_size = 0;

  // repeated .pb.PakCheckCode pakCheckCodes = 1;
  total_size += 1 * this->pakcheckcodes_size();
  for (int i = 0; i < this->pakcheckcodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pakcheckcodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PakCheckCodeRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PakCheckCodeRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PakCheckCodeRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PakCheckCodeRes::MergeFrom(const PakCheckCodeRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  pakcheckcodes_.MergeFrom(from.pakcheckcodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PakCheckCodeRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PakCheckCodeRes::CopyFrom(const PakCheckCodeRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakCheckCodeRes::IsInitialized() const {

  return true;
}

void PakCheckCodeRes::Swap(PakCheckCodeRes* other) {
  if (other != this) {
    pakcheckcodes_.Swap(&other->pakcheckcodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PakCheckCodeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PakCheckCodeRes_descriptor_;
  metadata.reflection = PakCheckCodeRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PakCheckFailed::kPakNamesFieldNumber;
#endif  // !_MSC_VER

PakCheckFailed::PakCheckFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PakCheckFailed::InitAsDefaultInstance() {
}

PakCheckFailed::PakCheckFailed(const PakCheckFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PakCheckFailed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PakCheckFailed::~PakCheckFailed() {
  SharedDtor();
}

void PakCheckFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PakCheckFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PakCheckFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PakCheckFailed_descriptor_;
}

const PakCheckFailed& PakCheckFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

PakCheckFailed* PakCheckFailed::default_instance_ = NULL;

PakCheckFailed* PakCheckFailed::New() const {
  return new PakCheckFailed;
}

void PakCheckFailed::Clear() {
  paknames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PakCheckFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pakNames = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pakNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paknames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paknames(this->paknames_size() - 1).data(),
            this->paknames(this->paknames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pakNames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PakCheckFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string pakNames = 1;
  for (int i = 0; i < this->paknames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paknames(i).data(), this->paknames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paknames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PakCheckFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string pakNames = 1;
  for (int i = 0; i < this->paknames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paknames(i).data(), this->paknames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->paknames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PakCheckFailed::ByteSize() const {
  int total_size = 0;

  // repeated string pakNames = 1;
  total_size += 1 * this->paknames_size();
  for (int i = 0; i < this->paknames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paknames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PakCheckFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PakCheckFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PakCheckFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PakCheckFailed::MergeFrom(const PakCheckFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  paknames_.MergeFrom(from.paknames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PakCheckFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PakCheckFailed::CopyFrom(const PakCheckFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PakCheckFailed::IsInitialized() const {

  return true;
}

void PakCheckFailed::Swap(PakCheckFailed* other) {
  if (other != this) {
    paknames_.Swap(&other->paknames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PakCheckFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PakCheckFailed_descriptor_;
  metadata.reflection = PakCheckFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitPveGameServer::kMaxPlayerCountFieldNumber;
#endif  // !_MSC_VER

InitPveGameServer::InitPveGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitPveGameServer::InitAsDefaultInstance() {
}

InitPveGameServer::InitPveGameServer(const InitPveGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitPveGameServer::SharedCtor() {
  _cached_size_ = 0;
  maxplayercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitPveGameServer::~InitPveGameServer() {
  SharedDtor();
}

void InitPveGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitPveGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitPveGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitPveGameServer_descriptor_;
}

const InitPveGameServer& InitPveGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

InitPveGameServer* InitPveGameServer::default_instance_ = NULL;

InitPveGameServer* InitPveGameServer::New() const {
  return new InitPveGameServer;
}

void InitPveGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxplayercount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitPveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxPlayerCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayercount_)));
          set_has_maxplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitPveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 maxPlayerCount = 1;
  if (has_maxplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxplayercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitPveGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 maxPlayerCount = 1;
  if (has_maxplayercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxplayercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitPveGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxPlayerCount = 1;
    if (has_maxplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitPveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitPveGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitPveGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitPveGameServer::MergeFrom(const InitPveGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxplayercount()) {
      set_maxplayercount(from.maxplayercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitPveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitPveGameServer::CopyFrom(const InitPveGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitPveGameServer::IsInitialized() const {

  return true;
}

void InitPveGameServer::Swap(InitPveGameServer* other) {
  if (other != this) {
    std::swap(maxplayercount_, other->maxplayercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitPveGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitPveGameServer_descriptor_;
  metadata.reflection = InitPveGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncPlayer::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

IncPlayer::IncPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IncPlayer::InitAsDefaultInstance() {
}

IncPlayer::IncPlayer(const IncPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IncPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncPlayer::~IncPlayer() {
  SharedDtor();
}

void IncPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncPlayer_descriptor_;
}

const IncPlayer& IncPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

IncPlayer* IncPlayer::default_instance_ = NULL;

IncPlayer* IncPlayer::New() const {
  return new IncPlayer;
}

void IncPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IncPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IncPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IncPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerGuid = 1;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncPlayer::MergeFrom(const IncPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncPlayer::CopyFrom(const IncPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncPlayer::IsInitialized() const {

  return true;
}

void IncPlayer::Swap(IncPlayer* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncPlayer_descriptor_;
  metadata.reflection = IncPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeIncPlayer::DeIncPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeIncPlayer::InitAsDefaultInstance() {
}

DeIncPlayer::DeIncPlayer(const DeIncPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeIncPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeIncPlayer::~DeIncPlayer() {
  SharedDtor();
}

void DeIncPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeIncPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeIncPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeIncPlayer_descriptor_;
}

const DeIncPlayer& DeIncPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

DeIncPlayer* DeIncPlayer::default_instance_ = NULL;

DeIncPlayer* DeIncPlayer::New() const {
  return new DeIncPlayer;
}

void DeIncPlayer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeIncPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeIncPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeIncPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeIncPlayer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeIncPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeIncPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeIncPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeIncPlayer::MergeFrom(const DeIncPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeIncPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeIncPlayer::CopyFrom(const DeIncPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeIncPlayer::IsInitialized() const {

  return true;
}

void DeIncPlayer::Swap(DeIncPlayer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeIncPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeIncPlayer_descriptor_;
  metadata.reflection = DeIncPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLog::kErrorFieldNumber;
const int ClientLog::kMachineIDFieldNumber;
const int ClientLog::kContentFieldNumber;
const int ClientLog::kMemoryStatusFieldNumber;
#endif  // !_MSC_VER

ClientLog::ClientLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLog::InitAsDefaultInstance() {
}

ClientLog::ClientLog(const ClientLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLog::SharedCtor() {
  _cached_size_ = 0;
  error_ = false;
  machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memorystatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLog::~ClientLog() {
  SharedDtor();
}

void ClientLog::SharedDtor() {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineid_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (memorystatus_ != &::google::protobuf::internal::kEmptyString) {
    delete memorystatus_;
  }
  if (this != default_instance_) {
  }
}

void ClientLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLog_descriptor_;
}

const ClientLog& ClientLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ClientLog* ClientLog::default_instance_ = NULL;

ClientLog* ClientLog::New() const {
  return new ClientLog;
}

void ClientLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = false;
    if (has_machineid()) {
      if (machineid_ != &::google::protobuf::internal::kEmptyString) {
        machineid_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_memorystatus()) {
      if (memorystatus_ != &::google::protobuf::internal::kEmptyString) {
        memorystatus_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machineID;
        break;
      }

      // required string machineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineid().data(), this->machineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memoryStatus;
        break;
      }

      // required string memoryStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memoryStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memorystatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memorystatus().data(), this->memorystatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->error(), output);
  }

  // required string machineID = 2;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineid().data(), this->machineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machineid(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // required string memoryStatus = 4;
  if (has_memorystatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memorystatus().data(), this->memorystatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->memorystatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->error(), target);
  }

  // required string machineID = 2;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineid().data(), this->machineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machineid(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // required string memoryStatus = 4;
  if (has_memorystatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memorystatus().data(), this->memorystatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->memorystatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool error = 1;
    if (has_error()) {
      total_size += 1 + 1;
    }

    // required string machineID = 2;
    if (has_machineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineid());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string memoryStatus = 4;
    if (has_memorystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memorystatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLog::MergeFrom(const ClientLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_machineid()) {
      set_machineid(from.machineid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_memorystatus()) {
      set_memorystatus(from.memorystatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLog::CopyFrom(const ClientLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientLog::Swap(ClientLog* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(machineid_, other->machineid_);
    std::swap(content_, other->content_);
    std::swap(memorystatus_, other->memorystatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLog_descriptor_;
  metadata.reflection = ClientLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDump::kMachineIDFieldNumber;
const int ClientDump::kDumpNameFieldNumber;
const int ClientDump::kDumpContentFieldNumber;
const int ClientDump::kMemoryStatusFieldNumber;
#endif  // !_MSC_VER

ClientDump::ClientDump()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientDump::InitAsDefaultInstance() {
}

ClientDump::ClientDump(const ClientDump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientDump::SharedCtor() {
  _cached_size_ = 0;
  machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dumpname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dumpcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memorystatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDump::~ClientDump() {
  SharedDtor();
}

void ClientDump::SharedDtor() {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineid_;
  }
  if (dumpname_ != &::google::protobuf::internal::kEmptyString) {
    delete dumpname_;
  }
  if (dumpcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete dumpcontent_;
  }
  if (memorystatus_ != &::google::protobuf::internal::kEmptyString) {
    delete memorystatus_;
  }
  if (this != default_instance_) {
  }
}

void ClientDump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDump_descriptor_;
}

const ClientDump& ClientDump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ClientDump* ClientDump::default_instance_ = NULL;

ClientDump* ClientDump::New() const {
  return new ClientDump;
}

void ClientDump::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machineid()) {
      if (machineid_ != &::google::protobuf::internal::kEmptyString) {
        machineid_->clear();
      }
    }
    if (has_dumpname()) {
      if (dumpname_ != &::google::protobuf::internal::kEmptyString) {
        dumpname_->clear();
      }
    }
    if (has_dumpcontent()) {
      if (dumpcontent_ != &::google::protobuf::internal::kEmptyString) {
        dumpcontent_->clear();
      }
    }
    if (has_memorystatus()) {
      if (memorystatus_ != &::google::protobuf::internal::kEmptyString) {
        memorystatus_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineid().data(), this->machineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dumpName;
        break;
      }

      // required string dumpName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dumpName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dumpname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dumpname().data(), this->dumpname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dumpContent;
        break;
      }

      // required bytes dumpContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dumpContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dumpcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memoryStatus;
        break;
      }

      // required string memoryStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memoryStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memorystatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memorystatus().data(), this->memorystatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string machineID = 1;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineid().data(), this->machineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machineid(), output);
  }

  // required string dumpName = 2;
  if (has_dumpname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dumpname().data(), this->dumpname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dumpname(), output);
  }

  // required bytes dumpContent = 3;
  if (has_dumpcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dumpcontent(), output);
  }

  // required string memoryStatus = 4;
  if (has_memorystatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memorystatus().data(), this->memorystatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->memorystatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientDump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string machineID = 1;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineid().data(), this->machineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machineid(), target);
  }

  // required string dumpName = 2;
  if (has_dumpname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dumpname().data(), this->dumpname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dumpname(), target);
  }

  // required bytes dumpContent = 3;
  if (has_dumpcontent()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->dumpcontent(), target);
  }

  // required string memoryStatus = 4;
  if (has_memorystatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memorystatus().data(), this->memorystatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->memorystatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientDump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machineID = 1;
    if (has_machineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineid());
    }

    // required string dumpName = 2;
    if (has_dumpname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dumpname());
    }

    // required bytes dumpContent = 3;
    if (has_dumpcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dumpcontent());
    }

    // required string memoryStatus = 4;
    if (has_memorystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memorystatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDump::MergeFrom(const ClientDump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machineid()) {
      set_machineid(from.machineid());
    }
    if (from.has_dumpname()) {
      set_dumpname(from.dumpname());
    }
    if (from.has_dumpcontent()) {
      set_dumpcontent(from.dumpcontent());
    }
    if (from.has_memorystatus()) {
      set_memorystatus(from.memorystatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDump::CopyFrom(const ClientDump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDump::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientDump::Swap(ClientDump* other) {
  if (other != this) {
    std::swap(machineid_, other->machineid_);
    std::swap(dumpname_, other->dumpname_);
    std::swap(dumpcontent_, other->dumpcontent_);
    std::swap(memorystatus_, other->memorystatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDump_descriptor_;
  metadata.reflection = ClientDump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SystemKeepalive::SystemKeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemKeepalive::InitAsDefaultInstance() {
}

SystemKeepalive::SystemKeepalive(const SystemKeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemKeepalive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemKeepalive::~SystemKeepalive() {
  SharedDtor();
}

void SystemKeepalive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemKeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemKeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemKeepalive_descriptor_;
}

const SystemKeepalive& SystemKeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

SystemKeepalive* SystemKeepalive::default_instance_ = NULL;

SystemKeepalive* SystemKeepalive::New() const {
  return new SystemKeepalive;
}

void SystemKeepalive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemKeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SystemKeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemKeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemKeepalive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemKeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemKeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemKeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemKeepalive::MergeFrom(const SystemKeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemKeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemKeepalive::CopyFrom(const SystemKeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemKeepalive::IsInitialized() const {

  return true;
}

void SystemKeepalive::Swap(SystemKeepalive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemKeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemKeepalive_descriptor_;
  metadata.reflection = SystemKeepalive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyBalanceAdd::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

ProxyBalanceAdd::ProxyBalanceAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyBalanceAdd::InitAsDefaultInstance() {
}

ProxyBalanceAdd::ProxyBalanceAdd(const ProxyBalanceAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyBalanceAdd::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyBalanceAdd::~ProxyBalanceAdd() {
  SharedDtor();
}

void ProxyBalanceAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyBalanceAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyBalanceAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyBalanceAdd_descriptor_;
}

const ProxyBalanceAdd& ProxyBalanceAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ProxyBalanceAdd* ProxyBalanceAdd::default_instance_ = NULL;

ProxyBalanceAdd* ProxyBalanceAdd::New() const {
  return new ProxyBalanceAdd;
}

void ProxyBalanceAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyBalanceAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyBalanceAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyBalanceAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyBalanceAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerGuid = 1;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyBalanceAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyBalanceAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyBalanceAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyBalanceAdd::MergeFrom(const ProxyBalanceAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyBalanceAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyBalanceAdd::CopyFrom(const ProxyBalanceAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyBalanceAdd::IsInitialized() const {

  return true;
}

void ProxyBalanceAdd::Swap(ProxyBalanceAdd* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyBalanceAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyBalanceAdd_descriptor_;
  metadata.reflection = ProxyBalanceAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyBalanceDel::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

ProxyBalanceDel::ProxyBalanceDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyBalanceDel::InitAsDefaultInstance() {
}

ProxyBalanceDel::ProxyBalanceDel(const ProxyBalanceDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyBalanceDel::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyBalanceDel::~ProxyBalanceDel() {
  SharedDtor();
}

void ProxyBalanceDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyBalanceDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyBalanceDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyBalanceDel_descriptor_;
}

const ProxyBalanceDel& ProxyBalanceDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

ProxyBalanceDel* ProxyBalanceDel::default_instance_ = NULL;

ProxyBalanceDel* ProxyBalanceDel::New() const {
  return new ProxyBalanceDel;
}

void ProxyBalanceDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyBalanceDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyBalanceDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyBalanceDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerGuid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyBalanceDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerGuid = 1;
    if (has_playerguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyBalanceDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyBalanceDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyBalanceDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyBalanceDel::MergeFrom(const ProxyBalanceDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyBalanceDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyBalanceDel::CopyFrom(const ProxyBalanceDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyBalanceDel::IsInitialized() const {

  return true;
}

void ProxyBalanceDel::Swap(ProxyBalanceDel* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyBalanceDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyBalanceDel_descriptor_;
  metadata.reflection = ProxyBalanceDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitUdpProxy::kUdpProxyHostFieldNumber;
const int InitUdpProxy::kUdpProxyPortFieldNumber;
#endif  // !_MSC_VER

InitUdpProxy::InitUdpProxy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitUdpProxy::InitAsDefaultInstance() {
}

InitUdpProxy::InitUdpProxy(const InitUdpProxy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitUdpProxy::SharedCtor() {
  _cached_size_ = 0;
  udpproxyhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udpproxyport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitUdpProxy::~InitUdpProxy() {
  SharedDtor();
}

void InitUdpProxy::SharedDtor() {
  if (udpproxyhost_ != &::google::protobuf::internal::kEmptyString) {
    delete udpproxyhost_;
  }
  if (this != default_instance_) {
  }
}

void InitUdpProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitUdpProxy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitUdpProxy_descriptor_;
}

const InitUdpProxy& InitUdpProxy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

InitUdpProxy* InitUdpProxy::default_instance_ = NULL;

InitUdpProxy* InitUdpProxy::New() const {
  return new InitUdpProxy;
}

void InitUdpProxy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_udpproxyhost()) {
      if (udpproxyhost_ != &::google::protobuf::internal::kEmptyString) {
        udpproxyhost_->clear();
      }
    }
    udpproxyport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitUdpProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string udpProxyHost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udpproxyhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udpproxyhost().data(), this->udpproxyhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_udpProxyPort;
        break;
      }

      // optional int32 udpProxyPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_udpProxyPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udpproxyport_)));
          set_has_udpproxyport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitUdpProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string udpProxyHost = 1;
  if (has_udpproxyhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udpproxyhost().data(), this->udpproxyhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->udpproxyhost(), output);
  }

  // optional int32 udpProxyPort = 2;
  if (has_udpproxyport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->udpproxyport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitUdpProxy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string udpProxyHost = 1;
  if (has_udpproxyhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udpproxyhost().data(), this->udpproxyhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->udpproxyhost(), target);
  }

  // optional int32 udpProxyPort = 2;
  if (has_udpproxyport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->udpproxyport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitUdpProxy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string udpProxyHost = 1;
    if (has_udpproxyhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udpproxyhost());
    }

    // optional int32 udpProxyPort = 2;
    if (has_udpproxyport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->udpproxyport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitUdpProxy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitUdpProxy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitUdpProxy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitUdpProxy::MergeFrom(const InitUdpProxy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_udpproxyhost()) {
      set_udpproxyhost(from.udpproxyhost());
    }
    if (from.has_udpproxyport()) {
      set_udpproxyport(from.udpproxyport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitUdpProxy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitUdpProxy::CopyFrom(const InitUdpProxy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitUdpProxy::IsInitialized() const {

  return true;
}

void InitUdpProxy::Swap(InitUdpProxy* other) {
  if (other != this) {
    std::swap(udpproxyhost_, other->udpproxyhost_);
    std::swap(udpproxyport_, other->udpproxyport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitUdpProxy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitUdpProxy_descriptor_;
  metadata.reflection = InitUdpProxy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerGuidNotify::kClientGuidFieldNumber;
const int PlayerGuidNotify::kUidFieldNumber;
const int PlayerGuidNotify::kTokenFieldNumber;
const int PlayerGuidNotify::kRobotFieldNumber;
const int PlayerGuidNotify::kSecurityKeyFieldNumber;
#endif  // !_MSC_VER

PlayerGuidNotify::PlayerGuidNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGuidNotify::InitAsDefaultInstance() {
}

PlayerGuidNotify::PlayerGuidNotify(const PlayerGuidNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGuidNotify::SharedCtor() {
  _cached_size_ = 0;
  clientguid_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  robot_ = 0;
  securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGuidNotify::~PlayerGuidNotify() {
  SharedDtor();
}

void PlayerGuidNotify::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete securitykey_;
  }
  if (this != default_instance_) {
  }
}

void PlayerGuidNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGuidNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGuidNotify_descriptor_;
}

const PlayerGuidNotify& PlayerGuidNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

PlayerGuidNotify* PlayerGuidNotify::default_instance_ = NULL;

PlayerGuidNotify* PlayerGuidNotify::New() const {
  return new PlayerGuidNotify;
}

void PlayerGuidNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientguid_ = 0u;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    robot_ = 0;
    if (has_securitykey()) {
      if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
        securitykey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGuidNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clientGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientguid_)));
          set_has_clientguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional bytes uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_robot;
        break;
      }

      // optional int32 robot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_securityKey;
        break;
      }

      // optional bytes securityKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_securityKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_securitykey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGuidNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clientGuid = 1;
  if (has_clientguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientguid(), output);
  }

  // optional bytes uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uid(), output);
  }

  // optional bytes token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->token(), output);
  }

  // optional int32 robot = 4;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->robot(), output);
  }

  // optional bytes securityKey = 5;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->securitykey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGuidNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clientGuid = 1;
  if (has_clientguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientguid(), target);
  }

  // optional bytes uid = 2;
  if (has_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uid(), target);
  }

  // optional bytes token = 3;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  // optional int32 robot = 4;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->robot(), target);
  }

  // optional bytes securityKey = 5;
  if (has_securitykey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->securitykey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGuidNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clientGuid = 1;
    if (has_clientguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientguid());
    }

    // optional bytes uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uid());
    }

    // optional bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional int32 robot = 4;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot());
    }

    // optional bytes securityKey = 5;
    if (has_securitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->securitykey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGuidNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGuidNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGuidNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGuidNotify::MergeFrom(const PlayerGuidNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientguid()) {
      set_clientguid(from.clientguid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_securitykey()) {
      set_securitykey(from.securitykey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGuidNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGuidNotify::CopyFrom(const PlayerGuidNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGuidNotify::IsInitialized() const {

  return true;
}

void PlayerGuidNotify::Swap(PlayerGuidNotify* other) {
  if (other != this) {
    std::swap(clientguid_, other->clientguid_);
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(robot_, other->robot_);
    std::swap(securitykey_, other->securitykey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGuidNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGuidNotify_descriptor_;
  metadata.reflection = PlayerGuidNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPacketStat::kNeedStatFieldNumber;
const int SetPacketStat::kNeedStatTimeFieldNumber;
#endif  // !_MSC_VER

SetPacketStat::SetPacketStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPacketStat::InitAsDefaultInstance() {
}

SetPacketStat::SetPacketStat(const SetPacketStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPacketStat::SharedCtor() {
  _cached_size_ = 0;
  needstat_ = false;
  needstattime_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPacketStat::~SetPacketStat() {
  SharedDtor();
}

void SetPacketStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPacketStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPacketStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPacketStat_descriptor_;
}

const SetPacketStat& SetPacketStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

SetPacketStat* SetPacketStat::default_instance_ = NULL;

SetPacketStat* SetPacketStat::New() const {
  return new SetPacketStat;
}

void SetPacketStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needstat_ = false;
    needstattime_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPacketStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool needStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needstat_)));
          set_has_needstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needStatTime;
        break;
      }

      // optional bool needStatTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needStatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needstattime_)));
          set_has_needstattime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPacketStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool needStat = 1;
  if (has_needstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->needstat(), output);
  }

  // optional bool needStatTime = 2;
  if (has_needstattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->needstattime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPacketStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool needStat = 1;
  if (has_needstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->needstat(), target);
  }

  // optional bool needStatTime = 2;
  if (has_needstattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->needstattime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPacketStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool needStat = 1;
    if (has_needstat()) {
      total_size += 1 + 1;
    }

    // optional bool needStatTime = 2;
    if (has_needstattime()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPacketStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPacketStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPacketStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPacketStat::MergeFrom(const SetPacketStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needstat()) {
      set_needstat(from.needstat());
    }
    if (from.has_needstattime()) {
      set_needstattime(from.needstattime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPacketStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPacketStat::CopyFrom(const SetPacketStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPacketStat::IsInitialized() const {

  return true;
}

void SetPacketStat::Swap(SetPacketStat* other) {
  if (other != this) {
    std::swap(needstat_, other->needstat_);
    std::swap(needstattime_, other->needstattime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPacketStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPacketStat_descriptor_;
  metadata.reflection = SetPacketStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileReq::kFileNameFieldNumber;
const int UploadFileReq::kRoleNameFieldNumber;
#endif  // !_MSC_VER

UploadFileReq::UploadFileReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileReq::InitAsDefaultInstance() {
}

UploadFileReq::UploadFileReq(const UploadFileReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileReq::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileReq::~UploadFileReq() {
  SharedDtor();
}

void UploadFileReq::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void UploadFileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileReq_descriptor_;
}

const UploadFileReq& UploadFileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

UploadFileReq* UploadFileReq::default_instance_ = NULL;

UploadFileReq* UploadFileReq::New() const {
  return new UploadFileReq;
}

void UploadFileReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }

      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileReq::MergeFrom(const UploadFileReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileReq::CopyFrom(const UploadFileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileReq::IsInitialized() const {

  return true;
}

void UploadFileReq::Swap(UploadFileReq* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileReq_descriptor_;
  metadata.reflection = UploadFileReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileReply::kRoleNameFieldNumber;
const int UploadFileReply::kDataFieldNumber;
#endif  // !_MSC_VER

UploadFileReply::UploadFileReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileReply::InitAsDefaultInstance() {
}

UploadFileReply::UploadFileReply(const UploadFileReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileReply::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileReply::~UploadFileReply() {
  SharedDtor();
}

void UploadFileReply::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UploadFileReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileReply_descriptor_;
}

const UploadFileReply& UploadFileReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

UploadFileReply* UploadFileReply::default_instance_ = NULL;

UploadFileReply* UploadFileReply::New() const {
  return new UploadFileReply;
}

void UploadFileReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileReply::MergeFrom(const UploadFileReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileReply::CopyFrom(const UploadFileReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileReply::IsInitialized() const {

  return true;
}

void UploadFileReply::Swap(UploadFileReply* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileReply_descriptor_;
  metadata.reflection = UploadFileReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectModuleInfo::kPlayerIDFieldNumber;
const int CollectModuleInfo::kSignFieldNumber;
const int CollectModuleInfo::kModulePathFieldNumber;
const int CollectModuleInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

CollectModuleInfo::CollectModuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectModuleInfo::InitAsDefaultInstance() {
}

CollectModuleInfo::CollectModuleInfo(const CollectModuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectModuleInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modulepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectModuleInfo::~CollectModuleInfo() {
  SharedDtor();
}

void CollectModuleInfo::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (modulepath_ != &::google::protobuf::internal::kEmptyString) {
    delete modulepath_;
  }
  if (this != default_instance_) {
  }
}

void CollectModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectModuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectModuleInfo_descriptor_;
}

const CollectModuleInfo& CollectModuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

CollectModuleInfo* CollectModuleInfo::default_instance_ = NULL;

CollectModuleInfo* CollectModuleInfo::New() const {
  return new CollectModuleInfo;
}

void CollectModuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_modulepath()) {
      if (modulepath_ != &::google::protobuf::internal::kEmptyString) {
        modulepath_->clear();
      }
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sign;
        break;
      }

      // optional bytes sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modulePath;
        break;
      }

      // optional bytes modulePath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modulePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modulepath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional bytes sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sign(), output);
  }

  // optional bytes modulePath = 3;
  if (has_modulepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->modulepath(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectModuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional bytes sign = 2;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign(), target);
  }

  // optional bytes modulePath = 3;
  if (has_modulepath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modulepath(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectModuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional bytes sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // optional bytes modulePath = 3;
    if (has_modulepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->modulepath());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectModuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectModuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectModuleInfo::MergeFrom(const CollectModuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_modulepath()) {
      set_modulepath(from.modulepath());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectModuleInfo::CopyFrom(const CollectModuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectModuleInfo::IsInitialized() const {

  return true;
}

void CollectModuleInfo::Swap(CollectModuleInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(sign_, other->sign_);
    std::swap(modulepath_, other->modulepath_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectModuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectModuleInfo_descriptor_;
  metadata.reflection = CollectModuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncItemLock::kAccountFieldNumber;
const int SyncItemLock::kPlayerIDFieldNumber;
const int SyncItemLock::kLockFieldNumber;
#endif  // !_MSC_VER

SyncItemLock::SyncItemLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncItemLock::InitAsDefaultInstance() {
}

SyncItemLock::SyncItemLock(const SyncItemLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncItemLock::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  lock_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncItemLock::~SyncItemLock() {
  SharedDtor();
}

void SyncItemLock::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void SyncItemLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncItemLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncItemLock_descriptor_;
}

const SyncItemLock& SyncItemLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

SyncItemLock* SyncItemLock::default_instance_ = NULL;

SyncItemLock* SyncItemLock::New() const {
  return new SyncItemLock;
}

void SyncItemLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    playerid_ = 0u;
    lock_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncItemLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional uint32 playerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock;
        break;
      }

      // optional bool lock = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncItemLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional bool lock = 3 [default = true];
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncItemLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional bool lock = 3 [default = true];
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncItemLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional bool lock = 3 [default = true];
    if (has_lock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncItemLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncItemLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncItemLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncItemLock::MergeFrom(const SyncItemLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncItemLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncItemLock::CopyFrom(const SyncItemLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncItemLock::IsInitialized() const {

  return true;
}

void SyncItemLock::Swap(SyncItemLock* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(playerid_, other->playerid_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncItemLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncItemLock_descriptor_;
  metadata.reflection = SyncItemLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneString::kStrFieldNumber;
#endif  // !_MSC_VER

OneString::OneString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneString::InitAsDefaultInstance() {
}

OneString::OneString(const OneString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneString::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneString::~OneString() {
  SharedDtor();
}

void OneString::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void OneString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneString_descriptor_;
}

const OneString& OneString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packetSystem_2eproto();
  return *default_instance_;
}

OneString* OneString::default_instance_ = NULL;

OneString* OneString::New() const {
  return new OneString;
}

void OneString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneString::MergeFrom(const OneString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneString::CopyFrom(const OneString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneString::IsInitialized() const {

  return true;
}

void OneString::Swap(OneString* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneString_descriptor_;
  metadata.reflection = OneString_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
