// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
// source proto file: header.proto
#include "header.lua.h"
#include <lua/lua.hpp>
#include <string>
#include <sstream>
#include <set>
#include <boost/cast.hpp>
extern int udataNum;
extern std::set<::google::protobuf::Message*> u_datas;


namespace { bool success = AddOpenFunction(lua_protobuf_pb_open); }
int lua_protobuf_pb_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "proto-buf.pb", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "pb");
    }
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "proto-buf.pb", funcs);
    lua_protobuf_pb_Header_open(L);
    return 1;
}


static const struct luaL_Reg Header_functions [] = {
    {"new", lua_protobuf_pb_Header_new},
    {NULL, NULL}
};

static const struct luaL_Reg Header_methods [] = {
    {"serialized", lua_protobuf_pb_Header_serialized},
    {"parsefromstring", lua_protobuf_pb_Header_parsefromstring},
    {"data", lua_protobuf_pb_Header_data},
    {"assign", lua_protobuf_pb_Header_assign},
    {"clear", lua_protobuf_pb_Header_clear},
    {"__gc", lua_protobuf_pb_Header_gc},
    {"size", lua_protobuf_pb_Header_size},
    {"clear_packetID", lua_protobuf_pb_Header_clear_packetID},
    {"get_packetID", lua_protobuf_pb_Header_get_packetID},
    {"set_packetID", lua_protobuf_pb_Header_set_packetID},
    {"has_packetID", lua_protobuf_pb_Header_has_packetID},
    {"clear_packetSize", lua_protobuf_pb_Header_clear_packetSize},
    {"get_packetSize", lua_protobuf_pb_Header_get_packetSize},
    {"set_packetSize", lua_protobuf_pb_Header_set_packetSize},
    {"has_packetSize", lua_protobuf_pb_Header_has_packetSize},
    {"clear_sourceGuid", lua_protobuf_pb_Header_clear_sourceGuid},
    {"get_sourceGuid", lua_protobuf_pb_Header_get_sourceGuid},
    {"set_sourceGuid", lua_protobuf_pb_Header_set_sourceGuid},
    {"has_sourceGuid", lua_protobuf_pb_Header_has_sourceGuid},
    {"clear_playerID", lua_protobuf_pb_Header_clear_playerID},
    {"get_playerID", lua_protobuf_pb_Header_get_playerID},
    {"set_playerID", lua_protobuf_pb_Header_set_playerID},
    {"has_playerID", lua_protobuf_pb_Header_has_playerID},
    {"clear_gateGuid", lua_protobuf_pb_Header_clear_gateGuid},
    {"get_gateGuid", lua_protobuf_pb_Header_get_gateGuid},
    {"set_gateGuid", lua_protobuf_pb_Header_set_gateGuid},
    {"has_gateGuid", lua_protobuf_pb_Header_has_gateGuid},
    {"clear_playerGuid", lua_protobuf_pb_Header_clear_playerGuid},
    {"get_playerGuid", lua_protobuf_pb_Header_get_playerGuid},
    {"set_playerGuid", lua_protobuf_pb_Header_set_playerGuid},
    {"has_playerGuid", lua_protobuf_pb_Header_has_playerGuid},
    {"clear_remoteGuids", lua_protobuf_pb_Header_clear_remoteGuids},
    {"get_remoteGuids", lua_protobuf_pb_Header_get_remoteGuids},
    {"set_remoteGuids", lua_protobuf_pb_Header_set_remoteGuids},
    {"size_remoteGuids", lua_protobuf_pb_Header_size_remoteGuids},
    {"clear_recvPlayerIDs", lua_protobuf_pb_Header_clear_recvPlayerIDs},
    {"get_recvPlayerIDs", lua_protobuf_pb_Header_get_recvPlayerIDs},
    {"set_recvPlayerIDs", lua_protobuf_pb_Header_set_recvPlayerIDs},
    {"size_recvPlayerIDs", lua_protobuf_pb_Header_size_recvPlayerIDs},
    {"clear_ackSequenceNumber", lua_protobuf_pb_Header_clear_ackSequenceNumber},
    {"get_ackSequenceNumber", lua_protobuf_pb_Header_get_ackSequenceNumber},
    {"set_ackSequenceNumber", lua_protobuf_pb_Header_set_ackSequenceNumber},
    {"has_ackSequenceNumber", lua_protobuf_pb_Header_has_ackSequenceNumber},
    {"clear_sequenceNumber", lua_protobuf_pb_Header_clear_sequenceNumber},
    {"get_sequenceNumber", lua_protobuf_pb_Header_get_sequenceNumber},
    {"set_sequenceNumber", lua_protobuf_pb_Header_set_sequenceNumber},
    {"has_sequenceNumber", lua_protobuf_pb_Header_has_sequenceNumber},
    {NULL, NULL},
};

int lua_protobuf_pb_Header_open(lua_State *L)
{
    luaL_newmetatable(L, "proto-buf.pb.Header");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, Header_methods);
    luaL_register(L, "proto-buf.pb.Header", Header_functions);
    lua_pop(L, 2);
    return 1;
}


void lua_protobuf_pb_Header_(lua_State *L, ::google::protobuf::Message* msg, bool needDel /*= true*/ )
{
    boost::polymorphic_downcast<::pb::Header*>(msg);
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->msg = msg;
    ud->needDel = needDel;
    luaL_getmetatable(L, "proto-buf.pb.Header");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
}
int lua_protobuf_pb_Header_new(lua_State *L)
{
    msg_udata *ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ::google::protobuf::Message* msg = new ::pb::Header();
    ud->msg = msg;
    ud->needDel = true;
    luaL_getmetatable(L, "proto-buf.pb.Header");
    lua_setmetatable(L, -2);
    udataNum++;
    u_datas.insert(msg);
    return 1;
}

int lua_protobuf_pb_Header_data(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushlightuserdata(L, m);
    return 1;
}

int lua_protobuf_pb_Header_assign(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    msg_udata *srcud = (msg_udata *)luaL_checkudata(L, 2, "proto-buf.pb.Header");
    ::pb::Header* src = boost::polymorphic_downcast<::pb::Header*>(srcud->msg);
    *m = *src;
    return 0;
}

int lua_protobuf_pb_Header_parsefromstring(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    int type = lua_type(L, 2);
    if (type == LUA_TSTRING) { 
        if (!m->ParseFromArray(luaL_checkstring(L, 2), luaL_checkinteger(L, 3))) {
            return luaL_error(L, "error parsefromstring message case 2");
        }
    }
    else if (type == LUA_TLIGHTUSERDATA) {
        ::google::protobuf::Message* gpm = static_cast<::google::protobuf::Message*>(lua_touserdata(L, 2));
        m->Clear();
        if (gpm != NULL)
        {
            m->CheckTypeAndMergeFrom(*gpm);
        }
    }
    else
    {
        return luaL_error(L, "error parsefromstring wrong type.");
    }
    return 0;
}
int lua_protobuf_pb_Header_gc(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    if (mud->needDel)
    {
        delete mud->msg;
    }
    udataNum--;
    u_datas.erase(mud->msg);
    return 0;
}
int lua_protobuf_pb_Header_clear(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->Clear();
    return 0;
}
int lua_protobuf_pb_Header_serialized(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    int size = m->ByteSize();
    ::google::protobuf::uint8* data = (::google::protobuf::uint8*)malloc(sizeof(::google::protobuf::uint8)*size);
    m->SerializeWithCachedSizesToArray(data);
    lua_pushlstring(L, (const char*)data, size);
    free(data);
    return 1;
}
int lua_protobuf_pb_Header_size(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->ByteSize());
    return 1;
}
int lua_protobuf_pb_Header_clear_packetID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_packetid();
    return 0;
}

int lua_protobuf_pb_Header_get_packetID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->packetid());
    return 1;
}

int lua_protobuf_pb_Header_set_packetID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_packetid(i);
    return 0;
}

int lua_protobuf_pb_Header_has_packetID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_packetid());
    return 1;
}

int lua_protobuf_pb_Header_clear_packetSize(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_packetsize();
    return 0;
}

int lua_protobuf_pb_Header_get_packetSize(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->packetsize());
    return 1;
}

int lua_protobuf_pb_Header_set_packetSize(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_packetsize(i);
    return 0;
}

int lua_protobuf_pb_Header_has_packetSize(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_packetsize());
    return 1;
}

int lua_protobuf_pb_Header_clear_sourceGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_sourceguid();
    return 0;
}

int lua_protobuf_pb_Header_get_sourceGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->sourceguid());
    return 1;
}

int lua_protobuf_pb_Header_set_sourceGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_sourceguid(i);
    return 0;
}

int lua_protobuf_pb_Header_has_sourceGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_sourceguid());
    return 1;
}

int lua_protobuf_pb_Header_clear_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_playerid();
    return 0;
}

int lua_protobuf_pb_Header_get_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->playerid());
    return 1;
}

int lua_protobuf_pb_Header_set_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerid(i);
    return 0;
}

int lua_protobuf_pb_Header_has_playerID(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_playerid());
    return 1;
}

int lua_protobuf_pb_Header_clear_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_gateguid();
    return 0;
}

int lua_protobuf_pb_Header_get_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->gateguid());
    return 1;
}

int lua_protobuf_pb_Header_set_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_gateguid(i);
    return 0;
}

int lua_protobuf_pb_Header_has_gateGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_gateguid());
    return 1;
}

int lua_protobuf_pb_Header_clear_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_playerguid();
    return 0;
}

int lua_protobuf_pb_Header_get_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->playerguid());
    return 1;
}

int lua_protobuf_pb_Header_set_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_playerguid(i);
    return 0;
}

int lua_protobuf_pb_Header_has_playerGuid(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_playerguid());
    return 1;
}

int lua_protobuf_pb_Header_clear_remoteGuids(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_remoteguids();
    return 0;
}

int lua_protobuf_pb_Header_get_remoteGuids(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    size_t index = m->remoteguids_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        lua_pushnumber(L, m->remoteguids(index-1));
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_Header_set_remoteGuids(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, -1, LUA_TTABLE);
    lua_pushnil(L);
    while (lua_next(L, -2)) {
        luaL_checktype(L, -1, LUA_TNUMBER);
        lua_Number v = luaL_checknumber(L, -1);
        m->add_remoteguids(v);
        lua_pop(L, 1);
    }
    lua_pop(L, 1);
    return 0;
}

int lua_protobuf_pb_Header_size_remoteGuids(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    int size = m->remoteguids_size();
    lua_pushnumber(L, size);
    return 1;
}

int lua_protobuf_pb_Header_clear_recvPlayerIDs(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_recvplayerids();
    return 0;
}

int lua_protobuf_pb_Header_get_recvPlayerIDs(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    size_t index = m->recvplayerids_size();
    lua_newtable(L);
    while(index > 0) {
        lua_pushnumber(L, index); //key
        lua_pushnumber(L, m->recvplayerids(index-1));
        lua_rawset(L, -3);
        index--;
    }
    return 1;
}

int lua_protobuf_pb_Header_set_recvPlayerIDs(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, -1, LUA_TTABLE);
    lua_pushnil(L);
    while (lua_next(L, -2)) {
        luaL_checktype(L, -1, LUA_TNUMBER);
        lua_Number v = luaL_checknumber(L, -1);
        m->add_recvplayerids(v);
        lua_pop(L, 1);
    }
    lua_pop(L, 1);
    return 0;
}

int lua_protobuf_pb_Header_size_recvPlayerIDs(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    int size = m->recvplayerids_size();
    lua_pushnumber(L, size);
    return 1;
}

int lua_protobuf_pb_Header_clear_ackSequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_acksequencenumber();
    return 0;
}

int lua_protobuf_pb_Header_get_ackSequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->acksequencenumber());
    return 1;
}

int lua_protobuf_pb_Header_set_ackSequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_acksequencenumber(i);
    return 0;
}

int lua_protobuf_pb_Header_has_ackSequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_acksequencenumber());
    return 1;
}

int lua_protobuf_pb_Header_clear_sequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    m->clear_sequencenumber();
    return 0;
}

int lua_protobuf_pb_Header_get_sequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushnumber(L, m->sequencenumber());
    return 1;
}

int lua_protobuf_pb_Header_set_sequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    luaL_checktype(L, 2, LUA_TNUMBER);
    lua_Number i = luaL_checknumber(L, 2);
    m->set_sequencenumber(i);
    return 0;
}

int lua_protobuf_pb_Header_has_sequenceNumber(lua_State *L)
{
    msg_udata *mud = (msg_udata *)luaL_checkudata(L, 1, "proto-buf.pb.Header");
    ::pb::Header* m = boost::polymorphic_downcast<::pb::Header*>(mud->msg);
    lua_pushboolean(L, m->has_sequencenumber());
    return 1;
}
